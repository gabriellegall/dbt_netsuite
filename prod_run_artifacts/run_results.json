{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.7", "generated_at": "2024-10-21T01:04:46.547706Z", "invocation_id": "53e05169-1fa7-4df0-885e-b9520b94db7b", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.450802Z", "completed_at": "2024-10-21T01:04:34.463895Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:34.464271Z", "completed_at": "2024-10-21T01:04:34.464287Z"}], "thread_id": "Thread-1", "execution_time": 0.014363288879394531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.exposures", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith\n    dummy_cte as (\n\n        select 1 as foo\n\n    )\n\nselect\n    cast(null as VARCHAR(8000)) as command_invocation_id\n    , cast(null as VARCHAR(8000)) as node_id\n    , cast(null as DATETIME2(6)) as run_started_at\n    , cast(null as VARCHAR(8000)) as name\n    , cast(null as VARCHAR(8000)) as type\n    , cast(null as VARCHAR(8000)) as owner\n    , cast(null as VARCHAR(8000)) as maturity\n    , cast(null as VARCHAR(8000)) as path\n    , cast(null as VARCHAR(8000)) as description\n    , cast(null as VARCHAR(8000)) as url\n    , cast(null as VARCHAR(8000)) as package_name\n    , cast(null as VARCHAR(8000)) as depends_on_nodes\n    , cast(null as VARCHAR(8000)) as tags\n    , cast(null as VARCHAR(8000)) as all_results\nfrom dummy_cte\nwhere 1 = 0", "relation_name": "\"netsuite\".\"prod_log\".\"exposures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.466259Z", "completed_at": "2024-10-21T01:04:34.474055Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:34.474417Z", "completed_at": "2024-10-21T01:04:34.474423Z"}], "thread_id": "Thread-1", "execution_time": 0.009018659591674805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.invocations", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith\n    dummy_cte as (\n\n        select 1 as foo\n\n    )\n\nselect\n    cast(null as VARCHAR(8000)) as command_invocation_id\n    , cast(null as VARCHAR(8000)) as dbt_version\n    , cast(null as VARCHAR(8000)) as project_name\n    , cast(null as DATETIME2(6)) as run_started_at\n    , cast(null as VARCHAR(8000)) as dbt_command\n    , cast(null as BIT) as full_refresh_flag\n    , cast(null as VARCHAR(8000)) as target_profile_name\n    , cast(null as VARCHAR(8000)) as target_name\n    , cast(null as VARCHAR(8000)) as target_schema\n    , cast(null as INT) as target_threads\n    , cast(null as VARCHAR(8000)) as dbt_cloud_project_id\n    , cast(null as VARCHAR(8000)) as dbt_cloud_job_id\n    , cast(null as VARCHAR(8000)) as dbt_cloud_run_id\n    , cast(null as VARCHAR(8000)) as dbt_cloud_run_reason_category\n    , cast(null as VARCHAR(8000)) as dbt_cloud_run_reason\n    , cast(null as VARCHAR(8000)) as env_vars\n    , cast(null as VARCHAR(8000)) as dbt_vars\n    , cast(null as VARCHAR(8000)) as invocation_args\n    , cast(null as VARCHAR(8000)) as dbt_custom_envs\nfrom dummy_cte\nwhere 1 = 0", "relation_name": "\"netsuite\".\"prod_log\".\"invocations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.476384Z", "completed_at": "2024-10-21T01:04:34.485480Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:34.485845Z", "completed_at": "2024-10-21T01:04:34.485852Z"}], "thread_id": "Thread-1", "execution_time": 0.010320663452148438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.model_executions", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (select 1 as foo)\n\nselect\n    cast(null as VARCHAR(8000)) as command_invocation_id,\n    cast(null as VARCHAR(8000)) as node_id,\n    cast(null as DATETIME2(6)) as run_started_at,\n    cast(null as BIT) as was_full_refresh,\n    cast(null as VARCHAR(8000)) as thread_id,\n    cast(null as VARCHAR(8000)) as status,\n    cast(null as DATETIME2(6)) as compile_started_at,\n    cast(null as DATETIME2(6)) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    \n    cast(null as VARCHAR(8000)) as materialization,\n    cast(null as VARCHAR(8000)) as  \"schema\"\n    ,\n    cast(null as VARCHAR(8000)) as name,\n    cast(null as VARCHAR(8000)) as alias,\n    cast(null as VARCHAR(8000)) as message,\n    cast(null as VARCHAR(8000)) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "relation_name": "\"netsuite\".\"prod_log\".\"model_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.487837Z", "completed_at": "2024-10-21T01:04:34.495550Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:34.495914Z", "completed_at": "2024-10-21T01:04:34.495920Z"}], "thread_id": "Thread-1", "execution_time": 0.00903630256652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.models", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (select 1 as foo)\n\nselect\n    cast(null as VARCHAR(8000)) as command_invocation_id,\n    cast(null as VARCHAR(8000)) as node_id,\n    cast(null as DATETIME2(6)) as run_started_at,\n    cast(null as VARCHAR(8000)) as  \"database\"\n    ,\n    cast(null as VARCHAR(8000)) as  \"schema\"\n    ,\n    cast(null as VARCHAR(8000)) as name,\n    cast(null as VARCHAR(8000)) as depends_on_nodes,\n    cast(null as VARCHAR(8000)) as package_name,\n    cast(null as VARCHAR(8000)) as path,\n    cast(null as VARCHAR(8000)) as checksum,\n    cast(null as VARCHAR(8000)) as materialization,\n    cast(null as VARCHAR(8000)) as tags,\n    cast(null as VARCHAR(8000)) as meta,\n    cast(null as VARCHAR(8000)) as alias,\n    cast(null as VARCHAR(8000)) as all_results\nfrom dummy_cte\nwhere 1 = 0", "relation_name": "\"netsuite\".\"prod_log\".\"models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.497845Z", "completed_at": "2024-10-21T01:04:34.505357Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:34.505717Z", "completed_at": "2024-10-21T01:04:34.505724Z"}], "thread_id": "Thread-1", "execution_time": 0.00878453254699707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.seed_executions", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (select 1 as foo)\n\nselect\n    cast(null as VARCHAR(8000)) as command_invocation_id,\n    cast(null as VARCHAR(8000)) as node_id,\n    cast(null as DATETIME2(6)) as run_started_at,\n    cast(null as BIT) as was_full_refresh,\n    cast(null as VARCHAR(8000)) as thread_id,\n    cast(null as VARCHAR(8000)) as status,\n    cast(null as DATETIME2(6)) as compile_started_at,\n    cast(null as DATETIME2(6)) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    cast(null as VARCHAR(8000)) as materialization,\n    cast(null as VARCHAR(8000)) as  \"schema\"\n    ,\n    cast(null as VARCHAR(8000)) as name,\n    cast(null as VARCHAR(8000)) as alias,\n    cast(null as VARCHAR(8000)) as message,\n    cast(null as VARCHAR(8000)) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "relation_name": "\"netsuite\".\"prod_log\".\"seed_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.507521Z", "completed_at": "2024-10-21T01:04:34.515547Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:34.515915Z", "completed_at": "2024-10-21T01:04:34.515922Z"}], "thread_id": "Thread-1", "execution_time": 0.00925898551940918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.seeds", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (select 1 as foo)\n\nselect\n    cast(null as VARCHAR(8000)) as command_invocation_id,\n    cast(null as VARCHAR(8000)) as node_id,\n    cast(null as DATETIME2(6)) as run_started_at,\n    cast(null as VARCHAR(8000)) as  \"database\"\n    ,\n    cast(null as VARCHAR(8000)) as  \"schema\"\n    ,\n    cast(null as VARCHAR(8000)) as name,\n    cast(null as VARCHAR(8000)) as package_name,\n    cast(null as VARCHAR(8000)) as path,\n    cast(null as VARCHAR(8000)) as checksum,\n    cast(null as VARCHAR(8000)) as meta,\n    cast(null as VARCHAR(8000)) as alias,\n    cast(null as VARCHAR(8000)) as all_results\nfrom dummy_cte\nwhere 1 = 0", "relation_name": "\"netsuite\".\"prod_log\".\"seeds\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.517832Z", "completed_at": "2024-10-21T01:04:34.525304Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:34.525667Z", "completed_at": "2024-10-21T01:04:34.525674Z"}], "thread_id": "Thread-1", "execution_time": 0.008736371994018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.snapshot_executions", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (select 1 as foo)\n\nselect\n    cast(null as VARCHAR(8000)) as command_invocation_id,\n    cast(null as VARCHAR(8000)) as node_id,\n    cast(null as DATETIME2(6)) as run_started_at,\n    cast(null as BIT) as was_full_refresh,\n    cast(null as VARCHAR(8000)) as thread_id,\n    cast(null as VARCHAR(8000)) as status,\n    cast(null as DATETIME2(6)) as compile_started_at,\n    cast(null as DATETIME2(6)) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    cast(null as VARCHAR(8000)) as materialization,\n    cast(null as VARCHAR(8000)) as  \"schema\"\n    ,\n    cast(null as VARCHAR(8000)) as name,\n    cast(null as VARCHAR(8000)) as alias,\n    cast(null as VARCHAR(8000)) as message,\n    cast(null as VARCHAR(8000)) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "relation_name": "\"netsuite\".\"prod_log\".\"snapshot_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.527641Z", "completed_at": "2024-10-21T01:04:34.535104Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:34.535467Z", "completed_at": "2024-10-21T01:04:34.535474Z"}], "thread_id": "Thread-1", "execution_time": 0.008786439895629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.snapshots", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (select 1 as foo)\n\nselect\n    cast(null as VARCHAR(8000)) as command_invocation_id,\n    cast(null as VARCHAR(8000)) as node_id,\n    cast(null as DATETIME2(6)) as run_started_at,\n    cast(null as VARCHAR(8000)) as  \"database\"\n    ,\n    cast(null as VARCHAR(8000)) as  \"schema\"\n    ,\n    cast(null as VARCHAR(8000)) as name,\n    cast(null as VARCHAR(8000)) as depends_on_nodes,\n    cast(null as VARCHAR(8000)) as package_name,\n    cast(null as VARCHAR(8000)) as path,\n    cast(null as VARCHAR(8000)) as checksum,\n    cast(null as VARCHAR(8000)) as strategy,\n    cast(null as VARCHAR(8000)) as meta,\n    cast(null as VARCHAR(8000)) as alias,\n    cast(null as VARCHAR(8000)) as all_results\nfrom dummy_cte\nwhere 1 = 0", "relation_name": "\"netsuite\".\"prod_log\".\"snapshots\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.537493Z", "completed_at": "2024-10-21T01:04:34.545073Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:34.545433Z", "completed_at": "2024-10-21T01:04:34.545440Z"}], "thread_id": "Thread-1", "execution_time": 0.00894618034362793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.sources", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (select 1 as foo)\n\nselect\n    cast(null as VARCHAR(8000)) as command_invocation_id,\n    cast(null as VARCHAR(8000)) as node_id,\n    cast(null as DATETIME2(6)) as run_started_at,\n    cast(null as VARCHAR(8000)) as  \"database\"\n    ,\n    cast(null as VARCHAR(8000)) as  \"schema\"\n    ,\n    cast(null as VARCHAR(8000)) as source_name,\n    cast(null as VARCHAR(8000)) as loader,\n    cast(null as VARCHAR(8000)) as name,\n    cast(null as VARCHAR(8000)) as identifier,\n    cast(null as VARCHAR(8000)) as loaded_at_field\n    , cast(null as VARCHAR(8000)) as freshness\n    ,\n    cast(null as VARCHAR(8000)) as all_results\nfrom dummy_cte\nwhere 1 = 0", "relation_name": "\"netsuite\".\"prod_log\".\"sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.547433Z", "completed_at": "2024-10-21T01:04:34.554795Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:34.555153Z", "completed_at": "2024-10-21T01:04:34.555159Z"}], "thread_id": "Thread-1", "execution_time": 0.00877690315246582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.test_executions", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith\n    dummy_cte as (\n\n        select 1 as foo\n    )\n\nselect\n    cast(null as VARCHAR(8000)) as command_invocation_id\n    , cast(null as VARCHAR(8000)) as node_id\n    , cast(null as DATETIME2(6)) as run_started_at\n    , cast(null as BIT) as was_full_refresh\n    , cast(null as VARCHAR(8000)) as thread_id\n    , cast(null as VARCHAR(8000)) as status\n    , cast(null as DATETIME2(6)) as compile_started_at\n    , cast(null as DATETIME2(6)) as query_completed_at\n    , cast(null as FLOAT) as total_node_runtime\n    , cast(null as INT) as rows_affected\n    , cast(null as INT) as failures\n    , cast(null as VARCHAR(8000)) as message\n    , cast(null as VARCHAR(8000)) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "relation_name": "\"netsuite\".\"prod_log\".\"test_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.557145Z", "completed_at": "2024-10-21T01:04:34.562365Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:34.562724Z", "completed_at": "2024-10-21T01:04:34.562731Z"}], "thread_id": "Thread-1", "execution_time": 0.0064432621002197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.tests", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith\n    dummy_cte as (\n\n        select 1 as foo\n\n    )\n\nselect\n    cast(null as VARCHAR(8000)) as command_invocation_id\n    , cast(null as VARCHAR(8000)) as node_id\n    , cast(null as DATETIME2(6)) as run_started_at\n    , cast(null as VARCHAR(8000)) as name\n    , cast(null as VARCHAR(8000)) as depends_on_nodes\n    , cast(null as VARCHAR(8000)) as package_name\n    , cast(null as VARCHAR(8000)) as test_path\n    , cast(null as VARCHAR(8000)) as tags\n    , cast(null as VARCHAR(8000)) as all_results\nfrom dummy_cte\nwhere 1 = 0", "relation_name": "\"netsuite\".\"prod_log\".\"tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.564755Z", "completed_at": "2024-10-21T01:04:34.580430Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:34.580800Z", "completed_at": "2024-10-21T01:04:34.580806Z"}], "thread_id": "Thread-1", "execution_time": 0.01697230339050293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.dim_date", "compiled": true, "compiled_code": "\n\n\n\nWITH cte_sequence AS (\n  SELECT \n    DATEADD(DAY,value, CAST('2020-01-01' AS DATE)) AS d\n  FROM GENERATE_SERIES ( \n    0\n    , DATEDIFF(DAY, CAST('2020-01-01' AS DATE)\n    , DATEADD(YEAR, 5\n    , \n    CAST('2024-10-21 03:04:23' AS DATE)\n))\n    , 1\n    ) AS gs\n),\n\ncte_core_definition AS (\n  SELECT\n    date_standard                        = CONVERT(DATE,d)\n    , date_int                           = FORMAT(CONVERT(DATE,d), 'yyyyMMdd')\n    , day_of_month_number                = DATEPART(DAY,d)\n    , day_of_week_number                 = DATEPART(WEEKDAY,d)\n    , first_date_of_month                = DATEFROMPARTS(YEAR(d),MONTH(d),1)\n    , last_date_of_month                 = DATEFROMPARTS(YEAR(d),MONTH(d),DAY(EOMONTH(d)))\n    , is_current_day                     = IIF(CONVERT(DATE,d) =  \n    CAST('2024-10-21 03:04:23' AS DATE)\n, 1, 0)\n    , is_above_current_day               = IIF(CONVERT(DATE,d) >  \n    CAST('2024-10-21 03:04:23' AS DATE)\n, 1, 0)\n    , is_above_or_at_current_day         = IIF(CONVERT(DATE,d) >= \n    CAST('2024-10-21 03:04:23' AS DATE)\n, 1, 0)\n    , calendar_year_number               = DATEPART(YEAR,d)\n    , calendar_first_day_of_year         = DATEFROMPARTS(YEAR(d),1,1)\n    , calendar_last_day_of_year          = DATEFROMPARTS(YEAR(d),12,31)\n    , calendar_month_of_year_number      = DATEPART(MONTH,d)\n    , fiscal_year_number                 = CASE WHEN DATEPART(MONTH,d) >= 2 THEN DATEPART(YEAR,d) ELSE DATEPART(YEAR,d) - 1 END\n    , fiscal_first_day_of_year           = DATEFROMPARTS(CASE WHEN DATEPART(MONTH,d) >= 2 THEN DATEPART(YEAR,d) ELSE DATEPART(YEAR,d) - 1 END, 2, 1)\n    , fiscal_last_day_of_year            = DATEADD(DAY, -1, DATEFROMPARTS(CASE WHEN DATEPART(MONTH,d) >= 2 THEN DATEPART(YEAR,d) + 1 ELSE DATEPART(YEAR,d) END, 2, 1))\n    , fiscal_month_of_year_number        = (DATEPART(MONTH,d) + 12 - 2) % 12 + 1\n  FROM cte_sequence\n),\n\ncte_date_dimension AS (\n  SELECT\n    date_standard AS pk_date_standard\n    , date_int     \n    , day_of_month_number   \n    , day_of_week_number   \n    , first_date_of_month  \n    , last_date_of_month       \n    , is_current_day      \n    , is_above_current_day\n    , is_above_or_at_current_day\n    , calendar_year_number    \n    , calendar_first_day_of_year        \n    , calendar_last_day_of_year      \n    , calendar_month_of_year_number   \n    , fiscal_year_number\n    , fiscal_first_day_of_year\n    , fiscal_last_day_of_year\n    , fiscal_month_of_year_number\n    , is_prev_2y_fiscal_year          = IIF(CASE WHEN\n  MONTH(\n    CAST('2024-10-21 03:04:23' AS DATE)\n) >= 2 THEN YEAR(\n    CAST('2024-10-21 03:04:23' AS DATE)\n)\n  ELSE YEAR(\n    CAST('2024-10-21 03:04:23' AS DATE)\n) - 1 \nEND -2 = fiscal_year_number,1,0)\n    , is_prev_1y_fiscal_year          = IIF(CASE WHEN\n  MONTH(\n    CAST('2024-10-21 03:04:23' AS DATE)\n) >= 2 THEN YEAR(\n    CAST('2024-10-21 03:04:23' AS DATE)\n)\n  ELSE YEAR(\n    CAST('2024-10-21 03:04:23' AS DATE)\n) - 1 \nEND -1 = fiscal_year_number,1,0)\n    , is_current_fiscal_year          = IIF(CASE WHEN\n  MONTH(\n    CAST('2024-10-21 03:04:23' AS DATE)\n) >= 2 THEN YEAR(\n    CAST('2024-10-21 03:04:23' AS DATE)\n)\n  ELSE YEAR(\n    CAST('2024-10-21 03:04:23' AS DATE)\n) - 1 \nEND    = fiscal_year_number,1,0)\n    , is_next_1y_fiscal_year          = IIF(CASE WHEN\n  MONTH(\n    CAST('2024-10-21 03:04:23' AS DATE)\n) >= 2 THEN YEAR(\n    CAST('2024-10-21 03:04:23' AS DATE)\n)\n  ELSE YEAR(\n    CAST('2024-10-21 03:04:23' AS DATE)\n) - 1 \nEND +1 = fiscal_year_number,1,0)\n  FROM cte_core_definition\n)\n\nSELECT * FROM cte_date_dimension", "relation_name": "\"netsuite\".\"prod_bus\".\"dim_date\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:34.582637Z", "completed_at": "2024-10-21T01:04:36.428630Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.429008Z", "completed_at": "2024-10-21T01:04:36.429021Z"}], "thread_id": "Thread-1", "execution_time": 1.8476686477661133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.netsuite_project.netsuite_project-on-run-end-0", "compiled": true, "compiled_code": "\n\n        \n        \n            \n            \n        \n\n        \n        \n\n            \n\n            \n            \n\n            \n            \n                \n            \n\n            \n            \n\n        \n        \n\n            \n\n            \n            \n\n            \n            \n                \n            \n\n            \n            \n\n        \n        \n\n            \n\n            \n            \n\n            \n            \n                \n            \n\n            \n            \n\n        \n        \n\n            \n\n            \n            \n\n            \n            \n                \n            \n\n            \n            \n\n        \n        \n\n            \n\n            \n            \n\n            \n            \n                \n            \n\n            \n            \n                \n\n                \n                \n\n    \n\n            \n            \n\n        \n        \n\n            \n\n            \n            \n\n            \n            \n                \n            \n\n            \n            \n                \n\n                \n                \n\n    \n\n            \n            \n\n        \n        \n\n            \n\n            \n            \n\n            \n            \n                \n            \n\n            \n            \n                \n\n                \n                \n\n    \n\n            \n            \n\n        \n        \n\n            \n\n            \n            \n\n            \n            \n                \n            \n\n            \n            \n                \n\n                \n                \n\n    \n\n            \n            \n\n        \n        \n\n            \n\n            \n            \n\n            \n            \n                \n            \n\n            \n            \n\n        \n        \n\n            \n\n            \n            \n\n            \n            \n                \n            \n\n            \n            \n                \n\n                \n                \n\n    \n\n            \n            \n\n        \n        \n\n            \n\n            \n            \n\n            \n            \n                \n            \n\n            \n            \n                \n\n                \n                \n\n    \n\n            \n            \n\n        \n        \n\n    ", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.431433Z", "completed_at": "2024-10-21T01:04:36.434141Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.434511Z", "completed_at": "2024-10-21T01:04:36.434517Z"}], "thread_id": "Thread-1", "execution_time": 0.004019498825073242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_project.customer", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.436498Z", "completed_at": "2024-10-21T01:04:36.438683Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.439041Z", "completed_at": "2024-10-21T01:04:36.439047Z"}], "thread_id": "Thread-1", "execution_time": 0.0033762454986572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_project.deleted_records", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.440869Z", "completed_at": "2024-10-21T01:04:36.443046Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.443465Z", "completed_at": "2024-10-21T01:04:36.443472Z"}], "thread_id": "Thread-1", "execution_time": 0.0034368038177490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_project.fx_avg_rate", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.445415Z", "completed_at": "2024-10-21T01:04:36.448550Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.448924Z", "completed_at": "2024-10-21T01:04:36.448930Z"}], "thread_id": "Thread-1", "execution_time": 0.0044879913330078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_project.item", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.450838Z", "completed_at": "2024-10-21T01:04:36.452930Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.453294Z", "completed_at": "2024-10-21T01:04:36.453300Z"}], "thread_id": "Thread-1", "execution_time": 0.0033750534057617188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_project.item_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.455222Z", "completed_at": "2024-10-21T01:04:36.457303Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.457665Z", "completed_at": "2024-10-21T01:04:36.457672Z"}], "thread_id": "Thread-1", "execution_time": 0.003352642059326172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_project.item_pattern", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.459540Z", "completed_at": "2024-10-21T01:04:36.461668Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.462104Z", "completed_at": "2024-10-21T01:04:36.462111Z"}], "thread_id": "Thread-1", "execution_time": 0.003442525863647461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_project.sales_budget", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.463943Z", "completed_at": "2024-10-21T01:04:36.466033Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.466383Z", "completed_at": "2024-10-21T01:04:36.466390Z"}], "thread_id": "Thread-1", "execution_time": 0.003297567367553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_project.subsidiary", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.468281Z", "completed_at": "2024-10-21T01:04:36.470358Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.470711Z", "completed_at": "2024-10-21T01:04:36.470717Z"}], "thread_id": "Thread-1", "execution_time": 0.0033490657806396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_project.transaction", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.472602Z", "completed_at": "2024-10-21T01:04:36.476091Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.476458Z", "completed_at": "2024-10-21T01:04:36.476465Z"}], "thread_id": "Thread-1", "execution_time": 0.004695892333984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_project.transactionline", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.478411Z", "completed_at": "2024-10-21T01:04:36.480590Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.480949Z", "completed_at": "2024-10-21T01:04:36.480956Z"}], "thread_id": "Thread-1", "execution_time": 0.0034914016723632812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.netsuite_project.user_rls", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.482842Z", "completed_at": "2024-10-21T01:04:36.487444Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.487838Z", "completed_at": "2024-10-21T01:04:36.487845Z"}], "thread_id": "Thread-1", "execution_time": 0.005898475646972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__exposures", "compiled": true, "compiled_code": "with\n    base as (\n\n        select *\n        from \"netsuite\".\"prod_log\".\"exposures\"\n\n    )\n\n    , enhanced as (\n\n        select\n            \n\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(command_invocation_id as VARCHAR(8000)), ''), '-', coalesce(cast(node_id as VARCHAR(8000)), ''))\n    ), '')), 2))\n as exposure_execution_id\n            , command_invocation_id\n            , node_id\n            , run_started_at\n            , name\n            , type\n            , owner\n            , maturity\n            , path\n            , description\n            , url\n            , package_name\n            , depends_on_nodes\n            , tags\n        from base\n\n    )\n\nselect * from enhanced", "relation_name": "\"netsuite\".\"prod_log\".\"stg_dbt__exposures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.489839Z", "completed_at": "2024-10-21T01:04:36.493255Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.493611Z", "completed_at": "2024-10-21T01:04:36.493617Z"}], "thread_id": "Thread-1", "execution_time": 0.004708051681518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__invocations", "compiled": true, "compiled_code": "with\n    base as (\n\n        select *\n        from \"netsuite\".\"prod_log\".\"invocations\"\n\n    )\n\n    , enhanced as (\n\n        select\n            command_invocation_id\n            , dbt_version\n            , project_name\n            , run_started_at\n            , dbt_command\n            , full_refresh_flag\n            , target_profile_name\n            , target_name\n            , target_schema\n            , target_threads\n            , dbt_cloud_project_id\n            , dbt_cloud_job_id\n            , dbt_cloud_run_id\n            , dbt_cloud_run_reason_category\n            , dbt_cloud_run_reason\n            , env_vars\n            , dbt_vars\n            , invocation_args\n            , dbt_custom_envs\n        from base\n\n    )\n\nselect * from enhanced", "relation_name": "\"netsuite\".\"prod_log\".\"stg_dbt__invocations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.495546Z", "completed_at": "2024-10-21T01:04:36.502234Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.502596Z", "completed_at": "2024-10-21T01:04:36.502602Z"}], "thread_id": "Thread-1", "execution_time": 0.007903575897216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__model_executions", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"model_executions\"),\n    enhanced as (\n\n        select\n            \n\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(command_invocation_id as VARCHAR(8000)), ''), '-', coalesce(cast(node_id as VARCHAR(8000)), ''))\n    ), '')), 2))\n\n            as model_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            was_full_refresh,\n            \n    \n        LTRIM(CAST(('<X>'+REPLACE(thread_id,'-' ,'</X><X>')+'</X>') AS XML).value('(/X)[2]', 'VARCHAR(128)'))\n    \n as thread_id,\n            status,\n            compile_started_at,\n            query_completed_at,\n            total_node_runtime,\n            rows_affected\n            ,\n            materialization,\n             \"schema\"\n            ,  -- noqa\n            name,\n            alias,\n            message,\n            adapter_response\n        from base\n\n    )\n\nselect *\nfrom enhanced", "relation_name": "\"netsuite\".\"prod_log\".\"stg_dbt__model_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.504541Z", "completed_at": "2024-10-21T01:04:36.509704Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.510065Z", "completed_at": "2024-10-21T01:04:36.510072Z"}], "thread_id": "Thread-1", "execution_time": 0.006361484527587891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__models", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"models\"),\n    enhanced as (\n\n        select\n            \n\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(command_invocation_id as VARCHAR(8000)), ''), '-', coalesce(cast(node_id as VARCHAR(8000)), ''))\n    ), '')), 2))\n\n            as model_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n             \"database\"\n            ,\n             \"schema\"\n            ,  -- noqa\n            name,\n            depends_on_nodes,\n            package_name,\n            path,\n            checksum,\n            materialization,\n            tags,\n            meta,\n            alias\n        from base\n\n    )\n\nselect *\nfrom enhanced", "relation_name": "\"netsuite\".\"prod_log\".\"stg_dbt__models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.512078Z", "completed_at": "2024-10-21T01:04:36.517313Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.517674Z", "completed_at": "2024-10-21T01:04:36.517681Z"}], "thread_id": "Thread-1", "execution_time": 0.006584644317626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__seed_executions", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"seed_executions\"),\n    enhanced as (\n\n        select\n            \n\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(command_invocation_id as VARCHAR(8000)), ''), '-', coalesce(cast(node_id as VARCHAR(8000)), ''))\n    ), '')), 2))\n\n            as seed_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            was_full_refresh,\n            \n    \n        LTRIM(CAST(('<X>'+REPLACE(thread_id,'-' ,'</X><X>')+'</X>') AS XML).value('(/X)[2]', 'VARCHAR(128)'))\n    \n as thread_id,\n            status,\n            compile_started_at,\n            query_completed_at,\n            total_node_runtime,\n            rows_affected,\n            materialization,\n             \"schema\"\n            ,  -- noqa\n            name,\n            alias,\n            message,\n            adapter_response\n        from base\n\n    )\n\nselect *\nfrom enhanced", "relation_name": "\"netsuite\".\"prod_log\".\"stg_dbt__seed_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.519690Z", "completed_at": "2024-10-21T01:04:36.524987Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.525347Z", "completed_at": "2024-10-21T01:04:36.525353Z"}], "thread_id": "Thread-1", "execution_time": 0.006613016128540039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__seeds", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"seeds\"),\n    enhanced as (\n\n        select\n            \n\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(command_invocation_id as VARCHAR(8000)), ''), '-', coalesce(cast(node_id as VARCHAR(8000)), ''))\n    ), '')), 2))\n\n            as seed_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n             \"database\"\n            ,\n             \"schema\"\n            ,\n            name,\n            package_name,\n            path,\n            checksum,\n            meta,\n            alias\n        from base\n\n    )\n\nselect *\nfrom enhanced", "relation_name": "\"netsuite\".\"prod_log\".\"stg_dbt__seeds\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.527280Z", "completed_at": "2024-10-21T01:04:36.532459Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.532821Z", "completed_at": "2024-10-21T01:04:36.532828Z"}], "thread_id": "Thread-1", "execution_time": 0.006387948989868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__snapshot_executions", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"snapshot_executions\"),\n    enhanced as (\n\n        select\n            \n\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(command_invocation_id as VARCHAR(8000)), ''), '-', coalesce(cast(node_id as VARCHAR(8000)), ''))\n    ), '')), 2))\n\n            as snapshot_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            was_full_refresh,\n            \n    \n        LTRIM(CAST(('<X>'+REPLACE(thread_id,'-' ,'</X><X>')+'</X>') AS XML).value('(/X)[2]', 'VARCHAR(128)'))\n    \n as thread_id,\n            status,\n            compile_started_at,\n            query_completed_at,\n            total_node_runtime,\n            rows_affected,\n            materialization,\n             \"schema\"\n            ,  -- noqa\n            name,\n            alias,\n            message,\n            adapter_response\n        from base\n\n    )\n\nselect *\nfrom enhanced", "relation_name": "\"netsuite\".\"prod_log\".\"stg_dbt__snapshot_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.534781Z", "completed_at": "2024-10-21T01:04:36.541285Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.541645Z", "completed_at": "2024-10-21T01:04:36.541652Z"}], "thread_id": "Thread-1", "execution_time": 0.007807016372680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__snapshots", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"snapshots\"),\n\n    enhanced as (\n\n        select\n            \n\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(command_invocation_id as VARCHAR(8000)), ''), '-', coalesce(cast(node_id as VARCHAR(8000)), ''))\n    ), '')), 2))\n\n            as snapshot_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n             \"database\"\n            ,\n             \"schema\"\n            ,\n            name,\n            depends_on_nodes,\n            package_name,\n            path,\n            checksum,\n            strategy,\n            meta,\n            alias\n        from base\n\n    )\n\nselect *\nfrom enhanced", "relation_name": "\"netsuite\".\"prod_log\".\"stg_dbt__snapshots\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.543632Z", "completed_at": "2024-10-21T01:04:36.548892Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.549251Z", "completed_at": "2024-10-21T01:04:36.549257Z"}], "thread_id": "Thread-1", "execution_time": 0.006554603576660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__sources", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"sources\"),\n    enhanced as (\n\n        select\n            \n\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(command_invocation_id as VARCHAR(8000)), ''), '-', coalesce(cast(node_id as VARCHAR(8000)), ''))\n    ), '')), 2))\n\n            as source_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n             \"database\"\n            ,\n             \"schema\"\n            ,\n            source_name,\n            loader,\n            name,\n            identifier,\n            loaded_at_field,\n            freshness\n        from base\n\n    )\n\nselect *\nfrom enhanced", "relation_name": "\"netsuite\".\"prod_log\".\"stg_dbt__sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.551145Z", "completed_at": "2024-10-21T01:04:36.555893Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.556261Z", "completed_at": "2024-10-21T01:04:36.556267Z"}], "thread_id": "Thread-1", "execution_time": 0.005990743637084961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__test_executions", "compiled": true, "compiled_code": "with\n    base as (\n\n        select *\n        from \"netsuite\".\"prod_log\".\"test_executions\"\n\n    )\n\n    , enhanced as (\n\n        select\n            \n\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(command_invocation_id as VARCHAR(8000)), ''), '-', coalesce(cast(node_id as VARCHAR(8000)), ''))\n    ), '')), 2))\n as test_execution_id\n            , command_invocation_id\n            , node_id\n            , run_started_at\n            , was_full_refresh\n            , \n    \n        LTRIM(CAST(('<X>'+REPLACE(thread_id,'-' ,'</X><X>')+'</X>') AS XML).value('(/X)[2]', 'VARCHAR(128)'))\n    \n as thread_id\n            , status\n            , compile_started_at\n            , query_completed_at\n            , total_node_runtime\n            , rows_affected\n            , failures\n            , message\n        from base\n\n    )\n\nselect * from enhanced", "relation_name": "\"netsuite\".\"prod_log\".\"stg_dbt__test_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.558232Z", "completed_at": "2024-10-21T01:04:36.562598Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.562958Z", "completed_at": "2024-10-21T01:04:36.562964Z"}], "thread_id": "Thread-1", "execution_time": 0.00568699836730957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.stg_dbt__tests", "compiled": true, "compiled_code": "with\n    base as (\n\n        select *\n        from \"netsuite\".\"prod_log\".\"tests\"\n\n    )\n\n    , enhanced as (\n\n        select\n            \n\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(command_invocation_id as VARCHAR(8000)), ''), '-', coalesce(cast(node_id as VARCHAR(8000)), ''))\n    ), '')), 2))\n as test_execution_id\n            , command_invocation_id\n            , node_id\n            , run_started_at\n            , name\n            , depends_on_nodes\n            , package_name\n            , test_path\n            , tags\n        from base\n\n    )\n\nselect * from enhanced", "relation_name": "\"netsuite\".\"prod_log\".\"stg_dbt__tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.564918Z", "completed_at": "2024-10-21T01:04:36.568435Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:36.568810Z", "completed_at": "2024-10-21T01:04:36.568816Z"}], "thread_id": "Thread-1", "execution_time": 0.004813194274902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.netsuite_project.historized_customer", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n  cu.customer_nsid\n  , cu.customer_name\n  , cu.customer_tier\nFROM \"netsuite\".\"prod_stg\".\"customer\" cu\n", "relation_name": "\"netsuite\".\"scd\".\"historized_customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:36.570751Z", "completed_at": "2024-10-21T01:04:37.269995Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.270382Z", "completed_at": "2024-10-21T01:04:37.270394Z"}], "thread_id": "Thread-1", "execution_time": 0.7013401985168457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.prep_fx_avg_rate_unpivot", "compiled": true, "compiled_code": "\n\nWITH fx_avg_unpivot AS \n(\n    select\n        original_currency,\n        target_currency,\n\n      cast('31/01/2024' as VARCHAR(8000)) as closing_date,\n      cast( \n            [31/01/2024]\n             \n           as float) as fx_rate_original_to_target\n\n    from \"netsuite\".\"prod_stg\".\"fx_avg_rate\"\n\n    union all\n    select\n        original_currency,\n        target_currency,\n\n      cast('29/02/2024' as VARCHAR(8000)) as closing_date,\n      cast( \n            [29/02/2024]\n             \n           as float) as fx_rate_original_to_target\n\n    from \"netsuite\".\"prod_stg\".\"fx_avg_rate\"\n\n    union all\n    select\n        original_currency,\n        target_currency,\n\n      cast('31/03/2024' as VARCHAR(8000)) as closing_date,\n      cast( \n            [31/03/2024]\n             \n           as float) as fx_rate_original_to_target\n\n    from \"netsuite\".\"prod_stg\".\"fx_avg_rate\"\n\n    \n)\n\nSELECT \n        original_currency\n        , target_currency\n        , closing_date\n        , fx_rate_original_to_target\nFROM fx_avg_unpivot\nWHERE target_currency = 'USD'\n\nUNION ALL\n\nSELECT \n        'USD'               AS original_currency\n        , 'USD'             AS target_currency\n        , closing_date\n        , 1                 AS fx_rate_original_to_target\nFROM fx_avg_unpivot\nGROUP BY closing_date", "relation_name": "\"netsuite\".\"prod_prp\".\"prep_fx_avg_rate_unpivot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.273308Z", "completed_at": "2024-10-21T01:04:37.277256Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.277675Z", "completed_at": "2024-10-21T01:04:37.277682Z"}], "thread_id": "Thread-1", "execution_time": 0.005349874496459961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.netsuite_project.historized_item", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n  it.item_nsid\n  , it.item_name\n  , it.item_code\n  , it.item_type\n  , it.project_code\n  , it.item_category_nsid\n  , it.item_pattern_nsid\nFROM \"netsuite\".\"prod_stg\".\"item\" it\n", "relation_name": "\"netsuite\".\"scd\".\"historized_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.279623Z", "completed_at": "2024-10-21T01:04:37.283175Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.283576Z", "completed_at": "2024-10-21T01:04:37.283582Z"}], "thread_id": "Thread-1", "execution_time": 0.004858493804931641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.netsuite_project.historized_item_category", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n  item_category_nsid\n  , item_category\n  , item_sub_category\nFROM \"netsuite\".\"prod_stg\".\"item_category\"\n", "relation_name": "\"netsuite\".\"scd\".\"historized_item_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.285421Z", "completed_at": "2024-10-21T01:04:37.290133Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.290511Z", "completed_at": "2024-10-21T01:04:37.290517Z"}], "thread_id": "Thread-1", "execution_time": 0.0059278011322021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.netsuite_project.historized_item_pattern", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n  item_pattern_nsid\n  , item_pattern\nFROM \"netsuite\".\"prod_stg\".\"item_pattern\" it\n", "relation_name": "\"netsuite\".\"scd\".\"historized_item_pattern\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.292499Z", "completed_at": "2024-10-21T01:04:37.350158Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.350681Z", "completed_at": "2024-10-21T01:04:37.350690Z"}], "thread_id": "Thread-1", "execution_time": 0.059151411056518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.netsuite_project.historized_bu", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n  bu.bu_nsid\n  , bu.bu_code\n  , bu.bu_country_code\n  , bu.bu_currency\n  , bu.bu_legal_name\n  , bu.bu_commercial_group\nFROM \"netsuite\".\"prod_stg\".\"subsidiary\" bu\n", "relation_name": "\"netsuite\".\"scd\".\"historized_bu\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.352957Z", "completed_at": "2024-10-21T01:04:37.356942Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.357316Z", "completed_at": "2024-10-21T01:04:37.357322Z"}], "thread_id": "Thread-1", "execution_time": 0.005451679229736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.prep_delta_records", "compiled": true, "compiled_code": "\n\nSELECT transaction_nsid, MAX ( transaction_line_last_modified_date ) AS transaction_global_last_modified_date\nFROM \n( \n    SELECT transaction_nsid, transaction_line_last_modified_date FROM \"netsuite\".\"prod_stg\".\"transactionline\"\n    UNION ALL\n    SELECT transaction_nsid, transaction_last_modified_date      FROM \"netsuite\".\"prod_stg\".\"transaction\"\n) all_updates\nGROUP BY transaction_nsid", "relation_name": "\"netsuite\".\"prod_prp\".\"prep_delta_records\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.359241Z", "completed_at": "2024-10-21T01:04:37.368187Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.368553Z", "completed_at": "2024-10-21T01:04:37.368559Z"}], "thread_id": "Thread-1", "execution_time": 0.010235071182250977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.prep_transaction_with_lines", "compiled": true, "compiled_code": "\n\nSELECT \n    t.transaction_nsid                                                                              AS transaction_nsid\n    , tl.transaction_line_nsid                                                                      AS transaction_line_nsid\n    , t.transaction_last_modified_date\n    , tl.transaction_line_last_modified_date\n    , t.transaction_type\n    , t.transaction_number\n    , t.transaction_status\n    , CAST(t.transaction_date AS DATETIME2)                                                         AS transaction_date\n    , t.expected_delivery_date\n    , tl.foreign_amount\n    , tl.foreign_currency\n    , tl.quantity\n    , tl.bu_rate\n    , tl.foreign_amount * tl.bu_rate                                                                AS bu_amount \n    , \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(tl.item_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '')), '')), 2))\n                                    AS fk_item_nsid\n    , \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(t.bu_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '')), '')), 2))\n                                       AS fk_bu_nsid\n    , \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(t.customer_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '')), '')), 2))\n                                 AS fk_customer_nsid\n    , \n    CAST('2024-10-21 03:04:23' AS DATETIME2)\n                                                              AS dbt_load_datetime\n    , '53e05169-1fa7-4df0-885e-b9520b94db7b'                                                                     AS dbt_run_id\n\nFROM \"netsuite\".\"prod_stg\".\"transaction\" t\n    LEFT OUTER JOIN \"netsuite\".\"prod_stg\".\"transactionline\" tl\n    ON t.transaction_nsid = tl.transaction_nsid", "relation_name": "\"netsuite\".\"prod_prp\".\"prep_transaction_with_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.370550Z", "completed_at": "2024-10-21T01:04:37.374005Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.374385Z", "completed_at": "2024-10-21T01:04:37.374392Z"}], "thread_id": "Thread-1", "execution_time": 0.004789829254150391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.netsuite_project.historized_user_rls", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n  user_email\n  , authorized_bu_code\n  , authorized_customer_name\n  , authorized_item_type\nFROM \"netsuite\".\"prod_stg\".\"user_rls\"\n", "relation_name": "\"netsuite\".\"scd\".\"historized_user_rls\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.376401Z", "completed_at": "2024-10-21T01:04:37.379831Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.380192Z", "completed_at": "2024-10-21T01:04:37.380198Z"}], "thread_id": "Thread-1", "execution_time": 0.0046727657318115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "compiled": true, "compiled_code": "with\n    base as (\n\n        select *\n        from \"netsuite\".\"prod_log\".\"stg_dbt__exposures\"\n\n    )\n\n    , exposures as (\n\n        select\n            exposure_execution_id\n            , command_invocation_id\n            , node_id\n            , run_started_at\n            , name\n            , type\n            , owner\n            , maturity\n            , path\n            , description\n            , url\n            , package_name\n            , depends_on_nodes\n            , tags\n        from base\n\n    )\n\nselect * from exposures", "relation_name": "\"netsuite\".\"prod_log\".\"dim_dbt__exposures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.382218Z", "completed_at": "2024-10-21T01:04:37.387066Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.387417Z", "completed_at": "2024-10-21T01:04:37.387424Z"}], "thread_id": "Thread-1", "execution_time": 0.006060123443603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__invocations", "compiled": true, "compiled_code": "with\n    base as (\n\n        select *\n        from \"netsuite\".\"prod_log\".\"stg_dbt__invocations\"\n\n    )\n\n    , invocations as (\n\n        select\n            command_invocation_id\n            , dbt_version\n            , project_name\n            , run_started_at\n            , dbt_command\n            , full_refresh_flag\n            , target_profile_name\n            , target_name\n            , target_schema\n            , target_threads\n            , dbt_cloud_project_id\n            , dbt_cloud_job_id\n            , dbt_cloud_run_id\n            , dbt_cloud_run_reason_category\n            , dbt_cloud_run_reason\n            , env_vars\n            , dbt_vars\n            , invocation_args\n            , dbt_custom_envs\n        from base\n\n    )\n\nselect * from invocations", "relation_name": "\"netsuite\".\"prod_log\".\"fct_dbt__invocations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.389283Z", "completed_at": "2024-10-21T01:04:37.393549Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.393911Z", "completed_at": "2024-10-21T01:04:37.393918Z"}], "thread_id": "Thread-1", "execution_time": 0.005450010299682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"stg_dbt__model_executions\"),\n\n    model_executions as (\n\n        select\n            model_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            was_full_refresh,\n            thread_id,\n            status,\n            compile_started_at,\n            query_completed_at,\n            total_node_runtime,\n            rows_affected\n            ,\n            materialization,\n             \"schema\"\n            ,\n            name,\n            alias,\n            message\n        from base\n\n    )\n\nselect *\nfrom model_executions", "relation_name": "\"netsuite\".\"prod_log\".\"fct_dbt__model_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.395775Z", "completed_at": "2024-10-21T01:04:37.404579Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.404937Z", "completed_at": "2024-10-21T01:04:37.404943Z"}], "thread_id": "Thread-1", "execution_time": 0.010040760040283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__current_models", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"stg_dbt__models\"),\n    model_executions as (select * from \"netsuite\".\"prod_log\".\"stg_dbt__model_executions\"),\n    latest_models as (\n\n        /* Retrieves the models present in the most recent run */\n        select * from base where run_started_at = (select max(run_started_at) from base)\n\n    ),\n\n    latest_models_runs as (\n\n        /* Retreives all successful run information for the models present in the most\n        recent run and ranks them based on query completion time */\n        select\n            model_executions.node_id,\n            model_executions.was_full_refresh,\n            model_executions.query_completed_at,\n            model_executions.total_node_runtime,\n            model_executions.rows_affected\n            ,\n            /* Row number by refresh and node ID */\n            row_number() over (\n                partition by latest_models.node_id, model_executions.was_full_refresh\n                order by model_executions.query_completed_at desc  /* most recent ranked first */\n            ) as run_idx,\n            /* Row number by node ID */\n            row_number() over (\n                partition by latest_models.node_id order by model_executions.query_completed_at desc  /* most recent ranked first */\n            ) as run_idx_id_only\n        from model_executions\n        inner join latest_models on model_executions.node_id = latest_models.node_id\n        where model_executions.status = 'success'\n\n    ),\n\n    latest_model_stats as (\n\n        select\n            node_id,\n            max(\n                case\n                    when was_full_refresh  = 1 \n                    then query_completed_at\n                end\n            ) as last_full_refresh_run_completed_at,\n            max(\n                case\n                    when was_full_refresh  = 1 \n                    then total_node_runtime\n                end\n            ) as last_full_refresh_run_total_runtime,\n            max(\n                case\n                    when was_full_refresh  = 1 \n                    then rows_affected\n                end\n            ) as last_full_refresh_run_rows_affected\n            ,\n            max(case when run_idx_id_only = 1 then query_completed_at end) as last_run_completed_at,\n            max(\n                case when run_idx_id_only = 1 then total_node_runtime end\n            ) as last_run_total_runtime,\n            max(case when run_idx_id_only = 1 then rows_affected end) as last_run_rows_affected\n            ,\n            max(\n                case\n                    when not was_full_refresh  = 1 \n                    then query_completed_at\n                end\n            ) as last_incremental_run_completed_at,\n            max(\n                case\n                    when not was_full_refresh  = 1 \n                    then total_node_runtime\n                end\n            ) as last_incremental_run_total_runtime,\n            max(\n                case\n                    when not was_full_refresh  = 1 \n                    then rows_affected\n                end\n            ) as last_incremental_run_rows_affected\n            \n        from latest_models_runs\n        where run_idx = 1\n        group by node_id\n\n    ),\n\n    final as (\n\n        select\n            latest_models.*,\n            latest_model_stats.last_full_refresh_run_completed_at,\n            latest_model_stats.last_full_refresh_run_total_runtime,\n            latest_model_stats.last_full_refresh_run_rows_affected\n            ,\n            latest_model_stats.last_run_completed_at,\n            latest_model_stats.last_run_total_runtime,\n            latest_model_stats.last_run_rows_affected\n            ,\n            latest_model_stats.last_incremental_run_completed_at,\n            latest_model_stats.last_incremental_run_total_runtime,\n            latest_model_stats.last_incremental_run_rows_affected\n            \n        from latest_models\n        left join latest_model_stats on latest_models.node_id = latest_model_stats.node_id\n\n    )\n\nselect *\nfrom final", "relation_name": "\"netsuite\".\"prod_log\".\"dim_dbt__current_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.406749Z", "completed_at": "2024-10-21T01:04:37.411051Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.411408Z", "completed_at": "2024-10-21T01:04:37.411414Z"}], "thread_id": "Thread-1", "execution_time": 0.005563497543334961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__models", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"stg_dbt__models\"),\n\n    models as (\n\n        select\n            model_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            name,\n             \"database\"\n            ,\n             \"schema\"\n            ,\n            depends_on_nodes,\n            package_name,\n            path,\n            checksum,\n            materialization,\n            tags,\n            meta,\n            alias\n        from base\n\n    )\n\nselect *\nfrom models", "relation_name": "\"netsuite\".\"prod_log\".\"dim_dbt__models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.413242Z", "completed_at": "2024-10-21T01:04:37.417203Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.417561Z", "completed_at": "2024-10-21T01:04:37.417568Z"}], "thread_id": "Thread-1", "execution_time": 0.0051364898681640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__seed_executions", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"stg_dbt__seed_executions\"),\n\n    seed_executions as (\n\n        select\n            seed_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            was_full_refresh,\n            thread_id,\n            status,\n            compile_started_at,\n            query_completed_at,\n            total_node_runtime,\n            rows_affected,\n            materialization,\n             \"schema\"\n            ,\n            name,\n            alias,\n            message\n        from base\n\n    )\n\nselect *\nfrom seed_executions", "relation_name": "\"netsuite\".\"prod_log\".\"fct_dbt__seed_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.420910Z", "completed_at": "2024-10-21T01:04:37.425202Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.425560Z", "completed_at": "2024-10-21T01:04:37.425567Z"}], "thread_id": "Thread-1", "execution_time": 0.0070574283599853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__seeds", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"stg_dbt__seeds\"),\n\n    seeds as (\n\n        select\n            seed_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            name,\n             \"database\"\n            ,\n             \"schema\"\n            ,\n            package_name,\n            path,\n            checksum,\n            meta,\n            alias\n        from base\n\n    )\n\nselect *\nfrom seeds", "relation_name": "\"netsuite\".\"prod_log\".\"dim_dbt__seeds\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.427364Z", "completed_at": "2024-10-21T01:04:37.431266Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.431674Z", "completed_at": "2024-10-21T01:04:37.431680Z"}], "thread_id": "Thread-1", "execution_time": 0.00513768196105957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__snapshot_executions", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"stg_dbt__snapshot_executions\"),\n\n    snapshot_executions as (\n\n        select\n            snapshot_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            was_full_refresh,\n            thread_id,\n            status,\n            compile_started_at,\n            query_completed_at,\n            total_node_runtime,\n            rows_affected,\n            materialization,\n             \"schema\"\n            ,\n            name,\n            alias,\n            message\n        from base\n\n    )\n\nselect *\nfrom snapshot_executions", "relation_name": "\"netsuite\".\"prod_log\".\"fct_dbt__snapshot_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.433469Z", "completed_at": "2024-10-21T01:04:37.437938Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.438299Z", "completed_at": "2024-10-21T01:04:37.438306Z"}], "thread_id": "Thread-1", "execution_time": 0.005651712417602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__snapshots", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"stg_dbt__snapshots\"),\n\n    snapshots as (\n\n        select\n            snapshot_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            name,\n             \"database\"\n            ,\n             \"schema\"\n            ,\n            depends_on_nodes,\n            package_name,\n            path,\n            checksum,\n            strategy,\n            meta,\n            alias\n        from base\n\n    )\n\nselect *\nfrom snapshots", "relation_name": "\"netsuite\".\"prod_log\".\"dim_dbt__snapshots\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.440154Z", "completed_at": "2024-10-21T01:04:37.444421Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.444778Z", "completed_at": "2024-10-21T01:04:37.444785Z"}], "thread_id": "Thread-1", "execution_time": 0.005487680435180664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__sources", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"stg_dbt__sources\"),\n\n    sources as (\n\n        select\n            source_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n             \"database\"\n            ,\n             \"schema\"\n            ,\n            source_name,\n            loader,\n            name,\n            identifier,\n            loaded_at_field,\n            freshness\n        from base\n\n    )\n\nselect *\nfrom sources", "relation_name": "\"netsuite\".\"prod_log\".\"dim_dbt__sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.446578Z", "completed_at": "2024-10-21T01:04:37.450057Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.450417Z", "completed_at": "2024-10-21T01:04:37.450424Z"}], "thread_id": "Thread-1", "execution_time": 0.004663944244384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "compiled": true, "compiled_code": "with\n    base as (select * from \"netsuite\".\"prod_log\".\"stg_dbt__test_executions\"),\n\n    test_executions as (\n\n        select\n            test_execution_id,\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            was_full_refresh,\n            thread_id,\n            status,\n            compile_started_at,\n            query_completed_at,\n            total_node_runtime,\n            rows_affected,\n            failures,\n            message\n        from base\n\n    )\n\nselect *\nfrom test_executions", "relation_name": "\"netsuite\".\"prod_log\".\"fct_dbt__test_executions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.452308Z", "completed_at": "2024-10-21T01:04:37.457342Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:37.457694Z", "completed_at": "2024-10-21T01:04:37.457700Z"}], "thread_id": "Thread-1", "execution_time": 0.006290435791015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_artifacts.dim_dbt__tests", "compiled": true, "compiled_code": "with\n    base as (\n\n        select *\n        from \"netsuite\".\"prod_log\".\"stg_dbt__tests\"\n\n    )\n\n    , tests as (\n\n        select\n            test_execution_id\n            , command_invocation_id\n            , node_id\n            , run_started_at\n            , name\n            , depends_on_nodes\n            , package_name\n            , test_path\n            , tags\n        from base\n\n    )\n\nselect * from tests", "relation_name": "\"netsuite\".\"prod_log\".\"dim_dbt__tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:37.459521Z", "completed_at": "2024-10-21T01:04:38.150871Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:38.151238Z", "completed_at": "2024-10-21T01:04:38.151247Z"}], "thread_id": "Thread-1", "execution_time": 0.6933684349060059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.dim_customer", "compiled": true, "compiled_code": "\n\n\n\n    \n\n    \n    \n    \n\n    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n\n    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n\n    SELECT \n        hist.customer_name AS hist_customer_name, hist.customer_tier AS hist_customer_tier\n        , live.customer_name AS live_customer_name, live.customer_tier AS live_customer_tier\n        , \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(hist.customer_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '')), '')), 2))\n AS pk_customer_nsid\n        , hist.customer_nsid, hist.dbt_scd_id, hist.dbt_updated_at, hist.dbt_valid_from, hist.dbt_valid_to\n        , IIF ( ROW_NUMBER() OVER ( PARTITION BY hist.customer_nsid ORDER BY hist.dbt_valid_from ) = 1\n            , CAST('1900-01-01' AS DATETIME2)\n            , hist.dbt_valid_from )                                                             AS scd_valid_from_fill_date\n        , COALESCE(hist.dbt_valid_to, cast('9999-12-31' AS DATETIME2))      AS scd_valid_to_fill_date\n        , ROW_NUMBER() OVER ( PARTITION BY hist.customer_nsid ORDER BY hist.dbt_valid_from ) AS version_number\n    FROM  \n        \"netsuite\".\"scd\".\"historized_customer\" AS hist\n        LEFT OUTER JOIN \n        ( SELECT * FROM \"netsuite\".\"scd\".\"historized_customer\" WHERE dbt_valid_to IS NULL ) live\n            ON live.customer_nsid = hist.customer_nsid\n\n", "relation_name": "\"netsuite\".\"prod_bus\".\"dim_customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:38.153923Z", "completed_at": "2024-10-21T01:04:38.158474Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:38.158828Z", "completed_at": "2024-10-21T01:04:38.158834Z"}], "thread_id": "Thread-1", "execution_time": 0.005742311477661133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.fact_fx_avg_rate_dated", "compiled": true, "compiled_code": "\n\nSELECT\n    t1.original_currency\n    , t1.closing_date\n    , t1.fx_rate_original_to_target                                 AS fx_rate_original_to_usd\n    , t1.fx_rate_original_to_target / t2.fx_rate_original_to_target AS fx_rate_original_to_dynamic\n    , 'EUR'                       AS dynamic_target_currency\nFROM\n    \"netsuite\".\"prod_prp\".\"prep_fx_avg_rate_unpivot\" t1\nLEFT OUTER JOIN \n    (SELECT fx_rate_original_to_target, closing_date FROM \"netsuite\".\"prod_prp\".\"prep_fx_avg_rate_unpivot\" WHERE original_currency = 'EUR' ) t2 ON t1.closing_date = t2.closing_date", "relation_name": "\"netsuite\".\"prod_bus\".\"fact_fx_avg_rate_dated\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:38.160718Z", "completed_at": "2024-10-21T01:04:38.164778Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:38.165129Z", "completed_at": "2024-10-21T01:04:38.165135Z"}], "thread_id": "Thread-1", "execution_time": 0.005266666412353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.fact_fx_avg_rate_latest", "compiled": true, "compiled_code": "\n\nWITH flag_latest_rate AS \n(\n    SELECT \n        *     \n        , ROW_NUMBER () OVER (PARTITION BY original_currency ORDER BY closing_date DESC) AS row_id\n    FROM \"netsuite\".\"prod_prp\".\"prep_fx_avg_rate_unpivot\"\n),\n\nfilter_latest_rate AS \n(\n    SELECT\n        *\n    FROM flag_latest_rate \n    WHERE row_id = 1\n)\n\nSELECT\n    t1.original_currency\n    , t1.fx_rate_original_to_target                                 AS fx_rate_original_to_usd\n    , t1.fx_rate_original_to_target / t2.fx_rate_original_to_target AS fx_rate_original_to_dynamic\n    , 'EUR'                       AS dynamic_target_currency\nFROM\n    filter_latest_rate t1\nCROSS JOIN \n    (SELECT fx_rate_original_to_target FROM filter_latest_rate WHERE original_currency = 'EUR' ) t2", "relation_name": "\"netsuite\".\"prod_bus\".\"fact_fx_avg_rate_latest\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:38.168555Z", "completed_at": "2024-10-21T01:04:38.175826Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:38.176189Z", "completed_at": "2024-10-21T01:04:38.176196Z"}], "thread_id": "Thread-1", "execution_time": 0.008472919464111328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.historized_all_item", "compiled": true, "compiled_code": "\n\nWITH historized_item AS (\n  SELECT\n    item_nsid\n    , item_name\n    , item_code\n    , item_type\n    , project_code\n    , item_category_nsid\n    , item_pattern_nsid\n    , dbt_scd_id\n    , dbt_valid_from\n    , COALESCE(dbt_valid_to, CAST('9999-12-31' AS DATETIME2)) AS dbt_valid_to\n  FROM\n    \"netsuite\".\"scd\".\"historized_item\"\n),\n\nhistorized_item_pattern AS (\n  SELECT\n    item_pattern_nsid\n    , item_pattern\n    , dbt_scd_id\n    , dbt_valid_from\n    , COALESCE(dbt_valid_to, CAST('9999-12-31' AS DATETIME2)) AS dbt_valid_to\n  FROM\n    \"netsuite\".\"scd\".\"historized_item_pattern\"\n),\n\nhistorized_item_category AS (\n  SELECT\n    item_category_nsid\n    , item_category\n    , item_sub_category\n    , dbt_scd_id\n    , dbt_valid_from\n    , COALESCE(dbt_valid_to, CAST('9999-12-31' AS DATETIME2)) AS dbt_valid_to\n  FROM\n    \"netsuite\".\"scd\".\"historized_item_category\"\n),\n\n\n\n    trange_unique_left_historized_item_category AS (\n      SELECT DISTINCT\n        item_nsid,\n        item_category_nsid AS __left_join_key\n      FROM\n        historized_item\n    ),\n\n    -- The \"many\" side is exploded so that it ends up as a one-to-one join\n    -- This prevents \"ghost\" rows from resulting from interactions between left records sharing in the join\n    trange_explode_historized_item_category AS (\n      SELECT\n          left_model.item_nsid,\n        right_model.*\n      FROM\n        trange_unique_left_historized_item_category AS left_model\n      INNER JOIN\n        historized_item_category AS right_model\n      ON\n        left_model.__left_join_key = right_model.item_category_nsid\n    ),\n    trange_unique_left_historized_item_pattern AS (\n      SELECT DISTINCT\n        item_nsid,\n        item_pattern_nsid AS __left_join_key\n      FROM\n        historized_item\n    ),\n\n    -- The \"many\" side is exploded so that it ends up as a one-to-one join\n    -- This prevents \"ghost\" rows from resulting from interactions between left records sharing in the join\n    trange_explode_historized_item_pattern AS (\n      SELECT\n          left_model.item_nsid,\n        right_model.*\n      FROM\n        trange_unique_left_historized_item_pattern AS left_model\n      INNER JOIN\n        historized_item_pattern AS right_model\n      ON\n        left_model.__left_join_key = right_model.item_pattern_nsid\n    ),\n\n\n  trange_valid_dates AS (\n    SELECT item_nsid, dbt_valid_from AS valid_at FROM historized_item\n    UNION\n    SELECT item_nsid, dbt_valid_to AS valid_at FROM historized_item\n\n    UNION\n      SELECT item_nsid, dbt_valid_from AS valid_at FROM trange_explode_historized_item_category\n      UNION\n      SELECT item_nsid, dbt_valid_to AS valid_at FROM trange_explode_historized_item_category\n\n      UNION\n      SELECT item_nsid, dbt_valid_from AS valid_at FROM trange_explode_historized_item_pattern\n      UNION\n      SELECT item_nsid, dbt_valid_to AS valid_at FROM trange_explode_historized_item_pattern\n\n      \n  ),\n\n  trange_all_ranges AS (\n    SELECT\n      item_nsid,\n      valid_at AS valid_from_at,\n      LEAD(valid_at, 1) OVER (PARTITION BY item_nsid ORDER BY valid_at) AS valid_to_at\n    FROM\n      trange_valid_dates\n  ),\n\n  trange_joined_ranges AS (\n    SELECT\n      left_model.item_nsid,\n      left_model.dbt_scd_id AS historized_item_scd_id,\n        trange_explode_historized_item_category.dbt_scd_id AS historized_item_category_scd_id,\n        trange_explode_historized_item_pattern.dbt_scd_id AS historized_item_pattern_scd_id,\n\n      trange_all_ranges.valid_from_at,\n      trange_all_ranges.valid_to_at\n    FROM\n      historized_item AS left_model\n    INNER JOIN\n      trange_all_ranges\n    ON\n      left_model.item_nsid = trange_all_ranges.item_nsid\n      AND left_model.dbt_valid_from < trange_all_ranges.valid_to_at AND left_model.dbt_valid_to > trange_all_ranges.valid_from_at\n      LEFT JOIN\n        trange_explode_historized_item_category\n      ON\n        left_model.item_nsid = trange_explode_historized_item_category.item_nsid\n        AND left_model.item_category_nsid = trange_explode_historized_item_category.item_category_nsid\n        AND trange_explode_historized_item_category.dbt_valid_from < trange_all_ranges.valid_to_at AND trange_explode_historized_item_category.dbt_valid_to > trange_all_ranges.valid_from_at\n      LEFT JOIN\n        trange_explode_historized_item_pattern\n      ON\n        left_model.item_nsid = trange_explode_historized_item_pattern.item_nsid\n        AND left_model.item_pattern_nsid = trange_explode_historized_item_pattern.item_pattern_nsid\n        AND trange_explode_historized_item_pattern.dbt_valid_from < trange_all_ranges.valid_to_at AND trange_explode_historized_item_pattern.dbt_valid_to > trange_all_ranges.valid_from_at\n  ),\n\n  trange_final AS (\n    SELECT\n        left_model.item_nsid,\n        left_model.item_name,\n        left_model.item_code,\n        left_model.item_type,\n        left_model.project_code,\n          historized_item_category.item_category,\n          historized_item_category.item_sub_category,\n          historized_item_pattern.item_pattern,\n\n      trange_joined_ranges.historized_item_scd_id,\n        historized_item_category.dbt_scd_id AS historized_item_category_scd_id,\n        historized_item_pattern.dbt_scd_id AS historized_item_pattern_scd_id,\n\n      \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(left_model.item_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(trange_joined_ranges.valid_from_at as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'))\n    ), '')), 2))\n AS surrogate_key,\n      trange_joined_ranges.valid_from_at,\n      trange_joined_ranges.valid_to_at\n    FROM\n      trange_joined_ranges\n    LEFT JOIN\n      historized_item AS left_model\n    ON\n      trange_joined_ranges.historized_item_scd_id = left_model.dbt_scd_id\n      LEFT JOIN\n        historized_item_category\n      ON\n        trange_joined_ranges.historized_item_category_scd_id = historized_item_category.dbt_scd_id\n      LEFT JOIN\n        historized_item_pattern\n      ON\n        trange_joined_ranges.historized_item_pattern_scd_id = historized_item_pattern.dbt_scd_id\n  )\n\n\n\n-- Conform to the dbt snapshot regular schema:\nSELECT \n  item_nsid\n  , item_name\n  , item_code\n  , item_type\n  , project_code\n  , item_category\n  , item_sub_category\n  , item_pattern\n  , surrogate_key AS dbt_scd_id\n  , NULL AS dbt_updated_at\n  , valid_from_at AS dbt_valid_from\n  , IIF(valid_to_at = CAST('9999-12-31' AS DATETIME2), NULL, valid_to_at) AS dbt_valid_to\nFROM trange_final", "relation_name": "\"netsuite\".\"prod_scd\".\"historized_all_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:38.178213Z", "completed_at": "2024-10-21T01:04:38.866265Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:38.866637Z", "completed_at": "2024-10-21T01:04:38.866647Z"}], "thread_id": "Thread-1", "execution_time": 0.6901073455810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.dim_bu", "compiled": true, "compiled_code": "\n\n\n\n    \n\n    \n    \n    \n\n    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n\n    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n\n    SELECT \n        hist.bu_code AS hist_bu_code, hist.bu_country_code AS hist_bu_country_code, hist.bu_currency AS hist_bu_currency, hist.bu_legal_name AS hist_bu_legal_name, hist.bu_commercial_group AS hist_bu_commercial_group\n        , live.bu_code AS live_bu_code, live.bu_country_code AS live_bu_country_code, live.bu_currency AS live_bu_currency, live.bu_legal_name AS live_bu_legal_name, live.bu_commercial_group AS live_bu_commercial_group\n        , \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(hist.bu_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '')), '')), 2))\n AS pk_bu_nsid\n        , hist.bu_nsid, hist.dbt_scd_id, hist.dbt_updated_at, hist.dbt_valid_from, hist.dbt_valid_to\n        , IIF ( ROW_NUMBER() OVER ( PARTITION BY hist.bu_nsid ORDER BY hist.dbt_valid_from ) = 1\n            , CAST('1900-01-01' AS DATETIME2)\n            , hist.dbt_valid_from )                                                             AS scd_valid_from_fill_date\n        , COALESCE(hist.dbt_valid_to, cast('9999-12-31' AS DATETIME2))      AS scd_valid_to_fill_date\n        , ROW_NUMBER() OVER ( PARTITION BY hist.bu_nsid ORDER BY hist.dbt_valid_from ) AS version_number\n    FROM  \n        \"netsuite\".\"scd\".\"historized_bu\" AS hist\n        LEFT OUTER JOIN \n        ( SELECT * FROM \"netsuite\".\"scd\".\"historized_bu\" WHERE dbt_valid_to IS NULL ) live\n            ON live.bu_nsid = hist.bu_nsid\n\n", "relation_name": "\"netsuite\".\"prod_bus\".\"dim_bu\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:38.869558Z", "completed_at": "2024-10-21T01:04:38.877783Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:38.878146Z", "completed_at": "2024-10-21T01:04:38.878153Z"}], "thread_id": "Thread-1", "execution_time": 0.009709835052490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.transaction_with_line", "compiled": true, "compiled_code": "\n\nSELECT * FROM \"netsuite\".\"prod_prp\".\"prep_transaction_with_lines\"\n\n\n-- depends_on: \"netsuite\".\"prod_prp\".\"prep_delta_records\"\n\n    WHERE transaction_nsid IN\n    ( \n        SELECT \n            transaction_nsid \n        FROM \"netsuite\".\"prod_prp\".\"prep_delta_records\"  \n        WHERE \n            CAST ( transaction_global_last_modified_date AS DATE ) >=\n                \n                GREATEST (\n                      ( SELECT MAX ( CAST ( incremental_date.transaction_last_modified_date AS DATE ) ) FROM \"netsuite\".\"prod_dwh\".\"transaction_with_line\" as incremental_date )\n                    , ( SELECT MAX ( CAST ( incremental_date.transaction_line_last_modified_date AS DATE ) ) FROM \"netsuite\".\"prod_dwh\".\"transaction_with_line\" as incremental_date )\n                )\n    )           \n", "relation_name": "\"netsuite\".\"prod_dwh\".\"transaction_with_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:38.880253Z", "completed_at": "2024-10-21T01:04:38.885438Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:38.885797Z", "completed_at": "2024-10-21T01:04:38.885804Z"}], "thread_id": "Thread-1", "execution_time": 0.0064525604248046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.prep_rls_normalize", "compiled": true, "compiled_code": "\n\nWITH cte_row_id AS (\nSELECT \n  *\n  , ROW_NUMBER() OVER (PARTITION BY user_email ORDER BY user_email) as row_id\nFROM \"netsuite\".\"scd\".\"historized_user_rls\"\nWHERE dbt_valid_to IS NULL\n) \n\n, cte_authorized_bu_code AS (\nSELECT\n  user_email,\n  row_id,\n  LTRIM(RTRIM(value)) AS authorized_bu_code\nFROM cte_row_id\nCROSS APPLY STRING_SPLIT(authorized_bu_code, ',') AS authorized_bu_code\n)\n\n, cte_authorized_customer_name AS (\nSELECT\n  user_email,\n  row_id,\n  LTRIM(RTRIM(value)) AS authorized_customer_name\nFROM cte_row_id\nCROSS APPLY STRING_SPLIT(authorized_customer_name, ',') AS authorized_customer_name\n)\n\n, cte_authorized_item_type AS (\nSELECT\n  user_email,\n  row_id,\n  LTRIM(RTRIM(value)) AS authorized_item_type\nFROM cte_row_id\nCROSS APPLY STRING_SPLIT(authorized_item_type, ',') AS authorized_item_type\n)\n\nSELECT \n\tbu.user_email\n  , bu.row_id\n\t, bu.authorized_bu_code\n\t, cust.authorized_customer_name\n  , it.authorized_item_type\nFROM cte_authorized_bu_code bu\nINNER JOIN cte_authorized_customer_name cust \n    ON bu.user_email = cust.user_email\n    AND bu.row_id = cust.row_id\nINNER JOIN cte_authorized_item_type it \n    ON bu.user_email = it.user_email\n    AND bu.row_id = it.row_id", "relation_name": "\"netsuite\".\"prod_prp\".\"prep_rls_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:38.887627Z", "completed_at": "2024-10-21T01:04:39.578799Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:39.579182Z", "completed_at": "2024-10-21T01:04:39.579194Z"}], "thread_id": "Thread-1", "execution_time": 0.6932272911071777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.dim_item", "compiled": true, "compiled_code": "\n\n\n\n    \n\n    \n    \n    \n\n    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n\n    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n\n    SELECT \n        hist.item_name AS hist_item_name, hist.item_code AS hist_item_code, hist.item_type AS hist_item_type, hist.project_code AS hist_project_code, hist.item_category AS hist_item_category, hist.item_sub_category AS hist_item_sub_category, hist.item_pattern AS hist_item_pattern\n        , live.item_name AS live_item_name, live.item_code AS live_item_code, live.item_type AS live_item_type, live.project_code AS live_project_code, live.item_category AS live_item_category, live.item_sub_category AS live_item_sub_category, live.item_pattern AS live_item_pattern\n        , \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(hist.item_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '')), '')), 2))\n AS pk_item_nsid\n        , hist.item_nsid, hist.dbt_scd_id, hist.dbt_updated_at, hist.dbt_valid_from, hist.dbt_valid_to\n        , IIF ( ROW_NUMBER() OVER ( PARTITION BY hist.item_nsid ORDER BY hist.dbt_valid_from ) = 1\n            , CAST('1900-01-01' AS DATETIME2)\n            , hist.dbt_valid_from )                                                             AS scd_valid_from_fill_date\n        , COALESCE(hist.dbt_valid_to, cast('9999-12-31' AS DATETIME2))      AS scd_valid_to_fill_date\n        , ROW_NUMBER() OVER ( PARTITION BY hist.item_nsid ORDER BY hist.dbt_valid_from ) AS version_number\n    FROM  \n        \"netsuite\".\"prod_scd\".\"historized_all_item\" AS hist\n        LEFT OUTER JOIN \n        ( SELECT * FROM \"netsuite\".\"prod_scd\".\"historized_all_item\" WHERE dbt_valid_to IS NULL ) live\n            ON live.item_nsid = hist.item_nsid\n\n", "relation_name": "\"netsuite\".\"prod_bus\".\"dim_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:39.581984Z", "completed_at": "2024-10-21T01:04:39.586177Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:39.586536Z", "completed_at": "2024-10-21T01:04:39.586542Z"}], "thread_id": "Thread-1", "execution_time": 0.00550532341003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.prep_dim_bu_alternate_key_bu_code", "compiled": true, "compiled_code": "\n\nWITH dim_business_unit_bu_code_id AS \n(\n    SELECT \n        *\n        , ROW_NUMBER() OVER(PARTITION BY live_bu_code ORDER BY dbt_updated_at DESC) AS bu_code_id_key\n    FROM \"netsuite\".\"prod_bus\".\"dim_bu\"\n)\n\nSELECT * FROM dim_business_unit_bu_code_id WHERE bu_code_id_key = 1", "relation_name": "\"netsuite\".\"prod_prp\".\"prep_dim_bu_alternate_key_bu_code\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:39.588591Z", "completed_at": "2024-10-21T01:04:40.289298Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:40.289672Z", "completed_at": "2024-10-21T01:04:40.289683Z"}], "thread_id": "Thread-1", "execution_time": 0.7028329372406006, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.historized_transaction_with_line", "compiled": true, "compiled_code": "\n\nSELECT\n    \n    \"transaction_nsid\",\n  \"transaction_line_nsid\",\n  \"transaction_last_modified_date\",\n  \"transaction_line_last_modified_date\",\n  \"transaction_type\",\n  \"transaction_number\",\n  \"transaction_status\",\n  \"transaction_date\",\n  \"expected_delivery_date\",\n  \"foreign_amount\",\n  \"foreign_currency\",\n  \"quantity\",\n  \"bu_rate\",\n  \"bu_amount\",\n  \"fk_item_nsid\",\n  \"fk_bu_nsid\",\n  \"fk_customer_nsid\"\n    , \n    EOMONTH('2024-10-21', -1)\n AS dbt_functional_snapshot_date     \n    , \n    CAST('2024-10-21 03:04:23' AS DATETIME2)\n  AS dbt_load_datetime\n    , '53e05169-1fa7-4df0-885e-b9520b94db7b'         AS dbt_run_id         \nFROM \"netsuite\".\"prod_dwh\".\"transaction_with_line\" t\n\n\nWHERE t.transaction_type IN ( 'Opportunity', 'Invoice', 'Sales Order' )\n\n\n    \n    AND \n    EOMONTH('2024-10-21', -1)\n > ( SELECT MAX ( incremental_date.dbt_functional_snapshot_date ) FROM \"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\" as incremental_date )\n", "relation_name": "\"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:40.292687Z", "completed_at": "2024-10-21T01:04:40.298333Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:40.298693Z", "completed_at": "2024-10-21T01:04:40.298700Z"}], "thread_id": "Thread-1", "execution_time": 0.007067441940307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.prep_transaction_with_lines_for_union", "compiled": true, "compiled_code": "\n\nSELECT \n    *\n    , \n    CAST('2024-10-21 03:04:23' AS DATETIME2)\n AS dbt_functional_snapshot_date \n    \nFROM \"netsuite\".\"prod_dwh\".\"transaction_with_line\" t", "relation_name": "\"netsuite\".\"prod_prp\".\"prep_transaction_with_lines_for_union\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:40.300700Z", "completed_at": "2024-10-21T01:04:41.328972Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:41.329350Z", "completed_at": "2024-10-21T01:04:41.329361Z"}], "thread_id": "Thread-1", "execution_time": 1.0302493572235107, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_project.test_incremental_load", "compiled": true, "compiled_code": "\n\n\n\n\n\nWITH cte_incremental_table AS (\nSELECT\n\t\"transaction_nsid\",\n  \"transaction_line_nsid\",\n  \"transaction_last_modified_date\",\n  \"transaction_line_last_modified_date\",\n  \"transaction_type\",\n  \"transaction_number\",\n  \"transaction_status\",\n  \"transaction_date\",\n  \"expected_delivery_date\",\n  \"foreign_amount\",\n  \"foreign_currency\",\n  \"quantity\",\n  \"bu_rate\",\n  \"bu_amount\",\n  \"fk_item_nsid\",\n  \"fk_bu_nsid\",\n  \"fk_customer_nsid\"\n\t, CHECKSUM (\"transaction_nsid\",\n  \"transaction_line_nsid\",\n  \"transaction_last_modified_date\",\n  \"transaction_line_last_modified_date\",\n  \"transaction_type\",\n  \"transaction_number\",\n  \"transaction_status\",\n  \"transaction_date\",\n  \"expected_delivery_date\",\n  \"foreign_amount\",\n  \"foreign_currency\",\n  \"quantity\",\n  \"bu_rate\",\n  \"bu_amount\",\n  \"fk_item_nsid\",\n  \"fk_bu_nsid\",\n  \"fk_customer_nsid\" ) AS checksum_result\nFROM \"netsuite\".\"prod_dwh\".\"transaction_with_line\" )\n\n, cte_current_table AS (\nSELECT\n\t\"transaction_nsid\",\n  \"transaction_line_nsid\",\n  \"transaction_last_modified_date\",\n  \"transaction_line_last_modified_date\",\n  \"transaction_type\",\n  \"transaction_number\",\n  \"transaction_status\",\n  \"transaction_date\",\n  \"expected_delivery_date\",\n  \"foreign_amount\",\n  \"foreign_currency\",\n  \"quantity\",\n  \"bu_rate\",\n  \"bu_amount\",\n  \"fk_item_nsid\",\n  \"fk_bu_nsid\",\n  \"fk_customer_nsid\"\n\t, CHECKSUM (\"transaction_nsid\",\n  \"transaction_line_nsid\",\n  \"transaction_last_modified_date\",\n  \"transaction_line_last_modified_date\",\n  \"transaction_type\",\n  \"transaction_number\",\n  \"transaction_status\",\n  \"transaction_date\",\n  \"expected_delivery_date\",\n  \"foreign_amount\",\n  \"foreign_currency\",\n  \"quantity\",\n  \"bu_rate\",\n  \"bu_amount\",\n  \"fk_item_nsid\",\n  \"fk_bu_nsid\",\n  \"fk_customer_nsid\" ) AS checksum_result\nFROM \"netsuite\".\"prod_prp\".\"prep_transaction_with_lines\" )\n\nSELECT \n\tcte_incremental_table.transaction_nsid\t\t\tAS incremental_transaction_nsid\n    , cte_incremental_table.transaction_line_nsid\tAS incremental_transaction_line_nsid\n\t, cte_current_table.transaction_nsid\t\t\tAS current_transaction_nsid\n    , cte_current_table.transaction_line_nsid\t\tAS current_transaction_line_nsid\n\t, CASE \n\t\tWHEN cte_incremental_table.transaction_nsid IS NOT NULL THEN 'Hash present in incremental table exclusively'\n\t\tWHEN cte_current_table.transaction_nsid IS NOT NULL THEN 'Hash present in current table exclusively'\n\tEND \t\t\t\t\t\t\t\t\t\t\tAS control_warning_description\n\t\nFROM cte_incremental_table\nFULL OUTER JOIN cte_current_table\n\tON cte_incremental_table.checksum_result = cte_current_table.checksum_result\nWHERE cte_incremental_table.checksum_result IS NULL\n\tOR cte_current_table.checksum_result IS NULL", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:41.332090Z", "completed_at": "2024-10-21T01:04:41.338153Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:41.338518Z", "completed_at": "2024-10-21T01:04:41.338525Z"}], "thread_id": "Thread-1", "execution_time": 0.007330656051635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_project.unexpected_opportunity_status.a0dda7bad4", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        transaction_status as value_field,\n        count(*) as n_records\n\n    from (select * from \"netsuite\".\"prod_dwh\".\"transaction_with_line\" where transaction_type = 'Opportunity') dbt_subquery\n    group by transaction_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Under Discussion','Ongoing','Closed - Won','Closed - Lost'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:41.340415Z", "completed_at": "2024-10-21T01:04:41.346266Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:41.346629Z", "completed_at": "2024-10-21T01:04:41.346636Z"}], "thread_id": "Thread-1", "execution_time": 0.007058143615722656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_project.unexpected_sales_order_status.5f4b39d9f8", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        transaction_status as value_field,\n        count(*) as n_records\n\n    from (select * from \"netsuite\".\"prod_dwh\".\"transaction_with_line\" where transaction_type = 'Sales Order') dbt_subquery\n    group by transaction_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Under Discussion','Ongoing','Closed - Won','Closed - Lost'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:41.348511Z", "completed_at": "2024-10-21T01:04:42.038517Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:42.038886Z", "completed_at": "2024-10-21T01:04:42.038897Z"}], "thread_id": "Thread-1", "execution_time": 0.6920211315155029, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.prep_budget_for_union", "compiled": true, "compiled_code": "\n\nWITH consolidate_data AS \n\n(\n    SELECT\n        'Budget'                                                                                     AS transaction_type  \n        , budget_year\n        , budget_version\n        \n        , customer_name                                                                              AS live_customer_name\n        , customer_name                                                                              AS hist_customer_name\n        \n        , \"hist_bu_code\",\n  \"hist_bu_country_code\",\n  \"hist_bu_currency\",\n  \"hist_bu_legal_name\",\n  \"hist_bu_commercial_group\",\n  \"live_bu_code\",\n  \"live_bu_country_code\",\n  \"live_bu_currency\",\n  \"live_bu_legal_name\",\n  \"live_bu_commercial_group\",\n  \"pk_bu_nsid\",\n  \"bu_nsid\"\n        , sales_amount_bu_currency                                                                   AS budget_sales_amount_bu_currency\n        , budget_date                                                                                AS calculation_date\n        , COALESCE( fx_dated.fx_rate_original_to_usd, fx_latest.fx_rate_original_to_usd )            AS fx_rate_original_to_usd\n        , COALESCE( fx_dated.fx_rate_original_to_dynamic, fx_latest.fx_rate_original_to_dynamic )    AS fx_rate_original_to_dynamic\n        , 'EUR'                                                    AS dynamic_target_currency\n\n    FROM \"netsuite\".\"prod_stg\".\"sales_budget\" bud\n    LEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"fact_fx_avg_rate_latest\" fx_latest\n        ON bud.bu_currency = fx_latest.original_currency\n    LEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"fact_fx_avg_rate_dated\" fx_dated\n        ON bud.bu_currency = fx_dated.original_currency\n        AND EOMONTH(bud.budget_date) = fx_dated.closing_date\n    LEFT OUTER JOIN \"netsuite\".\"prod_prp\".\"prep_dim_bu_alternate_key_bu_code\" bu\n        ON bu.live_bu_code = bud.bu_code\n)\n\nSELECT\n    *\n    , fx_rate_original_to_usd       * budget_sales_amount_bu_currency AS budget_sales_amount_usd_currency\n    , fx_rate_original_to_dynamic   * budget_sales_amount_bu_currency AS budget_sales_amount_dynamic_currency\nFROM consolidate_data", "relation_name": "\"netsuite\".\"prod_prp\".\"prep_budget_for_union\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:42.041831Z", "completed_at": "2024-10-21T01:04:42.047961Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:42.048371Z", "completed_at": "2024-10-21T01:04:42.048378Z"}], "thread_id": "Thread-1", "execution_time": 0.007643699645996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_project.dbt_utils_unique_combination_of_columns_historized_transaction_with_line_var_dbt_snapshot_col_name___transaction_nsid__transaction_line_nsid.8021ab7f24", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        dbt_functional_snapshot_date, transaction_nsid, transaction_line_nsid\n    from \"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\"\n    group by dbt_functional_snapshot_date, transaction_nsid, transaction_line_nsid\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:42.050222Z", "completed_at": "2024-10-21T01:04:42.059540Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:42.059937Z", "completed_at": "2024-10-21T01:04:42.059944Z"}], "thread_id": "Thread-1", "execution_time": 0.01055598258972168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_project.not_null_historized_transaction_with_line_transaction_line_nsid.c46e56a2e1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_nsid\nfrom \"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\"\nwhere transaction_line_nsid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:42.061773Z", "completed_at": "2024-10-21T01:04:42.066355Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:42.066721Z", "completed_at": "2024-10-21T01:04:42.066728Z"}], "thread_id": "Thread-1", "execution_time": 0.0057849884033203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_project.not_null_historized_transaction_with_line_transaction_nsid.4b11b8bce6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_nsid\nfrom \"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\"\nwhere transaction_nsid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:42.068574Z", "completed_at": "2024-10-21T01:04:43.014844Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:43.015220Z", "completed_at": "2024-10-21T01:04:43.015232Z"}], "thread_id": "Thread-1", "execution_time": 0.9483182430267334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.fact_all_transactions_with_line", "compiled": true, "compiled_code": "\n\nWITH union_current_and_snapshot AS \n(\n    \n\n        (\n            select\n                cast('\"netsuite\".\"prod_prp\".\"prep_transaction_with_lines_for_union\"' as VARCHAR(8000)) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_nsid\" as int) as \"transaction_nsid\" ,\n                    cast(\"transaction_line_nsid\" as int) as \"transaction_line_nsid\" ,\n                    cast(\"transaction_last_modified_date\" as varchar(16)) as \"transaction_last_modified_date\" ,\n                    cast(\"transaction_line_last_modified_date\" as varchar(16)) as \"transaction_line_last_modified_date\" ,\n                    cast(\"transaction_type\" as varchar(16)) as \"transaction_type\" ,\n                    cast(\"transaction_number\" as varchar(16)) as \"transaction_number\" ,\n                    cast(\"transaction_status\" as varchar(16)) as \"transaction_status\" ,\n                    cast(\"transaction_date\" as datetime2) as \"transaction_date\" ,\n                    cast(\"expected_delivery_date\" as varchar(16)) as \"expected_delivery_date\" ,\n                    cast(\"foreign_amount\" as int) as \"foreign_amount\" ,\n                    cast(\"foreign_currency\" as varchar(16)) as \"foreign_currency\" ,\n                    cast(\"quantity\" as int) as \"quantity\" ,\n                    cast(\"bu_rate\" as float) as \"bu_rate\" ,\n                    cast(\"bu_amount\" as float) as \"bu_amount\" ,\n                    cast(\"fk_item_nsid\" as varchar(50)) as \"fk_item_nsid\" ,\n                    cast(\"fk_bu_nsid\" as varchar(50)) as \"fk_bu_nsid\" ,\n                    cast(\"fk_customer_nsid\" as varchar(50)) as \"fk_customer_nsid\" ,\n                    cast(\"dbt_load_datetime\" as datetime2) as \"dbt_load_datetime\" ,\n                    cast(\"dbt_run_id\" as varchar(36)) as \"dbt_run_id\" ,\n                    cast(\"dbt_functional_snapshot_date\" as datetime2) as \"dbt_functional_snapshot_date\" \n\n            from \"netsuite\".\"prod_prp\".\"prep_transaction_with_lines_for_union\"\n\n            where YEAR(transaction_date) >= '2023' AND transaction_type IN ('Opportunity', 'Invoice', 'Sales Order', 'Journal Entry')\n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\"' as VARCHAR(8000)) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_nsid\" as int) as \"transaction_nsid\" ,\n                    cast(\"transaction_line_nsid\" as int) as \"transaction_line_nsid\" ,\n                    cast(\"transaction_last_modified_date\" as varchar(16)) as \"transaction_last_modified_date\" ,\n                    cast(\"transaction_line_last_modified_date\" as varchar(16)) as \"transaction_line_last_modified_date\" ,\n                    cast(\"transaction_type\" as varchar(16)) as \"transaction_type\" ,\n                    cast(\"transaction_number\" as varchar(16)) as \"transaction_number\" ,\n                    cast(\"transaction_status\" as varchar(16)) as \"transaction_status\" ,\n                    cast(\"transaction_date\" as datetime2) as \"transaction_date\" ,\n                    cast(\"expected_delivery_date\" as varchar(16)) as \"expected_delivery_date\" ,\n                    cast(\"foreign_amount\" as int) as \"foreign_amount\" ,\n                    cast(\"foreign_currency\" as varchar(16)) as \"foreign_currency\" ,\n                    cast(\"quantity\" as int) as \"quantity\" ,\n                    cast(\"bu_rate\" as float) as \"bu_rate\" ,\n                    cast(\"bu_amount\" as float) as \"bu_amount\" ,\n                    cast(\"fk_item_nsid\" as varchar(50)) as \"fk_item_nsid\" ,\n                    cast(\"fk_bu_nsid\" as varchar(50)) as \"fk_bu_nsid\" ,\n                    cast(\"fk_customer_nsid\" as varchar(50)) as \"fk_customer_nsid\" ,\n                    cast(\"dbt_load_datetime\" as datetime2) as \"dbt_load_datetime\" ,\n                    cast(\"dbt_run_id\" as varchar(36)) as \"dbt_run_id\" ,\n                    cast(\"dbt_functional_snapshot_date\" as datetime2) as \"dbt_functional_snapshot_date\" \n\n            from \"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\"\n\n            where YEAR(transaction_date) >= '2023' AND transaction_type IN ('Opportunity', 'Invoice', 'Sales Order', 'Journal Entry')\n        )\n\n        \n),\n\ndata_consolidation AS \n(\n    SELECT \n        t.* \n        , DENSE_RANK () OVER ( ORDER BY dbt_functional_snapshot_date DESC )                    AS snapshot_date_order\n        , \"hist_bu_code\",\n  \"hist_bu_country_code\",\n  \"hist_bu_currency\",\n  \"hist_bu_legal_name\",\n  \"hist_bu_commercial_group\",\n  \"live_bu_code\",\n  \"live_bu_country_code\",\n  \"live_bu_currency\",\n  \"live_bu_legal_name\",\n  \"live_bu_commercial_group\",\n  \"pk_bu_nsid\",\n  \"bu_nsid\"\n        , COALESCE( fx_dated.fx_rate_original_to_usd, fx_latest.fx_rate_original_to_usd )            AS fx_rate_original_to_usd\n        , COALESCE( fx_dated.fx_rate_original_to_dynamic, fx_latest.fx_rate_original_to_dynamic )    AS fx_rate_original_to_dynamic\n        , 'EUR'                                                    AS dynamic_target_currency\n    FROM union_current_and_snapshot t\n\n    \n    LEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"dim_bu\" bu\n        ON bu.pk_bu_nsid = t.fk_bu_nsid\n        AND t.transaction_date BETWEEN bu.scd_valid_from_fill_date AND bu.scd_valid_to_fill_date\n\n    \n    LEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"fact_fx_avg_rate_latest\" fx_latest\n        ON bu.hist_bu_currency = fx_latest.original_currency\n    LEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"fact_fx_avg_rate_dated\" fx_dated\n        ON bu.hist_bu_currency = fx_dated.original_currency\n        AND EOMONTH(t.transaction_date) = fx_dated.closing_date\n)\n\nSELECT \n    * \n    , fx_rate_original_to_usd     * bu_amount AS usd_amount\n    , fx_rate_original_to_dynamic * bu_amount AS dynamic_amount\nFROM data_consolidation", "relation_name": "\"netsuite\".\"prod_bus\".\"fact_all_transactions_with_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:43.018316Z", "completed_at": "2024-10-21T01:04:43.023153Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:43.023554Z", "completed_at": "2024-10-21T01:04:43.023562Z"}], "thread_id": "Thread-1", "execution_time": 0.006365299224853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_project.not_null_prep_budget_for_union_live_bu_code.d946ceafd7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect live_bu_code\nfrom \"netsuite\".\"prod_prp\".\"prep_budget_for_union\"\nwhere live_bu_code is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:43.026902Z", "completed_at": "2024-10-21T01:04:43.978435Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:43.978809Z", "completed_at": "2024-10-21T01:04:43.978820Z"}], "thread_id": "Thread-1", "execution_time": 0.955059289932251, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.dataset_sales_pipeline", "compiled": true, "compiled_code": "\n\nWITH cte_scope AS (\nSELECT \n    \"_dbt_source_relation\",\n  \"transaction_nsid\",\n  \"transaction_line_nsid\",\n  \"transaction_last_modified_date\",\n  \"transaction_line_last_modified_date\",\n  \"transaction_type\",\n  \"transaction_number\",\n  \"transaction_status\",\n  \"transaction_date\",\n  \"expected_delivery_date\",\n  \"foreign_amount\",\n  \"foreign_currency\",\n  \"quantity\",\n  \"bu_rate\",\n  \"bu_amount\",\n  \"fk_item_nsid\",\n  \"fk_bu_nsid\",\n  \"fk_customer_nsid\",\n  \"dbt_load_datetime\",\n  \"dbt_run_id\",\n  \"dbt_functional_snapshot_date\",\n  \"snapshot_date_order\",\n  \"hist_bu_code\",\n  \"hist_bu_country_code\",\n  \"hist_bu_currency\",\n  \"hist_bu_legal_name\",\n  \"hist_bu_commercial_group\",\n  \"live_bu_code\",\n  \"live_bu_country_code\",\n  \"live_bu_currency\",\n  \"live_bu_legal_name\",\n  \"live_bu_commercial_group\",\n  \"pk_bu_nsid\",\n  \"bu_nsid\",\n  \"fx_rate_original_to_usd\",\n  \"fx_rate_original_to_dynamic\",\n  \"dynamic_target_currency\",\n  \"usd_amount\",\n  \"dynamic_amount\"\n    , CAST ( CASE WHEN t.transaction_type IN ('Opportunity', 'Sales Order') THEN t.expected_delivery_date ELSE t.transaction_date END AS DATE ) AS calculation_date\nFROM \"netsuite\".\"prod_bus\".\"fact_all_transactions_with_line\" t \n\nWHERE t.transaction_type IN ( 'Opportunity', 'Invoice', 'Sales Order' )\nAND\n    ( \n        ( t.transaction_type NOT IN ('Opportunity', 'Sales Order') )\n        OR \n        ( t.transaction_type = 'Opportunity' AND t.transaction_status IN ( 'Under Discussion', 'Ongoing' ) )\n        OR\n        ( t.transaction_type = 'Sales Order' AND t.transaction_status IN ( 'Under Discussion', 'Ongoing' ) )\n    )\n)\n\n\n, cte_calculate AS (\nSELECT \n    t.*\n    \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1, bu_amount, 0) AS total_bu_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1, bu_amount, 0) AS total_bu_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1, bu_amount, 0) AS total_bu_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1, bu_amount, 0) AS total_bu_amount_next_1y_fiscal_year\n    \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1, usd_amount, 0) AS total_usd_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1, usd_amount, 0) AS total_usd_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1, usd_amount, 0) AS total_usd_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1, usd_amount, 0) AS total_usd_amount_next_1y_fiscal_year\n    \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1, dynamic_amount, 0) AS total_dynamic_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1, dynamic_amount, 0) AS total_dynamic_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1, dynamic_amount, 0) AS total_dynamic_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1, dynamic_amount, 0) AS total_dynamic_amount_next_1y_fiscal_year\n    \n    \n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', bu_amount, 0) AS opportunity_bu_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', bu_amount, 0) AS opportunity_bu_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Opportunity', bu_amount, 0) AS opportunity_bu_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', bu_amount, 0) AS opportunity_bu_amount_next_1y_fiscal_year\n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Invoice', bu_amount, 0) AS invoice_bu_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Invoice', bu_amount, 0) AS invoice_bu_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Invoice', bu_amount, 0) AS invoice_bu_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Invoice', bu_amount, 0) AS invoice_bu_amount_next_1y_fiscal_year\n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', bu_amount, 0) AS sales_order_bu_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', bu_amount, 0) AS sales_order_bu_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Sales Order', bu_amount, 0) AS sales_order_bu_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', bu_amount, 0) AS sales_order_bu_amount_next_1y_fiscal_year\n        \n    \n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', usd_amount, 0) AS opportunity_usd_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', usd_amount, 0) AS opportunity_usd_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Opportunity', usd_amount, 0) AS opportunity_usd_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', usd_amount, 0) AS opportunity_usd_amount_next_1y_fiscal_year\n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Invoice', usd_amount, 0) AS invoice_usd_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Invoice', usd_amount, 0) AS invoice_usd_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Invoice', usd_amount, 0) AS invoice_usd_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Invoice', usd_amount, 0) AS invoice_usd_amount_next_1y_fiscal_year\n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', usd_amount, 0) AS sales_order_usd_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', usd_amount, 0) AS sales_order_usd_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Sales Order', usd_amount, 0) AS sales_order_usd_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', usd_amount, 0) AS sales_order_usd_amount_next_1y_fiscal_year\n        \n    \n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', dynamic_amount, 0) AS opportunity_dynamic_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', dynamic_amount, 0) AS opportunity_dynamic_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Opportunity', dynamic_amount, 0) AS opportunity_dynamic_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', dynamic_amount, 0) AS opportunity_dynamic_amount_next_1y_fiscal_year\n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Invoice', dynamic_amount, 0) AS invoice_dynamic_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Invoice', dynamic_amount, 0) AS invoice_dynamic_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Invoice', dynamic_amount, 0) AS invoice_dynamic_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Invoice', dynamic_amount, 0) AS invoice_dynamic_amount_next_1y_fiscal_year\n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', dynamic_amount, 0) AS sales_order_dynamic_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', dynamic_amount, 0) AS sales_order_dynamic_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Sales Order', dynamic_amount, 0) AS sales_order_dynamic_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', dynamic_amount, 0) AS sales_order_dynamic_amount_next_1y_fiscal_year\n        \n    \nFROM cte_scope t \nLEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"dim_date\" d_calc\n    ON d_calc.pk_date_standard = t.calculation_date \n)\n\nSELECT \n    t.*\n    , \"hist_item_name\",\n  \"hist_item_code\",\n  \"hist_item_type\",\n  \"hist_project_code\",\n  \"hist_item_category\",\n  \"hist_item_sub_category\",\n  \"hist_item_pattern\",\n  \"live_item_name\",\n  \"live_item_code\",\n  \"live_item_type\",\n  \"live_project_code\",\n  \"live_item_category\",\n  \"live_item_sub_category\",\n  \"live_item_pattern\",\n  \"pk_item_nsid\",\n  \"item_nsid\"\n    , \"hist_customer_name\",\n  \"hist_customer_tier\",\n  \"live_customer_name\",\n  \"live_customer_tier\",\n  \"pk_customer_nsid\",\n  \"customer_nsid\"\nFROM cte_calculate t\nLEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"dim_customer\" cu\n    ON cu.pk_customer_nsid = t.fk_customer_nsid\n    AND t.transaction_date BETWEEN cu.scd_valid_from_fill_date AND cu.scd_valid_to_fill_date\nLEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"dim_item\" it\n    ON it.pk_item_nsid = t.fk_item_nsid\n    AND t.transaction_date BETWEEN it.scd_valid_from_fill_date AND it.scd_valid_to_fill_date", "relation_name": "\"netsuite\".\"prod_ds\".\"dataset_sales_pipeline\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:43.981777Z", "completed_at": "2024-10-21T01:04:43.988246Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:43.988618Z", "completed_at": "2024-10-21T01:04:43.988625Z"}], "thread_id": "Thread-1", "execution_time": 0.007875919342041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_project.not_null_fact_all_transactions_with_line_fx_rate_original_to_dynamic.80ae594c95", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fx_rate_original_to_dynamic\nfrom \"netsuite\".\"prod_bus\".\"fact_all_transactions_with_line\"\nwhere fx_rate_original_to_dynamic is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:43.990483Z", "completed_at": "2024-10-21T01:04:43.995312Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:43.995735Z", "completed_at": "2024-10-21T01:04:43.995742Z"}], "thread_id": "Thread-1", "execution_time": 0.00610661506652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.netsuite_project.not_null_fact_all_transactions_with_line_fx_rate_original_to_usd.0896bf129b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fx_rate_original_to_usd\nfrom \"netsuite\".\"prod_bus\".\"fact_all_transactions_with_line\"\nwhere fx_rate_original_to_usd is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:43.997629Z", "completed_at": "2024-10-21T01:04:45.180490Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:45.180863Z", "completed_at": "2024-10-21T01:04:45.180875Z"}], "thread_id": "Thread-1", "execution_time": 1.184873342514038, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.dataset_sales_pipeline_monitoring", "compiled": true, "compiled_code": "\n\nWITH unioned_data AS (\n    \n\n        (\n            select\n                cast('\"netsuite\".\"prod_ds\".\"dataset_sales_pipeline\"' as VARCHAR(8000)) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_nsid\" as int) as \"transaction_nsid\" ,\n                    cast(\"transaction_line_nsid\" as int) as \"transaction_line_nsid\" ,\n                    cast(\"transaction_last_modified_date\" as varchar(16)) as \"transaction_last_modified_date\" ,\n                    cast(\"transaction_line_last_modified_date\" as varchar(16)) as \"transaction_line_last_modified_date\" ,\n                    cast(\"transaction_type\" as varchar(16)) as \"transaction_type\" ,\n                    cast(\"transaction_number\" as varchar(16)) as \"transaction_number\" ,\n                    cast(\"transaction_status\" as varchar(16)) as \"transaction_status\" ,\n                    cast(\"transaction_date\" as datetime2) as \"transaction_date\" ,\n                    cast(\"expected_delivery_date\" as varchar(16)) as \"expected_delivery_date\" ,\n                    cast(\"foreign_amount\" as int) as \"foreign_amount\" ,\n                    cast(\"foreign_currency\" as varchar(16)) as \"foreign_currency\" ,\n                    cast(\"quantity\" as int) as \"quantity\" ,\n                    cast(\"bu_rate\" as float) as \"bu_rate\" ,\n                    cast(\"bu_amount\" as float) as \"bu_amount\" ,\n                    cast(\"fk_item_nsid\" as varchar(50)) as \"fk_item_nsid\" ,\n                    cast(\"fk_bu_nsid\" as varchar(50)) as \"fk_bu_nsid\" ,\n                    cast(\"fk_customer_nsid\" as varchar(50)) as \"fk_customer_nsid\" ,\n                    cast(\"dbt_load_datetime\" as datetime2) as \"dbt_load_datetime\" ,\n                    cast(\"dbt_run_id\" as varchar(36)) as \"dbt_run_id\" ,\n                    cast(\"dbt_functional_snapshot_date\" as datetime2) as \"dbt_functional_snapshot_date\" ,\n                    cast(\"snapshot_date_order\" as bigint) as \"snapshot_date_order\" ,\n                    cast(\"hist_bu_code\" as varchar(16)) as \"hist_bu_code\" ,\n                    cast(\"hist_bu_country_code\" as varchar(16)) as \"hist_bu_country_code\" ,\n                    cast(\"hist_bu_currency\" as varchar(16)) as \"hist_bu_currency\" ,\n                    cast(\"hist_bu_legal_name\" as varchar(66)) as \"hist_bu_legal_name\" ,\n                    cast(\"hist_bu_commercial_group\" as varchar(16)) as \"hist_bu_commercial_group\" ,\n                    cast(\"live_bu_code\" as varchar(16)) as \"live_bu_code\" ,\n                    cast(\"live_bu_country_code\" as varchar(16)) as \"live_bu_country_code\" ,\n                    cast(\"live_bu_currency\" as varchar(16)) as \"live_bu_currency\" ,\n                    cast(\"live_bu_legal_name\" as varchar(66)) as \"live_bu_legal_name\" ,\n                    cast(\"live_bu_commercial_group\" as varchar(16)) as \"live_bu_commercial_group\" ,\n                    cast(\"pk_bu_nsid\" as varchar(50)) as \"pk_bu_nsid\" ,\n                    cast(\"bu_nsid\" as int) as \"bu_nsid\" ,\n                    cast(\"fx_rate_original_to_usd\" as float) as \"fx_rate_original_to_usd\" ,\n                    cast(\"fx_rate_original_to_dynamic\" as float) as \"fx_rate_original_to_dynamic\" ,\n                    cast(\"dynamic_target_currency\" as varchar(3)) as \"dynamic_target_currency\" ,\n                    cast(\"usd_amount\" as float) as \"usd_amount\" ,\n                    cast(\"dynamic_amount\" as float) as \"dynamic_amount\" ,\n                    cast(\"calculation_date\" as date) as \"calculation_date\" ,\n                    cast(\"total_bu_amount_prev_2y_fiscal_year\" as float) as \"total_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(\"total_bu_amount_prev_1y_fiscal_year\" as float) as \"total_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(\"total_bu_amount_current_fiscal_year\" as float) as \"total_bu_amount_current_fiscal_year\" ,\n                    cast(\"total_bu_amount_next_1y_fiscal_year\" as float) as \"total_bu_amount_next_1y_fiscal_year\" ,\n                    cast(\"total_usd_amount_prev_2y_fiscal_year\" as float) as \"total_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(\"total_usd_amount_prev_1y_fiscal_year\" as float) as \"total_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(\"total_usd_amount_current_fiscal_year\" as float) as \"total_usd_amount_current_fiscal_year\" ,\n                    cast(\"total_usd_amount_next_1y_fiscal_year\" as float) as \"total_usd_amount_next_1y_fiscal_year\" ,\n                    cast(\"total_dynamic_amount_prev_2y_fiscal_year\" as float) as \"total_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(\"total_dynamic_amount_prev_1y_fiscal_year\" as float) as \"total_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(\"total_dynamic_amount_current_fiscal_year\" as float) as \"total_dynamic_amount_current_fiscal_year\" ,\n                    cast(\"total_dynamic_amount_next_1y_fiscal_year\" as float) as \"total_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(\"opportunity_bu_amount_prev_2y_fiscal_year\" as float) as \"opportunity_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(\"opportunity_bu_amount_prev_1y_fiscal_year\" as float) as \"opportunity_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(\"opportunity_bu_amount_current_fiscal_year\" as float) as \"opportunity_bu_amount_current_fiscal_year\" ,\n                    cast(\"opportunity_bu_amount_next_1y_fiscal_year\" as float) as \"opportunity_bu_amount_next_1y_fiscal_year\" ,\n                    cast(\"invoice_bu_amount_prev_2y_fiscal_year\" as float) as \"invoice_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(\"invoice_bu_amount_prev_1y_fiscal_year\" as float) as \"invoice_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(\"invoice_bu_amount_current_fiscal_year\" as float) as \"invoice_bu_amount_current_fiscal_year\" ,\n                    cast(\"invoice_bu_amount_next_1y_fiscal_year\" as float) as \"invoice_bu_amount_next_1y_fiscal_year\" ,\n                    cast(\"sales_order_bu_amount_prev_2y_fiscal_year\" as float) as \"sales_order_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(\"sales_order_bu_amount_prev_1y_fiscal_year\" as float) as \"sales_order_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(\"sales_order_bu_amount_current_fiscal_year\" as float) as \"sales_order_bu_amount_current_fiscal_year\" ,\n                    cast(\"sales_order_bu_amount_next_1y_fiscal_year\" as float) as \"sales_order_bu_amount_next_1y_fiscal_year\" ,\n                    cast(\"opportunity_usd_amount_prev_2y_fiscal_year\" as float) as \"opportunity_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(\"opportunity_usd_amount_prev_1y_fiscal_year\" as float) as \"opportunity_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(\"opportunity_usd_amount_current_fiscal_year\" as float) as \"opportunity_usd_amount_current_fiscal_year\" ,\n                    cast(\"opportunity_usd_amount_next_1y_fiscal_year\" as float) as \"opportunity_usd_amount_next_1y_fiscal_year\" ,\n                    cast(\"invoice_usd_amount_prev_2y_fiscal_year\" as float) as \"invoice_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(\"invoice_usd_amount_prev_1y_fiscal_year\" as float) as \"invoice_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(\"invoice_usd_amount_current_fiscal_year\" as float) as \"invoice_usd_amount_current_fiscal_year\" ,\n                    cast(\"invoice_usd_amount_next_1y_fiscal_year\" as float) as \"invoice_usd_amount_next_1y_fiscal_year\" ,\n                    cast(\"sales_order_usd_amount_prev_2y_fiscal_year\" as float) as \"sales_order_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(\"sales_order_usd_amount_prev_1y_fiscal_year\" as float) as \"sales_order_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(\"sales_order_usd_amount_current_fiscal_year\" as float) as \"sales_order_usd_amount_current_fiscal_year\" ,\n                    cast(\"sales_order_usd_amount_next_1y_fiscal_year\" as float) as \"sales_order_usd_amount_next_1y_fiscal_year\" ,\n                    cast(\"opportunity_dynamic_amount_prev_2y_fiscal_year\" as float) as \"opportunity_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(\"opportunity_dynamic_amount_prev_1y_fiscal_year\" as float) as \"opportunity_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(\"opportunity_dynamic_amount_current_fiscal_year\" as float) as \"opportunity_dynamic_amount_current_fiscal_year\" ,\n                    cast(\"opportunity_dynamic_amount_next_1y_fiscal_year\" as float) as \"opportunity_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(\"invoice_dynamic_amount_prev_2y_fiscal_year\" as float) as \"invoice_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(\"invoice_dynamic_amount_prev_1y_fiscal_year\" as float) as \"invoice_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(\"invoice_dynamic_amount_current_fiscal_year\" as float) as \"invoice_dynamic_amount_current_fiscal_year\" ,\n                    cast(\"invoice_dynamic_amount_next_1y_fiscal_year\" as float) as \"invoice_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(\"sales_order_dynamic_amount_prev_2y_fiscal_year\" as float) as \"sales_order_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(\"sales_order_dynamic_amount_prev_1y_fiscal_year\" as float) as \"sales_order_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(\"sales_order_dynamic_amount_current_fiscal_year\" as float) as \"sales_order_dynamic_amount_current_fiscal_year\" ,\n                    cast(\"sales_order_dynamic_amount_next_1y_fiscal_year\" as float) as \"sales_order_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(\"hist_item_name\" as varchar(21)) as \"hist_item_name\" ,\n                    cast(\"hist_item_code\" as varchar(16)) as \"hist_item_code\" ,\n                    cast(\"hist_item_type\" as varchar(16)) as \"hist_item_type\" ,\n                    cast(\"hist_project_code\" as varchar(16)) as \"hist_project_code\" ,\n                    cast(\"hist_item_category\" as varchar(19)) as \"hist_item_category\" ,\n                    cast(\"hist_item_sub_category\" as varchar(21)) as \"hist_item_sub_category\" ,\n                    cast(\"hist_item_pattern\" as varchar(16)) as \"hist_item_pattern\" ,\n                    cast(\"live_item_name\" as varchar(21)) as \"live_item_name\" ,\n                    cast(\"live_item_code\" as varchar(16)) as \"live_item_code\" ,\n                    cast(\"live_item_type\" as varchar(16)) as \"live_item_type\" ,\n                    cast(\"live_project_code\" as varchar(16)) as \"live_project_code\" ,\n                    cast(\"live_item_category\" as varchar(19)) as \"live_item_category\" ,\n                    cast(\"live_item_sub_category\" as varchar(21)) as \"live_item_sub_category\" ,\n                    cast(\"live_item_pattern\" as varchar(16)) as \"live_item_pattern\" ,\n                    cast(\"pk_item_nsid\" as varchar(50)) as \"pk_item_nsid\" ,\n                    cast(\"item_nsid\" as int) as \"item_nsid\" ,\n                    cast(\"hist_customer_name\" as varchar(31)) as \"hist_customer_name\" ,\n                    cast(\"hist_customer_tier\" as varchar(16)) as \"hist_customer_tier\" ,\n                    cast(\"live_customer_name\" as varchar(31)) as \"live_customer_name\" ,\n                    cast(\"live_customer_tier\" as varchar(16)) as \"live_customer_tier\" ,\n                    cast(\"pk_customer_nsid\" as varchar(50)) as \"pk_customer_nsid\" ,\n                    cast(\"customer_nsid\" as int) as \"customer_nsid\" ,\n                    cast(null as int) as \"budget_year\" ,\n                    cast(null as varchar(16)) as \"budget_version\" ,\n                    cast(null as float) as \"budget_sales_amount_bu_currency\" ,\n                    cast(null as float) as \"budget_sales_amount_usd_currency\" ,\n                    cast(null as float) as \"budget_sales_amount_dynamic_currency\" \n\n            from \"netsuite\".\"prod_ds\".\"dataset_sales_pipeline\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"netsuite\".\"prod_prp\".\"prep_budget_for_union\"' as VARCHAR(8000)) as _dbt_source_relation,\n\n                \n                    cast(null as int) as \"transaction_nsid\" ,\n                    cast(null as int) as \"transaction_line_nsid\" ,\n                    cast(null as varchar(16)) as \"transaction_last_modified_date\" ,\n                    cast(null as varchar(16)) as \"transaction_line_last_modified_date\" ,\n                    cast(\"transaction_type\" as varchar(16)) as \"transaction_type\" ,\n                    cast(null as varchar(16)) as \"transaction_number\" ,\n                    cast(null as varchar(16)) as \"transaction_status\" ,\n                    cast(null as datetime2) as \"transaction_date\" ,\n                    cast(null as varchar(16)) as \"expected_delivery_date\" ,\n                    cast(null as int) as \"foreign_amount\" ,\n                    cast(null as varchar(16)) as \"foreign_currency\" ,\n                    cast(null as int) as \"quantity\" ,\n                    cast(null as float) as \"bu_rate\" ,\n                    cast(null as float) as \"bu_amount\" ,\n                    cast(null as varchar(50)) as \"fk_item_nsid\" ,\n                    cast(null as varchar(50)) as \"fk_bu_nsid\" ,\n                    cast(null as varchar(50)) as \"fk_customer_nsid\" ,\n                    cast(null as datetime2) as \"dbt_load_datetime\" ,\n                    cast(null as varchar(36)) as \"dbt_run_id\" ,\n                    cast(null as datetime2) as \"dbt_functional_snapshot_date\" ,\n                    cast(null as bigint) as \"snapshot_date_order\" ,\n                    cast(\"hist_bu_code\" as varchar(16)) as \"hist_bu_code\" ,\n                    cast(\"hist_bu_country_code\" as varchar(16)) as \"hist_bu_country_code\" ,\n                    cast(\"hist_bu_currency\" as varchar(16)) as \"hist_bu_currency\" ,\n                    cast(\"hist_bu_legal_name\" as varchar(66)) as \"hist_bu_legal_name\" ,\n                    cast(\"hist_bu_commercial_group\" as varchar(16)) as \"hist_bu_commercial_group\" ,\n                    cast(\"live_bu_code\" as varchar(16)) as \"live_bu_code\" ,\n                    cast(\"live_bu_country_code\" as varchar(16)) as \"live_bu_country_code\" ,\n                    cast(\"live_bu_currency\" as varchar(16)) as \"live_bu_currency\" ,\n                    cast(\"live_bu_legal_name\" as varchar(66)) as \"live_bu_legal_name\" ,\n                    cast(\"live_bu_commercial_group\" as varchar(16)) as \"live_bu_commercial_group\" ,\n                    cast(\"pk_bu_nsid\" as varchar(50)) as \"pk_bu_nsid\" ,\n                    cast(\"bu_nsid\" as int) as \"bu_nsid\" ,\n                    cast(\"fx_rate_original_to_usd\" as float) as \"fx_rate_original_to_usd\" ,\n                    cast(\"fx_rate_original_to_dynamic\" as float) as \"fx_rate_original_to_dynamic\" ,\n                    cast(\"dynamic_target_currency\" as varchar(3)) as \"dynamic_target_currency\" ,\n                    cast(null as float) as \"usd_amount\" ,\n                    cast(null as float) as \"dynamic_amount\" ,\n                    cast(\"calculation_date\" as date) as \"calculation_date\" ,\n                    cast(null as float) as \"total_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"total_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"total_bu_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"total_bu_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"total_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"total_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"total_usd_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"total_usd_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"total_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"total_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"total_dynamic_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"total_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_bu_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_bu_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_bu_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"invoice_bu_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_bu_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_bu_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_usd_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_usd_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_usd_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"invoice_usd_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_usd_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_usd_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_dynamic_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_dynamic_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"invoice_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_dynamic_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(null as varchar(21)) as \"hist_item_name\" ,\n                    cast(null as varchar(16)) as \"hist_item_code\" ,\n                    cast(null as varchar(16)) as \"hist_item_type\" ,\n                    cast(null as varchar(16)) as \"hist_project_code\" ,\n                    cast(null as varchar(19)) as \"hist_item_category\" ,\n                    cast(null as varchar(21)) as \"hist_item_sub_category\" ,\n                    cast(null as varchar(16)) as \"hist_item_pattern\" ,\n                    cast(null as varchar(21)) as \"live_item_name\" ,\n                    cast(null as varchar(16)) as \"live_item_code\" ,\n                    cast(null as varchar(16)) as \"live_item_type\" ,\n                    cast(null as varchar(16)) as \"live_project_code\" ,\n                    cast(null as varchar(19)) as \"live_item_category\" ,\n                    cast(null as varchar(21)) as \"live_item_sub_category\" ,\n                    cast(null as varchar(16)) as \"live_item_pattern\" ,\n                    cast(null as varchar(50)) as \"pk_item_nsid\" ,\n                    cast(null as int) as \"item_nsid\" ,\n                    cast(\"hist_customer_name\" as varchar(31)) as \"hist_customer_name\" ,\n                    cast(null as varchar(16)) as \"hist_customer_tier\" ,\n                    cast(\"live_customer_name\" as varchar(31)) as \"live_customer_name\" ,\n                    cast(null as varchar(16)) as \"live_customer_tier\" ,\n                    cast(null as varchar(50)) as \"pk_customer_nsid\" ,\n                    cast(null as int) as \"customer_nsid\" ,\n                    cast(\"budget_year\" as int) as \"budget_year\" ,\n                    cast(\"budget_version\" as varchar(16)) as \"budget_version\" ,\n                    cast(\"budget_sales_amount_bu_currency\" as float) as \"budget_sales_amount_bu_currency\" ,\n                    cast(\"budget_sales_amount_usd_currency\" as float) as \"budget_sales_amount_usd_currency\" ,\n                    cast(\"budget_sales_amount_dynamic_currency\" as float) as \"budget_sales_amount_dynamic_currency\" \n\n            from \"netsuite\".\"prod_prp\".\"prep_budget_for_union\"\n\n            \n        )\n\n        \n)\n\nSELECT\n    \n            _dbt_source_relation,\n            COALESCE(transaction_nsid, 0) as transaction_nsid,\n            COALESCE(transaction_line_nsid, 0) as transaction_line_nsid,\n            transaction_last_modified_date,\n            transaction_line_last_modified_date,\n            transaction_type,\n            transaction_number,\n            transaction_status,\n            transaction_date,\n            expected_delivery_date,\n            COALESCE(foreign_amount, 0) as foreign_amount,\n            foreign_currency,\n            COALESCE(quantity, 0) as quantity,\n            COALESCE(bu_rate, 0) as bu_rate,\n            COALESCE(bu_amount, 0) as bu_amount,\n            fk_item_nsid,\n            fk_bu_nsid,\n            fk_customer_nsid,\n            dbt_load_datetime,\n            dbt_run_id,\n            dbt_functional_snapshot_date,\n            COALESCE(snapshot_date_order, 0) as snapshot_date_order,\n            hist_bu_code,\n            hist_bu_country_code,\n            hist_bu_currency,\n            hist_bu_legal_name,\n            hist_bu_commercial_group,\n            live_bu_code,\n            live_bu_country_code,\n            live_bu_currency,\n            live_bu_legal_name,\n            live_bu_commercial_group,\n            pk_bu_nsid,\n            COALESCE(bu_nsid, 0) as bu_nsid,\n            COALESCE(fx_rate_original_to_usd, 0) as fx_rate_original_to_usd,\n            COALESCE(fx_rate_original_to_dynamic, 0) as fx_rate_original_to_dynamic,\n            dynamic_target_currency,\n            COALESCE(usd_amount, 0) as usd_amount,\n            COALESCE(dynamic_amount, 0) as dynamic_amount,\n            calculation_date,\n            COALESCE(total_bu_amount_prev_2y_fiscal_year, 0) as total_bu_amount_prev_2y_fiscal_year,\n            COALESCE(total_bu_amount_prev_1y_fiscal_year, 0) as total_bu_amount_prev_1y_fiscal_year,\n            COALESCE(total_bu_amount_current_fiscal_year, 0) as total_bu_amount_current_fiscal_year,\n            COALESCE(total_bu_amount_next_1y_fiscal_year, 0) as total_bu_amount_next_1y_fiscal_year,\n            COALESCE(total_usd_amount_prev_2y_fiscal_year, 0) as total_usd_amount_prev_2y_fiscal_year,\n            COALESCE(total_usd_amount_prev_1y_fiscal_year, 0) as total_usd_amount_prev_1y_fiscal_year,\n            COALESCE(total_usd_amount_current_fiscal_year, 0) as total_usd_amount_current_fiscal_year,\n            COALESCE(total_usd_amount_next_1y_fiscal_year, 0) as total_usd_amount_next_1y_fiscal_year,\n            COALESCE(total_dynamic_amount_prev_2y_fiscal_year, 0) as total_dynamic_amount_prev_2y_fiscal_year,\n            COALESCE(total_dynamic_amount_prev_1y_fiscal_year, 0) as total_dynamic_amount_prev_1y_fiscal_year,\n            COALESCE(total_dynamic_amount_current_fiscal_year, 0) as total_dynamic_amount_current_fiscal_year,\n            COALESCE(total_dynamic_amount_next_1y_fiscal_year, 0) as total_dynamic_amount_next_1y_fiscal_year,\n            COALESCE(opportunity_bu_amount_prev_2y_fiscal_year, 0) as opportunity_bu_amount_prev_2y_fiscal_year,\n            COALESCE(opportunity_bu_amount_prev_1y_fiscal_year, 0) as opportunity_bu_amount_prev_1y_fiscal_year,\n            COALESCE(opportunity_bu_amount_current_fiscal_year, 0) as opportunity_bu_amount_current_fiscal_year,\n            COALESCE(opportunity_bu_amount_next_1y_fiscal_year, 0) as opportunity_bu_amount_next_1y_fiscal_year,\n            COALESCE(invoice_bu_amount_prev_2y_fiscal_year, 0) as invoice_bu_amount_prev_2y_fiscal_year,\n            COALESCE(invoice_bu_amount_prev_1y_fiscal_year, 0) as invoice_bu_amount_prev_1y_fiscal_year,\n            COALESCE(invoice_bu_amount_current_fiscal_year, 0) as invoice_bu_amount_current_fiscal_year,\n            COALESCE(invoice_bu_amount_next_1y_fiscal_year, 0) as invoice_bu_amount_next_1y_fiscal_year,\n            COALESCE(sales_order_bu_amount_prev_2y_fiscal_year, 0) as sales_order_bu_amount_prev_2y_fiscal_year,\n            COALESCE(sales_order_bu_amount_prev_1y_fiscal_year, 0) as sales_order_bu_amount_prev_1y_fiscal_year,\n            COALESCE(sales_order_bu_amount_current_fiscal_year, 0) as sales_order_bu_amount_current_fiscal_year,\n            COALESCE(sales_order_bu_amount_next_1y_fiscal_year, 0) as sales_order_bu_amount_next_1y_fiscal_year,\n            COALESCE(opportunity_usd_amount_prev_2y_fiscal_year, 0) as opportunity_usd_amount_prev_2y_fiscal_year,\n            COALESCE(opportunity_usd_amount_prev_1y_fiscal_year, 0) as opportunity_usd_amount_prev_1y_fiscal_year,\n            COALESCE(opportunity_usd_amount_current_fiscal_year, 0) as opportunity_usd_amount_current_fiscal_year,\n            COALESCE(opportunity_usd_amount_next_1y_fiscal_year, 0) as opportunity_usd_amount_next_1y_fiscal_year,\n            COALESCE(invoice_usd_amount_prev_2y_fiscal_year, 0) as invoice_usd_amount_prev_2y_fiscal_year,\n            COALESCE(invoice_usd_amount_prev_1y_fiscal_year, 0) as invoice_usd_amount_prev_1y_fiscal_year,\n            COALESCE(invoice_usd_amount_current_fiscal_year, 0) as invoice_usd_amount_current_fiscal_year,\n            COALESCE(invoice_usd_amount_next_1y_fiscal_year, 0) as invoice_usd_amount_next_1y_fiscal_year,\n            COALESCE(sales_order_usd_amount_prev_2y_fiscal_year, 0) as sales_order_usd_amount_prev_2y_fiscal_year,\n            COALESCE(sales_order_usd_amount_prev_1y_fiscal_year, 0) as sales_order_usd_amount_prev_1y_fiscal_year,\n            COALESCE(sales_order_usd_amount_current_fiscal_year, 0) as sales_order_usd_amount_current_fiscal_year,\n            COALESCE(sales_order_usd_amount_next_1y_fiscal_year, 0) as sales_order_usd_amount_next_1y_fiscal_year,\n            COALESCE(opportunity_dynamic_amount_prev_2y_fiscal_year, 0) as opportunity_dynamic_amount_prev_2y_fiscal_year,\n            COALESCE(opportunity_dynamic_amount_prev_1y_fiscal_year, 0) as opportunity_dynamic_amount_prev_1y_fiscal_year,\n            COALESCE(opportunity_dynamic_amount_current_fiscal_year, 0) as opportunity_dynamic_amount_current_fiscal_year,\n            COALESCE(opportunity_dynamic_amount_next_1y_fiscal_year, 0) as opportunity_dynamic_amount_next_1y_fiscal_year,\n            COALESCE(invoice_dynamic_amount_prev_2y_fiscal_year, 0) as invoice_dynamic_amount_prev_2y_fiscal_year,\n            COALESCE(invoice_dynamic_amount_prev_1y_fiscal_year, 0) as invoice_dynamic_amount_prev_1y_fiscal_year,\n            COALESCE(invoice_dynamic_amount_current_fiscal_year, 0) as invoice_dynamic_amount_current_fiscal_year,\n            COALESCE(invoice_dynamic_amount_next_1y_fiscal_year, 0) as invoice_dynamic_amount_next_1y_fiscal_year,\n            COALESCE(sales_order_dynamic_amount_prev_2y_fiscal_year, 0) as sales_order_dynamic_amount_prev_2y_fiscal_year,\n            COALESCE(sales_order_dynamic_amount_prev_1y_fiscal_year, 0) as sales_order_dynamic_amount_prev_1y_fiscal_year,\n            COALESCE(sales_order_dynamic_amount_current_fiscal_year, 0) as sales_order_dynamic_amount_current_fiscal_year,\n            COALESCE(sales_order_dynamic_amount_next_1y_fiscal_year, 0) as sales_order_dynamic_amount_next_1y_fiscal_year,\n            hist_item_name,\n            hist_item_code,\n            hist_item_type,\n            hist_project_code,\n            hist_item_category,\n            hist_item_sub_category,\n            hist_item_pattern,\n            live_item_name,\n            live_item_code,\n            live_item_type,\n            live_project_code,\n            live_item_category,\n            live_item_sub_category,\n            live_item_pattern,\n            pk_item_nsid,\n            COALESCE(item_nsid, 0) as item_nsid,\n            hist_customer_name,\n            hist_customer_tier,\n            live_customer_name,\n            live_customer_tier,\n            pk_customer_nsid,\n            COALESCE(customer_nsid, 0) as customer_nsid,\n            budget_year,\n            budget_version,\n            budget_sales_amount_bu_currency,\n            budget_sales_amount_usd_currency,\n            budget_sales_amount_dynamic_currency\nFROM unioned_data", "relation_name": "\"netsuite\".\"prod_ds\".\"dataset_sales_pipeline_monitoring\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:45.183791Z", "completed_at": "2024-10-21T01:04:45.859430Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:45.859864Z", "completed_at": "2024-10-21T01:04:45.859876Z"}], "thread_id": "Thread-1", "execution_time": 0.6775600910186768, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.dataset_sales_pipeline_rls", "compiled": true, "compiled_code": "\n\n-- depends_on: \"netsuite\".\"prod_prp\".\"prep_rls_normalize\"\n\n\n\n\n\n\n\n    \n        SELECT\n            ds.*,\n            rls.user_email\n        FROM \"netsuite\".\"prod_ds\".\"dataset_sales_pipeline\" ds\n        LEFT JOIN \"netsuite\".\"prod_prp\".\"prep_rls_normalize\" rls\n            ON  \n        (ds.live_customer_name = rls.authorized_customer_name OR rls.authorized_customer_name = 'All')\n        AND (ds.live_bu_code = rls.authorized_bu_code OR rls.authorized_bu_code = 'All')\n        AND (ds.live_item_type = rls.authorized_item_type OR rls.authorized_item_type = 'All')\n    \n        WHERE rls.row_id = 1\n         UNION \n    \n        SELECT\n            ds.*,\n            rls.user_email\n        FROM \"netsuite\".\"prod_ds\".\"dataset_sales_pipeline\" ds\n        LEFT JOIN \"netsuite\".\"prod_prp\".\"prep_rls_normalize\" rls\n            ON  \n        (ds.live_customer_name = rls.authorized_customer_name OR rls.authorized_customer_name = 'All')\n        AND (ds.live_bu_code = rls.authorized_bu_code OR rls.authorized_bu_code = 'All')\n        AND (ds.live_item_type = rls.authorized_item_type OR rls.authorized_item_type = 'All')\n    \n        WHERE rls.row_id = 2\n        \n    \n\n\n", "relation_name": "\"netsuite\".\"prod_ds\".\"dataset_sales_pipeline_rls\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-21T01:04:45.862259Z", "completed_at": "2024-10-21T01:04:46.544813Z"}, {"name": "execute", "started_at": "2024-10-21T01:04:46.545181Z", "completed_at": "2024-10-21T01:04:46.545193Z"}], "thread_id": "Thread-1", "execution_time": 0.68424391746521, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.netsuite_project.dataset_sales_pipeline_monitoring_rls", "compiled": true, "compiled_code": "\n\n-- depends_on: \"netsuite\".\"prod_prp\".\"prep_rls_normalize\"\n\n\n\n\n\n\n\n    \n        SELECT\n            ds.*,\n            rls.user_email\n        FROM \"netsuite\".\"prod_ds\".\"dataset_sales_pipeline_monitoring\" ds\n        LEFT JOIN \"netsuite\".\"prod_prp\".\"prep_rls_normalize\" rls\n            ON  \n        (ds.live_customer_name = rls.authorized_customer_name OR rls.authorized_customer_name = 'All')\n        AND (ds.live_bu_code = rls.authorized_bu_code OR rls.authorized_bu_code = 'All')\n        AND (ds.live_item_type = rls.authorized_item_type OR rls.authorized_item_type = 'All')\n    \n        WHERE rls.row_id = 1\n         UNION \n    \n        SELECT\n            ds.*,\n            rls.user_email\n        FROM \"netsuite\".\"prod_ds\".\"dataset_sales_pipeline_monitoring\" ds\n        LEFT JOIN \"netsuite\".\"prod_prp\".\"prep_rls_normalize\" rls\n            ON  \n        (ds.live_customer_name = rls.authorized_customer_name OR rls.authorized_customer_name = 'All')\n        AND (ds.live_bu_code = rls.authorized_bu_code OR rls.authorized_bu_code = 'All')\n        AND (ds.live_item_type = rls.authorized_item_type OR rls.authorized_item_type = 'All')\n    \n        WHERE rls.row_id = 2\n        \n    \n\n\n", "relation_name": "\"netsuite\".\"prod_ds\".\"dataset_sales_pipeline_monitoring_rls\""}], "elapsed_time": 18.014857292175293, "args": {"require_explicit_package_overrides_for_builtin_materializations": true, "log_format": "default", "require_resource_names_without_spaces": false, "introspect": true, "select": [], "static_parser": true, "use_colors": true, "version_check": true, "indirect_selection": "eager", "invocation_command": "dbt compile --target prod", "quiet": false, "write_json": true, "log_level_file": "debug", "log_format_file": "debug", "vars": {}, "log_path": "/netsuite_project/logs", "profiles_dir": "/netsuite_project", "send_anonymous_usage_stats": true, "target": "prod", "print": true, "cache_selected_only": false, "populate_cache": true, "use_colors_file": true, "warn_error_options": {"include": [], "exclude": []}, "log_file_max_bytes": 10485760, "show_resource_report": false, "strict_mode": false, "empty": false, "enable_legacy_logger": false, "source_freshness_run_project_hooks": false, "defer": false, "favor_state": false, "partial_parse": true, "macro_debugging": false, "printer_width": 80, "inject_ephemeral_ctes": true, "exclude": [], "log_level": "info", "output": "text", "partial_parse_file_diff": true, "which": "compile", "project_dir": "/netsuite_project"}}