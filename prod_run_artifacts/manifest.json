{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.7", "generated_at": "2024-10-11T22:52:51.115996Z", "invocation_id": "fe03569b-9092-4ee9-bcdf-f2c8458e5cd4", "env": {}, "project_name": "netsuite_project", "project_id": "77d6a9132f5fa9d610432d67b25c9181", "user_id": "67acb31f-e622-42ae-a8fd-b8418826ad01", "send_anonymous_usage_stats": true, "adapter_type": "sqlserver"}, "nodes": {"model.netsuite_project.prep_fx_avg_rate_unpivot": {"database": "netsuite", "schema": "prod_prp", "name": "prep_fx_avg_rate_unpivot", "resource_type": "model", "package_name": "netsuite_project", "path": "prp/prep_fx_avg_rate_unpivot.sql", "original_file_path": "models/prp/prep_fx_avg_rate_unpivot.sql", "unique_id": "model.netsuite_project.prep_fx_avg_rate_unpivot", "fqn": ["netsuite_project", "prp", "prep_fx_avg_rate_unpivot"], "alias": "prep_fx_avg_rate_unpivot", "checksum": {"name": "sha256", "checksum": "426de823697392de9b0f6fa2b893ffe7b72afcf8d0da8309f2ff84c1df991bc1"}, "config": {"enabled": true, "alias": null, "schema": "prp", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table normalizes the months of the FX rates file and adds a USD-USD exchange rate of 1. This information is used to convert amounts in a consistent manner accross the client's finance and treasury team.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/prp/schema.yml", "build_path": null, "unrendered_config": {"schema": "prp", "materialized": "view"}, "created_at": 1728687173.7875276, "relation_name": "\"netsuite\".\"prod_prp\".\"prep_fx_avg_rate_unpivot\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\nWITH fx_avg_unpivot AS \n(\n    {{\n        dbt_utils.unpivot (\n            relation = ref(\"fx_avg_rate\"),\n            cast_to = \"float\",\n            exclude = ['original_currency','target_currency'],\n            field_name = \"closing_date\",\n            value_name = \"fx_rate_original_to_target\"\n        )\n    }}\n)\n\nSELECT \n        original_currency\n        , target_currency\n        , closing_date\n        , fx_rate_original_to_target\nFROM fx_avg_unpivot\nWHERE target_currency = 'USD'\n\nUNION ALL\n\nSELECT \n        'USD'               AS original_currency\n        , 'USD'             AS target_currency\n        , closing_date\n        , 1                 AS fx_rate_original_to_target\nFROM fx_avg_unpivot\nGROUP BY closing_date", "language": "sql", "refs": [{"name": "fx_avg_rate", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.unpivot"], "nodes": ["seed.netsuite_project.fx_avg_rate"]}, "compiled_path": "target/compiled/netsuite_project/models/prp/prep_fx_avg_rate_unpivot.sql", "compiled": true, "compiled_code": "\n\nWITH fx_avg_unpivot AS \n(\n    select\n        original_currency,\n        target_currency,\n\n      cast('31/01/2024' as VARCHAR(8000)) as closing_date,\n      cast( \n            [31/01/2024]\n             \n           as float) as fx_rate_original_to_target\n\n    from \"netsuite\".\"prod_stg\".\"fx_avg_rate\"\n\n    union all\n    select\n        original_currency,\n        target_currency,\n\n      cast('29/02/2024' as VARCHAR(8000)) as closing_date,\n      cast( \n            [29/02/2024]\n             \n           as float) as fx_rate_original_to_target\n\n    from \"netsuite\".\"prod_stg\".\"fx_avg_rate\"\n\n    union all\n    select\n        original_currency,\n        target_currency,\n\n      cast('31/03/2024' as VARCHAR(8000)) as closing_date,\n      cast( \n            [31/03/2024]\n             \n           as float) as fx_rate_original_to_target\n\n    from \"netsuite\".\"prod_stg\".\"fx_avg_rate\"\n\n    \n)\n\nSELECT \n        original_currency\n        , target_currency\n        , closing_date\n        , fx_rate_original_to_target\nFROM fx_avg_unpivot\nWHERE target_currency = 'USD'\n\nUNION ALL\n\nSELECT \n        'USD'               AS original_currency\n        , 'USD'             AS target_currency\n        , closing_date\n        , 1                 AS fx_rate_original_to_target\nFROM fx_avg_unpivot\nGROUP BY closing_date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.prep_transaction_with_lines": {"database": "netsuite", "schema": "prod_prp", "name": "prep_transaction_with_lines", "resource_type": "model", "package_name": "netsuite_project", "path": "prp/prep_transaction_with_lines.sql", "original_file_path": "models/prp/prep_transaction_with_lines.sql", "unique_id": "model.netsuite_project.prep_transaction_with_lines", "fqn": ["netsuite_project", "prp", "prep_transaction_with_lines"], "alias": "prep_transaction_with_lines", "checksum": {"name": "sha256", "checksum": "cb638243716cc3dd1e4921f7aab31c162a4e838b0c7293f54ea65acca039277c"}, "config": {"enabled": true, "alias": null, "schema": "prp", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table merges together the transactions with the transaction lines. It also computes the hash foreign keys to the dimension tables.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/prp/schema.yml", "build_path": null, "unrendered_config": {"schema": "prp", "materialized": "view"}, "created_at": 1728687173.7892048, "relation_name": "\"netsuite\".\"prod_prp\".\"prep_transaction_with_lines\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\nSELECT \n    t.transaction_nsid                                                                              AS transaction_nsid\n    , tl.transaction_line_nsid                                                                      AS transaction_line_nsid\n    , t.transaction_last_modified_date\n    , tl.transaction_line_last_modified_date\n    , t.transaction_type\n    , t.transaction_number\n    , t.transaction_status\n    , CAST(t.transaction_date AS DATETIME2)                                                         AS transaction_date\n    , t.expected_delivery_date\n    , tl.foreign_amount\n    , tl.foreign_currency\n    , tl.quantity\n    , tl.bu_rate\n    , tl.foreign_amount * tl.bu_rate                                                                AS bu_amount \n    , {{ dbt_utils.generate_surrogate_key ( ['tl.item_nsid'] )}}                                    AS fk_{{ var(\"item_key\") }}\n    , {{ dbt_utils.generate_surrogate_key ( ['t.bu_nsid'] )}}                                       AS fk_{{ var(\"business_unit_key\") }}\n    , {{ dbt_utils.generate_surrogate_key ( ['t.customer_nsid'] )}}                                 AS fk_{{ var(\"customer_key\") }}\n    , {{ column_dbt_load_datetime() }}                                                              AS {{ var(\"dbt_load_datetime_col_name\") }}\n    , '{{ var(\"dbt_run_id\") }}'                                                                     AS {{ var(\"dbt_run_id_col_name\") }}\n\nFROM {{ ref('transaction') }} t\n    LEFT OUTER JOIN {{ ref('transactionline') }} tl\n    ON t.transaction_nsid = tl.transaction_nsid", "language": "sql", "refs": [{"name": "transaction", "package": null, "version": null}, {"name": "transactionline", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.netsuite_project.column_dbt_load_datetime"], "nodes": ["seed.netsuite_project.transaction", "seed.netsuite_project.transactionline"]}, "compiled_path": "target/compiled/netsuite_project/models/prp/prep_transaction_with_lines.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    t.transaction_nsid                                                                              AS transaction_nsid\n    , tl.transaction_line_nsid                                                                      AS transaction_line_nsid\n    , t.transaction_last_modified_date\n    , tl.transaction_line_last_modified_date\n    , t.transaction_type\n    , t.transaction_number\n    , t.transaction_status\n    , CAST(t.transaction_date AS DATETIME2)                                                         AS transaction_date\n    , t.expected_delivery_date\n    , tl.foreign_amount\n    , tl.foreign_currency\n    , tl.quantity\n    , tl.bu_rate\n    , tl.foreign_amount * tl.bu_rate                                                                AS bu_amount \n    , \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(tl.item_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '')), '')), 2))\n                                    AS fk_item_nsid\n    , \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(t.bu_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '')), '')), 2))\n                                       AS fk_bu_nsid\n    , \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(t.customer_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '')), '')), 2))\n                                 AS fk_customer_nsid\n    , \n    CAST('2024-10-12 00:52:50' AS DATETIME2)\n                                                              AS dbt_load_datetime\n    , 'fe03569b-9092-4ee9-bcdf-f2c8458e5cd4'                                                                     AS dbt_run_id\n\nFROM \"netsuite\".\"prod_stg\".\"transaction\" t\n    LEFT OUTER JOIN \"netsuite\".\"prod_stg\".\"transactionline\" tl\n    ON t.transaction_nsid = tl.transaction_nsid", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.prep_transaction_with_lines_for_union": {"database": "netsuite", "schema": "prod_prp", "name": "prep_transaction_with_lines_for_union", "resource_type": "model", "package_name": "netsuite_project", "path": "prp/prep_transaction_with_lines_for_union.sql", "original_file_path": "models/prp/prep_transaction_with_lines_for_union.sql", "unique_id": "model.netsuite_project.prep_transaction_with_lines_for_union", "fqn": ["netsuite_project", "prp", "prep_transaction_with_lines_for_union"], "alias": "prep_transaction_with_lines_for_union", "checksum": {"name": "sha256", "checksum": "75db4bb995b26b0bf28c56877f8fc854b63554639745fde3408eeb4688c44a40"}, "config": {"enabled": true, "alias": null, "schema": "prp", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table defines the current date from Dbt as a functional snapshot date for the current transaction data. This information is used to differentiate the snapshotted data and the current data when merged together.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/prp/schema.yml", "build_path": null, "unrendered_config": {"schema": "prp", "materialized": "view"}, "created_at": 1728687173.78871, "relation_name": "\"netsuite\".\"prod_prp\".\"prep_transaction_with_lines_for_union\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\nSELECT \n    *\n    , {{ column_dbt_load_datetime() }} AS {{ var(\"dbt_snapshot_col_name\") }} {# for current data, snapshot date is set to now #}\n    \nFROM {{ ref('transaction_with_line') }} t", "language": "sql", "refs": [{"name": "transaction_with_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_project.column_dbt_load_datetime"], "nodes": ["model.netsuite_project.transaction_with_line"]}, "compiled_path": "target/compiled/netsuite_project/models/prp/prep_transaction_with_lines_for_union.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    *\n    , \n    CAST('2024-10-12 00:52:50' AS DATETIME2)\n AS dbt_functional_snapshot_date \n    \nFROM \"netsuite\".\"prod_dwh\".\"transaction_with_line\" t", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.prep_budget_for_union": {"database": "netsuite", "schema": "prod_prp", "name": "prep_budget_for_union", "resource_type": "model", "package_name": "netsuite_project", "path": "prp/prep_budget_for_union.sql", "original_file_path": "models/prp/prep_budget_for_union.sql", "unique_id": "model.netsuite_project.prep_budget_for_union", "fqn": ["netsuite_project", "prp", "prep_budget_for_union"], "alias": "prep_budget_for_union", "checksum": {"name": "sha256", "checksum": "b6493096ce2209280ae102a8985e0ed95225adc0848ed5be2b82126d2bbd9d9d"}, "config": {"enabled": true, "alias": null, "schema": "prp", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table contains the budget data, enriched with all the relevant columns that are expected to match the dataset with which it will be merged.", "columns": {"live_bu_code": {"name": "live_bu_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/prp/schema.yml", "build_path": null, "unrendered_config": {"schema": "prp", "materialized": "view"}, "created_at": 1728687173.7864563, "relation_name": "\"netsuite\".\"prod_prp\".\"prep_budget_for_union\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\nWITH consolidate_data AS \n\n(\n    SELECT\n        'Budget'                                                                                     AS transaction_type  \n        , budget_year\n        , budget_version\n        {# customer_name cannot be matched with the dimension table and is therefore the only common field with the customer dimension #}\n        , customer_name                                                                              AS live_customer_name\n        , customer_name                                                                              AS hist_customer_name\n        {# The bu_currency written in the Excel file is for user input clarity and traceability only, but can be replaced with the appropriate bu_currency from the dimension table #}\n        , {{ dbt_utils.star(from=ref('dim_bu'), except = var(\"scd_excluded_col_name\") ) }}\n        , sales_amount_bu_currency                                                                   AS budget_sales_amount_bu_currency\n        , budget_date                                                                                AS calculation_date\n        , COALESCE( fx_dated.fx_rate_original_to_usd, fx_latest.fx_rate_original_to_usd )            AS fx_rate_original_to_usd\n        , COALESCE( fx_dated.fx_rate_original_to_dynamic, fx_latest.fx_rate_original_to_dynamic )    AS fx_rate_original_to_dynamic\n        , '{{ var(\"fx_avg_implicit_currency\") }}'                                                    AS dynamic_target_currency\n\n    FROM {{ ref('sales_budget') }} bud\n    LEFT OUTER JOIN {{ ref(\"fact_fx_avg_rate_latest\") }} fx_latest\n        ON bud.bu_currency = fx_latest.original_currency\n    LEFT OUTER JOIN {{ ref(\"fact_fx_avg_rate_dated\") }} fx_dated\n        ON bud.bu_currency = fx_dated.original_currency\n        AND EOMONTH(bud.budget_date) = fx_dated.closing_date\n    LEFT OUTER JOIN {{ ref(\"prep_dim_bu_alternate_key_bu_code\") }} bu\n        ON bu.live_bu_code = bud.bu_code\n)\n\nSELECT\n    *\n    , fx_rate_original_to_usd       * budget_sales_amount_bu_currency AS budget_sales_amount_usd_currency\n    , fx_rate_original_to_dynamic   * budget_sales_amount_bu_currency AS budget_sales_amount_dynamic_currency\nFROM consolidate_data", "language": "sql", "refs": [{"name": "dim_bu", "package": null, "version": null}, {"name": "sales_budget", "package": null, "version": null}, {"name": "fact_fx_avg_rate_latest", "package": null, "version": null}, {"name": "fact_fx_avg_rate_dated", "package": null, "version": null}, {"name": "prep_dim_bu_alternate_key_bu_code", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.netsuite_project.dim_bu", "seed.netsuite_project.sales_budget", "model.netsuite_project.fact_fx_avg_rate_latest", "model.netsuite_project.fact_fx_avg_rate_dated", "model.netsuite_project.prep_dim_bu_alternate_key_bu_code"]}, "compiled_path": "target/compiled/netsuite_project/models/prp/prep_budget_for_union.sql", "compiled": true, "compiled_code": "\n\nWITH consolidate_data AS \n\n(\n    SELECT\n        'Budget'                                                                                     AS transaction_type  \n        , budget_year\n        , budget_version\n        \n        , customer_name                                                                              AS live_customer_name\n        , customer_name                                                                              AS hist_customer_name\n        \n        , \"hist_bu_code\",\n  \"hist_bu_country_code\",\n  \"hist_bu_currency\",\n  \"hist_bu_legal_name\",\n  \"hist_bu_commercial_group\",\n  \"live_bu_code\",\n  \"live_bu_country_code\",\n  \"live_bu_currency\",\n  \"live_bu_legal_name\",\n  \"live_bu_commercial_group\",\n  \"pk_bu_nsid\",\n  \"bu_nsid\"\n        , sales_amount_bu_currency                                                                   AS budget_sales_amount_bu_currency\n        , budget_date                                                                                AS calculation_date\n        , COALESCE( fx_dated.fx_rate_original_to_usd, fx_latest.fx_rate_original_to_usd )            AS fx_rate_original_to_usd\n        , COALESCE( fx_dated.fx_rate_original_to_dynamic, fx_latest.fx_rate_original_to_dynamic )    AS fx_rate_original_to_dynamic\n        , 'EUR'                                                    AS dynamic_target_currency\n\n    FROM \"netsuite\".\"prod_stg\".\"sales_budget\" bud\n    LEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"fact_fx_avg_rate_latest\" fx_latest\n        ON bud.bu_currency = fx_latest.original_currency\n    LEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"fact_fx_avg_rate_dated\" fx_dated\n        ON bud.bu_currency = fx_dated.original_currency\n        AND EOMONTH(bud.budget_date) = fx_dated.closing_date\n    LEFT OUTER JOIN \"netsuite\".\"prod_prp\".\"prep_dim_bu_alternate_key_bu_code\" bu\n        ON bu.live_bu_code = bud.bu_code\n)\n\nSELECT\n    *\n    , fx_rate_original_to_usd       * budget_sales_amount_bu_currency AS budget_sales_amount_usd_currency\n    , fx_rate_original_to_dynamic   * budget_sales_amount_bu_currency AS budget_sales_amount_dynamic_currency\nFROM consolidate_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.prep_dim_bu_alternate_key_bu_code": {"database": "netsuite", "schema": "prod_prp", "name": "prep_dim_bu_alternate_key_bu_code", "resource_type": "model", "package_name": "netsuite_project", "path": "prp/prep_dim_bu_alternate_key_bu_code.sql", "original_file_path": "models/prp/prep_dim_bu_alternate_key_bu_code.sql", "unique_id": "model.netsuite_project.prep_dim_bu_alternate_key_bu_code", "fqn": ["netsuite_project", "prp", "prep_dim_bu_alternate_key_bu_code"], "alias": "prep_dim_bu_alternate_key_bu_code", "checksum": {"name": "sha256", "checksum": "51b812cb4a46de30323570befb48fe9ec637d5a9a141f06541725fcc1ae8b31c"}, "config": {"enabled": true, "alias": null, "schema": "prp", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table is a workaround solution requested by the client to be able to enrich the budget data with the business unit dimension table. The budget data does not contain any usual join key in the form of a NetSuite ID (nsid) because it is an external file input. The best proxy indicated by the client is to use the business unit code instead. Since the business unit code is not expected to be unique all the time, a data transformation is required to match the latest primary key.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/prp/schema.yml", "build_path": null, "unrendered_config": {"schema": "prp", "materialized": "view"}, "created_at": 1728687173.7870047, "relation_name": "\"netsuite\".\"prod_prp\".\"prep_dim_bu_alternate_key_bu_code\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\nWITH dim_business_unit_bu_code_id AS \n(\n    SELECT \n        *\n        , ROW_NUMBER() OVER(PARTITION BY live_bu_code ORDER BY dbt_updated_at DESC) AS bu_code_id_key\n    FROM {{ ref(\"dim_bu\") }}\n)\n\nSELECT * FROM dim_business_unit_bu_code_id WHERE bu_code_id_key = 1", "language": "sql", "refs": [{"name": "dim_bu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.netsuite_project.dim_bu"]}, "compiled_path": "target/compiled/netsuite_project/models/prp/prep_dim_bu_alternate_key_bu_code.sql", "compiled": true, "compiled_code": "\n\nWITH dim_business_unit_bu_code_id AS \n(\n    SELECT \n        *\n        , ROW_NUMBER() OVER(PARTITION BY live_bu_code ORDER BY dbt_updated_at DESC) AS bu_code_id_key\n    FROM \"netsuite\".\"prod_bus\".\"dim_bu\"\n)\n\nSELECT * FROM dim_business_unit_bu_code_id WHERE bu_code_id_key = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.prep_delta_records": {"database": "netsuite", "schema": "prod_prp", "name": "prep_delta_records", "resource_type": "model", "package_name": "netsuite_project", "path": "prp/prep_delta_records.sql", "original_file_path": "models/prp/prep_delta_records.sql", "unique_id": "model.netsuite_project.prep_delta_records", "fqn": ["netsuite_project", "prp", "prep_delta_records"], "alias": "prep_delta_records", "checksum": {"name": "sha256", "checksum": "14858f280f6cfae1d3a844adc09b4e3cf9f4e8c93e98d2166d8101a67e0235ee"}, "config": {"enabled": true, "alias": null, "schema": "prp", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table contains the list of all transaction_nsid and the latest modification date, either at the transaction_nsid level, or at the transaction_line_nsid level. This information is used to update the DWH transactions with line table using an incremental mode, based on the transaction_nsid key.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/prp/schema.yml", "build_path": null, "unrendered_config": {"schema": "prp", "materialized": "view"}, "created_at": 1728687173.7779343, "relation_name": "\"netsuite\".\"prod_prp\".\"prep_delta_records\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\nSELECT transaction_nsid, MAX ( transaction_line_last_modified_date ) AS transaction_global_last_modified_date\nFROM \n( \n    SELECT transaction_nsid, transaction_line_last_modified_date FROM {{ ref (\"transactionline\") }}\n    UNION ALL\n    SELECT transaction_nsid, transaction_last_modified_date      FROM {{ ref (\"transaction\") }}\n) all_updates\nGROUP BY transaction_nsid", "language": "sql", "refs": [{"name": "transactionline", "package": null, "version": null}, {"name": "transaction", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.netsuite_project.transactionline", "seed.netsuite_project.transaction"]}, "compiled_path": "target/compiled/netsuite_project/models/prp/prep_delta_records.sql", "compiled": true, "compiled_code": "\n\nSELECT transaction_nsid, MAX ( transaction_line_last_modified_date ) AS transaction_global_last_modified_date\nFROM \n( \n    SELECT transaction_nsid, transaction_line_last_modified_date FROM \"netsuite\".\"prod_stg\".\"transactionline\"\n    UNION ALL\n    SELECT transaction_nsid, transaction_last_modified_date      FROM \"netsuite\".\"prod_stg\".\"transaction\"\n) all_updates\nGROUP BY transaction_nsid", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.prep_rls_normalize": {"database": "netsuite", "schema": "prod_prp", "name": "prep_rls_normalize", "resource_type": "model", "package_name": "netsuite_project", "path": "prp/prep_rls_normalize.sql", "original_file_path": "models/prp/prep_rls_normalize.sql", "unique_id": "model.netsuite_project.prep_rls_normalize", "fqn": ["netsuite_project", "prp", "prep_rls_normalize"], "alias": "prep_rls_normalize", "checksum": {"name": "sha256", "checksum": "1a15d744d33fa5011220d0f712defa093b4fabf5d300066c127a1f1a4efbbf00"}, "config": {"enabled": true, "alias": null, "schema": "prp", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table normalizes the RLS information, when multivalued attributes are separated by a comma. This information is used to manage dataset dynamic row-level-security at a user level. The column row_id identifies the set of conditons for the user. The intersection of all conditions within a row_id defines the security rule. Conditions are additive if several row_id are recorded for a single user. This is a simple way to manage advanced custom combinations of conditions.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/prp/schema.yml", "build_path": null, "unrendered_config": {"schema": "prp", "materialized": "view"}, "created_at": 1728687173.7881532, "relation_name": "\"netsuite\".\"prod_prp\".\"prep_rls_normalize\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\nWITH cte_row_id AS (\nSELECT \n  *\n  , ROW_NUMBER() OVER (PARTITION BY user_email ORDER BY user_email) as row_id\nFROM {{ ref(\"historized_user_rls\") }}\nWHERE dbt_valid_to IS NULL\n) \n\n, cte_authorized_bu_code AS (\nSELECT\n  user_email,\n  row_id,\n  LTRIM(RTRIM(value)) AS authorized_bu_code\nFROM cte_row_id\nCROSS APPLY STRING_SPLIT(authorized_bu_code, ',') AS authorized_bu_code\n)\n\n, cte_authorized_customer_name AS (\nSELECT\n  user_email,\n  row_id,\n  LTRIM(RTRIM(value)) AS authorized_customer_name\nFROM cte_row_id\nCROSS APPLY STRING_SPLIT(authorized_customer_name, ',') AS authorized_customer_name\n)\n\n, cte_authorized_item_type AS (\nSELECT\n  user_email,\n  row_id,\n  LTRIM(RTRIM(value)) AS authorized_item_type\nFROM cte_row_id\nCROSS APPLY STRING_SPLIT(authorized_item_type, ',') AS authorized_item_type\n)\n\nSELECT \n\tbu.user_email\n  , bu.row_id\n\t, bu.authorized_bu_code\n\t, cust.authorized_customer_name\n  , it.authorized_item_type\nFROM cte_authorized_bu_code bu\nINNER JOIN cte_authorized_customer_name cust \n    ON bu.user_email = cust.user_email\n    AND bu.row_id = cust.row_id\nINNER JOIN cte_authorized_item_type it \n    ON bu.user_email = it.user_email\n    AND bu.row_id = it.row_id", "language": "sql", "refs": [{"name": "historized_user_rls", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.netsuite_project.historized_user_rls"]}, "compiled_path": "target/compiled/netsuite_project/models/prp/prep_rls_normalize.sql", "compiled": true, "compiled_code": "\n\nWITH cte_row_id AS (\nSELECT \n  *\n  , ROW_NUMBER() OVER (PARTITION BY user_email ORDER BY user_email) as row_id\nFROM \"netsuite\".\"scd\".\"historized_user_rls\"\nWHERE dbt_valid_to IS NULL\n) \n\n, cte_authorized_bu_code AS (\nSELECT\n  user_email,\n  row_id,\n  LTRIM(RTRIM(value)) AS authorized_bu_code\nFROM cte_row_id\nCROSS APPLY STRING_SPLIT(authorized_bu_code, ',') AS authorized_bu_code\n)\n\n, cte_authorized_customer_name AS (\nSELECT\n  user_email,\n  row_id,\n  LTRIM(RTRIM(value)) AS authorized_customer_name\nFROM cte_row_id\nCROSS APPLY STRING_SPLIT(authorized_customer_name, ',') AS authorized_customer_name\n)\n\n, cte_authorized_item_type AS (\nSELECT\n  user_email,\n  row_id,\n  LTRIM(RTRIM(value)) AS authorized_item_type\nFROM cte_row_id\nCROSS APPLY STRING_SPLIT(authorized_item_type, ',') AS authorized_item_type\n)\n\nSELECT \n\tbu.user_email\n  , bu.row_id\n\t, bu.authorized_bu_code\n\t, cust.authorized_customer_name\n  , it.authorized_item_type\nFROM cte_authorized_bu_code bu\nINNER JOIN cte_authorized_customer_name cust \n    ON bu.user_email = cust.user_email\n    AND bu.row_id = cust.row_id\nINNER JOIN cte_authorized_item_type it \n    ON bu.user_email = it.user_email\n    AND bu.row_id = it.row_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.transaction_with_line": {"database": "netsuite", "schema": "prod_dwh", "name": "transaction_with_line", "resource_type": "model", "package_name": "netsuite_project", "path": "dwh/transaction_with_line.sql", "original_file_path": "models/dwh/transaction_with_line.sql", "unique_id": "model.netsuite_project.transaction_with_line", "fqn": ["netsuite_project", "dwh", "transaction_with_line"], "alias": "transaction_with_line", "checksum": {"name": "sha256", "checksum": "8468c9d1f57c7824499f36d9ec77dbc00c3b19c3bb2aec1b3fc576b61f2543a9"}, "config": {"enabled": true, "alias": null, "schema": "dwh", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "post-hook": [{"sql": "{{ hook_transaction_add_not_null() }}", "transaction": true, "index": null}, {"sql": "{{ hook_transaction_add_pk() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ hook_transaction_drop_pk_constraint() }}", "transaction": true, "index": null}, {"sql": "-- depends_on: {{ ref(\"deleted_records\") }}\n                                    {% if is_incremental() %}\n                                    DELETE FROM {{this}} WHERE transaction_nsid IN \n                                    (\n                                    SELECT\n                                        transaction_nsid\n                                    FROM {{ ref(\"deleted_records\") }}\n                                    WHERE \n                                        CAST ( deleted_date AS DATE ) >= \n                                            GREATEST (\n                                                CAST ( ( SELECT MAX ( incremental_date.transaction_last_modified_date ) FROM {{ this }} as incremental_date ) AS DATE )\n                                                , CAST ( ( SELECT MAX ( incremental_date.transaction_line_last_modified_date ) FROM {{ this }} as incremental_date ) AS DATE )\n                                            )\n                                    )\n                                    {% endif %}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["transaction_nsid"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "as_columnstore": false}, "tags": [], "description": "This table contains all the latest transactions and transaction lines from NetSuite. The data load is incremental, based on the latest modification dates since the last datawarehouse insert. Hard deleted transaction records in NetSuite are stored under the deleted_records table and are deleted from the datawarehouse as well. Hard deleted transactionline records are managed through the delete+insert loading option, set-up at the transaction level.", "columns": {"transaction_status": {"name": "transaction_status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/dwh/schema.yml", "build_path": null, "unrendered_config": {"schema": "dwh", "pre-hook": ["-- depends_on: {{ ref(\"deleted_records\") }}\n                                    {% if is_incremental() %}\n                                    DELETE FROM {{this}} WHERE transaction_nsid IN \n                                    (\n                                    SELECT\n                                        transaction_nsid\n                                    FROM {{ ref(\"deleted_records\") }}\n                                    WHERE \n                                        CAST ( deleted_date AS DATE ) >= \n                                            GREATEST (\n                                                CAST ( ( SELECT MAX ( incremental_date.transaction_last_modified_date ) FROM {{ this }} as incremental_date ) AS DATE )\n                                                , CAST ( ( SELECT MAX ( incremental_date.transaction_line_last_modified_date ) FROM {{ this }} as incremental_date ) AS DATE )\n                                            )\n                                    )\n                                    {% endif %}"], "post-hook": ["{{ hook_transaction_add_not_null() }}", "{{ hook_transaction_add_pk() }}"], "materialized": "incremental", "unique_key": ["transaction_nsid"], "incremental_strategy": "delete+insert", "on_schema_change": "sync_all_columns", "as_columnstore": false}, "created_at": 1728687173.8753884, "relation_name": "\"netsuite\".\"prod_dwh\".\"transaction_with_line\"", "raw_code": "{{\n    config (\n        materialized            = 'incremental'\n        , unique_key            = ['transaction_nsid']\n        , incremental_strategy  = 'delete+insert'\n        , pre_hook              = ['-- depends_on: {{ ref(\"deleted_records\") }}\n                                    {% if is_incremental() %}\n                                    DELETE FROM {{this}} WHERE transaction_nsid IN \n                                    (\n                                    SELECT\n                                        transaction_nsid\n                                    FROM {{ ref(\"deleted_records\") }}\n                                    WHERE \n                                        CAST ( deleted_date AS DATE ) >= \n                                            GREATEST (\n                                                CAST ( ( SELECT MAX ( incremental_date.transaction_last_modified_date ) FROM {{ this }} as incremental_date ) AS DATE )\n                                                , CAST ( ( SELECT MAX ( incremental_date.transaction_line_last_modified_date ) FROM {{ this }} as incremental_date ) AS DATE )\n                                            )\n                                    )\n                                    {% endif %}']      \n        , on_schema_change      = 'sync_all_columns'\n        , as_columnstore        = false\n    )\n}}\n\nSELECT * FROM {{ ref(\"prep_transaction_with_lines\") }}\n\n{# Load transactions that have been modified the same day or after the latest modifications loaded in the DWH table #}\n-- depends_on: {{ ref('prep_delta_records') }}\n{% if is_incremental() %}\n    WHERE transaction_nsid IN\n    ( \n        SELECT \n            transaction_nsid \n        FROM {{ ref(\"prep_delta_records\") }}  \n        WHERE \n            CAST ( transaction_global_last_modified_date AS DATE ) >=\n                {# Latest modifications loaded in the DWH table #}\n                GREATEST (\n                      ( SELECT MAX ( CAST ( incremental_date.transaction_last_modified_date AS DATE ) ) FROM {{ this }} as incremental_date )\n                    , ( SELECT MAX ( CAST ( incremental_date.transaction_line_last_modified_date AS DATE ) ) FROM {{ this }} as incremental_date )\n                )\n    )           \n{% endif %}", "language": "sql", "refs": [{"name": "prep_transaction_with_lines", "package": null, "version": null}, {"name": "prep_delta_records", "package": null, "version": null}, {"name": "deleted_records", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.netsuite_project.hook_transaction_drop_pk_constraint", "macro.netsuite_project.hook_transaction_add_not_null", "macro.netsuite_project.hook_transaction_add_pk"], "nodes": ["model.netsuite_project.prep_transaction_with_lines", "model.netsuite_project.prep_delta_records", "seed.netsuite_project.deleted_records"]}, "compiled_path": "target/compiled/netsuite_project/models/dwh/transaction_with_line.sql", "compiled": true, "compiled_code": "\n\nSELECT * FROM \"netsuite\".\"prod_prp\".\"prep_transaction_with_lines\"\n\n\n-- depends_on: \"netsuite\".\"prod_prp\".\"prep_delta_records\"\n\n    WHERE transaction_nsid IN\n    ( \n        SELECT \n            transaction_nsid \n        FROM \"netsuite\".\"prod_prp\".\"prep_delta_records\"  \n        WHERE \n            CAST ( transaction_global_last_modified_date AS DATE ) >=\n                \n                GREATEST (\n                      ( SELECT MAX ( CAST ( incremental_date.transaction_last_modified_date AS DATE ) ) FROM \"netsuite\".\"prod_dwh\".\"transaction_with_line\" as incremental_date )\n                    , ( SELECT MAX ( CAST ( incremental_date.transaction_line_last_modified_date AS DATE ) ) FROM \"netsuite\".\"prod_dwh\".\"transaction_with_line\" as incremental_date )\n                )\n    )           \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.historized_transaction_with_line": {"database": "netsuite", "schema": "prod_dwh", "name": "historized_transaction_with_line", "resource_type": "model", "package_name": "netsuite_project", "path": "dwh/historized_transaction_with_line.sql", "original_file_path": "models/dwh/historized_transaction_with_line.sql", "unique_id": "model.netsuite_project.historized_transaction_with_line", "fqn": ["netsuite_project", "dwh", "historized_transaction_with_line"], "alias": "historized_transaction_with_line", "checksum": {"name": "sha256", "checksum": "d01a451938c52d30425800110166914b5cd6ac0f576ec6a23b9cd697747ed245"}, "config": {"enabled": true, "alias": null, "schema": "dwh", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "append", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table contains a snapshot of the transactions from NetSuite. For performance and storage efficiency reasons, the snapshot of a subset of all the data is taken once a month. The snapshot is taken automatically if no data was snapshotted in the previous month.", "columns": {"dbt_functional_snapshot_date": {"name": "dbt_functional_snapshot_date", "description": "end-of-month snapshot date from a business perspective", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_load_datetime": {"name": "dbt_load_datetime", "description": "actual snapshot date from a technical perspective", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_nsid": {"name": "transaction_nsid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_line_nsid": {"name": "transaction_line_nsid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/dwh/schema.yml", "build_path": null, "unrendered_config": {"schema": "dwh", "full_refresh": false, "materialized": "incremental", "on_schema_change": "append_new_columns", "incremental_strategy": "append"}, "created_at": 1728687173.8781452, "relation_name": "\"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\"", "raw_code": "{{\n    config (\n        full_refresh            = false\n        , materialized          = 'incremental'    \n        , on_schema_change      = 'append_new_columns'\n        , incremental_strategy  = 'append'\n    )\n}}\n\nSELECT\n    {# Previous incremental logging information is not relevant to keep for the snapshotting - i.e. load times, run id #}\n    {{ dbt_utils.star(from=ref('transaction_with_line'), except=[var(\"dbt_run_id_col_name\"), var(\"dbt_load_datetime_col_name\")]) }}\n    , {{ column_dbt_previous_month() }} AS {{ var(\"dbt_snapshot_col_name\") }}     \n    , {{ column_dbt_load_datetime() }}  AS {{ var(\"dbt_load_datetime_col_name\") }}\n    , '{{ var(\"dbt_run_id\") }}'         AS {{ var(\"dbt_run_id_col_name\") }}         \nFROM {{ ref('transaction_with_line') }} t\n\n{# To limite data volume, only snapshot the following scope #}\nWHERE t.transaction_type IN ( '{{ var(\"transaction_snapshot_type\") | join(\"', '\") }}' )\n\n{% if is_incremental() %}\n    {# Checks if a snapshot has been made #}\n    AND {{ column_dbt_previous_month() }} > ( SELECT MAX ( incremental_date.{{ var(\"dbt_snapshot_col_name\") }} ) FROM {{ this }} as incremental_date )\n{% endif %}", "language": "sql", "refs": [{"name": "transaction_with_line", "package": null, "version": null}, {"name": "transaction_with_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.netsuite_project.column_dbt_previous_month", "macro.netsuite_project.column_dbt_load_datetime", "macro.dbt.is_incremental"], "nodes": ["model.netsuite_project.transaction_with_line"]}, "compiled_path": "target/compiled/netsuite_project/models/dwh/historized_transaction_with_line.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    \n    \"transaction_nsid\",\n  \"transaction_line_nsid\",\n  \"transaction_last_modified_date\",\n  \"transaction_line_last_modified_date\",\n  \"transaction_type\",\n  \"transaction_number\",\n  \"transaction_status\",\n  \"transaction_date\",\n  \"expected_delivery_date\",\n  \"foreign_amount\",\n  \"foreign_currency\",\n  \"quantity\",\n  \"bu_rate\",\n  \"bu_amount\",\n  \"fk_item_nsid\",\n  \"fk_bu_nsid\",\n  \"fk_customer_nsid\"\n    , \n    EOMONTH('2024-10-12', -1)\n AS dbt_functional_snapshot_date     \n    , \n    CAST('2024-10-12 00:52:50' AS DATETIME2)\n  AS dbt_load_datetime\n    , 'fe03569b-9092-4ee9-bcdf-f2c8458e5cd4'         AS dbt_run_id         \nFROM \"netsuite\".\"prod_dwh\".\"transaction_with_line\" t\n\n\nWHERE t.transaction_type IN ( 'Opportunity', 'Invoice', 'Sales Order' )\n\n\n    \n    AND \n    EOMONTH('2024-10-12', -1)\n > ( SELECT MAX ( incremental_date.dbt_functional_snapshot_date ) FROM \"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\" as incremental_date )\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.dataset_sales_pipeline_monitoring_rls": {"database": "netsuite", "schema": "prod_ds", "name": "dataset_sales_pipeline_monitoring_rls", "resource_type": "model", "package_name": "netsuite_project", "path": "ds/dataset_sales_pipeline_monitoring_rls.sql", "original_file_path": "models/ds/dataset_sales_pipeline_monitoring_rls.sql", "unique_id": "model.netsuite_project.dataset_sales_pipeline_monitoring_rls", "fqn": ["netsuite_project", "ds", "dataset_sales_pipeline_monitoring_rls"], "alias": "dataset_sales_pipeline_monitoring_rls", "checksum": {"name": "sha256", "checksum": "c925b459e4e75a5ab8271f09a968141dc8e62ffd588b584827f8a0a400124d08"}, "config": {"enabled": true, "alias": null, "schema": "ds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "ds", "materialized": "view"}, "created_at": 1728687172.9203699, "relation_name": "\"netsuite\".\"prod_ds\".\"dataset_sales_pipeline_monitoring_rls\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\n-- depends_on: {{ ref('prep_rls_normalize') }}\n{{ model_generate_dataset_rls(ref(\"dataset_sales_pipeline_monitoring\"), \"customer_bu_item\") }}", "language": "sql", "refs": [{"name": "prep_rls_normalize", "package": null, "version": null}, {"name": "dataset_sales_pipeline_monitoring", "package": null, "version": null}, {"name": "prep_rls_normalize", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_project.model_generate_dataset_rls"], "nodes": ["model.netsuite_project.prep_rls_normalize", "model.netsuite_project.dataset_sales_pipeline_monitoring"]}, "compiled_path": "target/compiled/netsuite_project/models/ds/dataset_sales_pipeline_monitoring_rls.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: \"netsuite\".\"prod_prp\".\"prep_rls_normalize\"\n\n\n\n\n\n\n\n    \n        SELECT\n            ds.*,\n            rls.user_email\n        FROM \"netsuite\".\"prod_ds\".\"dataset_sales_pipeline_monitoring\" ds\n        LEFT JOIN \"netsuite\".\"prod_prp\".\"prep_rls_normalize\" rls\n            ON  \n        (ds.live_customer_name = rls.authorized_customer_name OR rls.authorized_customer_name = 'All')\n        AND (ds.live_bu_code = rls.authorized_bu_code OR rls.authorized_bu_code = 'All')\n        AND (ds.live_item_type = rls.authorized_item_type OR rls.authorized_item_type = 'All')\n    \n        WHERE rls.row_id = 1\n         UNION \n    \n        SELECT\n            ds.*,\n            rls.user_email\n        FROM \"netsuite\".\"prod_ds\".\"dataset_sales_pipeline_monitoring\" ds\n        LEFT JOIN \"netsuite\".\"prod_prp\".\"prep_rls_normalize\" rls\n            ON  \n        (ds.live_customer_name = rls.authorized_customer_name OR rls.authorized_customer_name = 'All')\n        AND (ds.live_bu_code = rls.authorized_bu_code OR rls.authorized_bu_code = 'All')\n        AND (ds.live_item_type = rls.authorized_item_type OR rls.authorized_item_type = 'All')\n    \n        WHERE rls.row_id = 2\n        \n    \n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.dataset_sales_pipeline_monitoring": {"database": "netsuite", "schema": "prod_ds", "name": "dataset_sales_pipeline_monitoring", "resource_type": "model", "package_name": "netsuite_project", "path": "ds/dataset_sales_pipeline_monitoring.sql", "original_file_path": "models/ds/dataset_sales_pipeline_monitoring.sql", "unique_id": "model.netsuite_project.dataset_sales_pipeline_monitoring", "fqn": ["netsuite_project", "ds", "dataset_sales_pipeline_monitoring"], "alias": "dataset_sales_pipeline_monitoring", "checksum": {"name": "sha256", "checksum": "1e954039085eabe2e4c7e154a074877b96a52b8231a21d4a552a5a27c6cc5eb7"}, "config": {"enabled": true, "alias": null, "schema": "ds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This dataset contains the pipeline information as described previously + the budget information - which is used as a performance objective.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/ds/schema.yml", "build_path": null, "unrendered_config": {"schema": "ds", "materialized": "view"}, "created_at": 1728687173.9225652, "relation_name": "\"netsuite\".\"prod_ds\".\"dataset_sales_pipeline_monitoring\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\nWITH unioned_data AS (\n    {{ dbt_utils.union_relations (\n        relations = [\n            ref('dataset_sales_pipeline'),\n            ref('prep_budget_for_union')\n        ],\n        exclude=[\"_dbt_source_relation\"]\n    ) }}\n)\n\n{# Tableau does not support a mix of NULL and non-NULL values when aggregating - so we replace all blanks (created by the UNION) with 0 #}\n{%- set sales_columns = adapter.get_columns_in_relation(ref('dataset_sales_pipeline')) | map(attribute='name') | list -%}\n{%- set numerical_columns_sales = list_numerical_columns('dataset_sales_pipeline') -%}\n{%- set budget_columns = adapter.get_columns_in_relation(ref('prep_budget_for_union')) | map(attribute='name') | list -%}\n\n{%- set combined_columns = sales_columns + budget_columns -%}\n{%- set unique_columns = combined_columns | unique -%}\n\nSELECT\n    {% for column in unique_columns %}\n        {%- if column in numerical_columns_sales %}\n            COALESCE({{ column }}, 0) as {{ column }}\n        {%- else %}\n            {{ column }}\n        {%- endif -%}\n        {%- if not loop.last -%}, {%- endif -%}\n    {% endfor %}\nFROM unioned_data", "language": "sql", "refs": [{"name": "dataset_sales_pipeline", "package": null, "version": null}, {"name": "prep_budget_for_union", "package": null, "version": null}, {"name": "dataset_sales_pipeline", "package": null, "version": null}, {"name": "dataset_sales_pipeline", "package": null, "version": null}, {"name": "prep_budget_for_union", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.netsuite_project.list_numerical_columns"], "nodes": ["model.netsuite_project.dataset_sales_pipeline", "model.netsuite_project.prep_budget_for_union"]}, "compiled_path": "target/compiled/netsuite_project/models/ds/dataset_sales_pipeline_monitoring.sql", "compiled": true, "compiled_code": "\n\nWITH unioned_data AS (\n    \n\n        (\n            select\n                cast('\"netsuite\".\"prod_ds\".\"dataset_sales_pipeline\"' as VARCHAR(8000)) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_nsid\" as int) as \"transaction_nsid\" ,\n                    cast(\"transaction_line_nsid\" as int) as \"transaction_line_nsid\" ,\n                    cast(\"transaction_last_modified_date\" as varchar(16)) as \"transaction_last_modified_date\" ,\n                    cast(\"transaction_line_last_modified_date\" as varchar(16)) as \"transaction_line_last_modified_date\" ,\n                    cast(\"transaction_type\" as varchar(16)) as \"transaction_type\" ,\n                    cast(\"transaction_number\" as varchar(16)) as \"transaction_number\" ,\n                    cast(\"transaction_status\" as varchar(16)) as \"transaction_status\" ,\n                    cast(\"transaction_date\" as datetime2) as \"transaction_date\" ,\n                    cast(\"expected_delivery_date\" as varchar(16)) as \"expected_delivery_date\" ,\n                    cast(\"foreign_amount\" as int) as \"foreign_amount\" ,\n                    cast(\"foreign_currency\" as varchar(16)) as \"foreign_currency\" ,\n                    cast(\"quantity\" as int) as \"quantity\" ,\n                    cast(\"bu_rate\" as float) as \"bu_rate\" ,\n                    cast(\"bu_amount\" as float) as \"bu_amount\" ,\n                    cast(\"fk_item_nsid\" as varchar(50)) as \"fk_item_nsid\" ,\n                    cast(\"fk_bu_nsid\" as varchar(50)) as \"fk_bu_nsid\" ,\n                    cast(\"fk_customer_nsid\" as varchar(50)) as \"fk_customer_nsid\" ,\n                    cast(\"dbt_load_datetime\" as datetime2) as \"dbt_load_datetime\" ,\n                    cast(\"dbt_run_id\" as varchar(36)) as \"dbt_run_id\" ,\n                    cast(\"dbt_functional_snapshot_date\" as datetime2) as \"dbt_functional_snapshot_date\" ,\n                    cast(\"snapshot_date_order\" as bigint) as \"snapshot_date_order\" ,\n                    cast(\"hist_bu_code\" as varchar(16)) as \"hist_bu_code\" ,\n                    cast(\"hist_bu_country_code\" as varchar(16)) as \"hist_bu_country_code\" ,\n                    cast(\"hist_bu_currency\" as varchar(16)) as \"hist_bu_currency\" ,\n                    cast(\"hist_bu_legal_name\" as varchar(66)) as \"hist_bu_legal_name\" ,\n                    cast(\"hist_bu_commercial_group\" as varchar(16)) as \"hist_bu_commercial_group\" ,\n                    cast(\"live_bu_code\" as varchar(16)) as \"live_bu_code\" ,\n                    cast(\"live_bu_country_code\" as varchar(16)) as \"live_bu_country_code\" ,\n                    cast(\"live_bu_currency\" as varchar(16)) as \"live_bu_currency\" ,\n                    cast(\"live_bu_legal_name\" as varchar(66)) as \"live_bu_legal_name\" ,\n                    cast(\"live_bu_commercial_group\" as varchar(16)) as \"live_bu_commercial_group\" ,\n                    cast(\"pk_bu_nsid\" as varchar(50)) as \"pk_bu_nsid\" ,\n                    cast(\"bu_nsid\" as int) as \"bu_nsid\" ,\n                    cast(\"fx_rate_original_to_usd\" as float) as \"fx_rate_original_to_usd\" ,\n                    cast(\"fx_rate_original_to_dynamic\" as float) as \"fx_rate_original_to_dynamic\" ,\n                    cast(\"dynamic_target_currency\" as varchar(3)) as \"dynamic_target_currency\" ,\n                    cast(\"usd_amount\" as float) as \"usd_amount\" ,\n                    cast(\"dynamic_amount\" as float) as \"dynamic_amount\" ,\n                    cast(\"calculation_date\" as date) as \"calculation_date\" ,\n                    cast(\"total_bu_amount_prev_2y_fiscal_year\" as float) as \"total_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(\"total_bu_amount_prev_1y_fiscal_year\" as float) as \"total_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(\"total_bu_amount_current_fiscal_year\" as float) as \"total_bu_amount_current_fiscal_year\" ,\n                    cast(\"total_bu_amount_next_1y_fiscal_year\" as float) as \"total_bu_amount_next_1y_fiscal_year\" ,\n                    cast(\"total_usd_amount_prev_2y_fiscal_year\" as float) as \"total_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(\"total_usd_amount_prev_1y_fiscal_year\" as float) as \"total_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(\"total_usd_amount_current_fiscal_year\" as float) as \"total_usd_amount_current_fiscal_year\" ,\n                    cast(\"total_usd_amount_next_1y_fiscal_year\" as float) as \"total_usd_amount_next_1y_fiscal_year\" ,\n                    cast(\"total_dynamic_amount_prev_2y_fiscal_year\" as float) as \"total_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(\"total_dynamic_amount_prev_1y_fiscal_year\" as float) as \"total_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(\"total_dynamic_amount_current_fiscal_year\" as float) as \"total_dynamic_amount_current_fiscal_year\" ,\n                    cast(\"total_dynamic_amount_next_1y_fiscal_year\" as float) as \"total_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(\"opportunity_bu_amount_prev_2y_fiscal_year\" as float) as \"opportunity_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(\"opportunity_bu_amount_prev_1y_fiscal_year\" as float) as \"opportunity_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(\"opportunity_bu_amount_current_fiscal_year\" as float) as \"opportunity_bu_amount_current_fiscal_year\" ,\n                    cast(\"opportunity_bu_amount_next_1y_fiscal_year\" as float) as \"opportunity_bu_amount_next_1y_fiscal_year\" ,\n                    cast(\"invoice_bu_amount_prev_2y_fiscal_year\" as float) as \"invoice_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(\"invoice_bu_amount_prev_1y_fiscal_year\" as float) as \"invoice_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(\"invoice_bu_amount_current_fiscal_year\" as float) as \"invoice_bu_amount_current_fiscal_year\" ,\n                    cast(\"invoice_bu_amount_next_1y_fiscal_year\" as float) as \"invoice_bu_amount_next_1y_fiscal_year\" ,\n                    cast(\"sales_order_bu_amount_prev_2y_fiscal_year\" as float) as \"sales_order_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(\"sales_order_bu_amount_prev_1y_fiscal_year\" as float) as \"sales_order_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(\"sales_order_bu_amount_current_fiscal_year\" as float) as \"sales_order_bu_amount_current_fiscal_year\" ,\n                    cast(\"sales_order_bu_amount_next_1y_fiscal_year\" as float) as \"sales_order_bu_amount_next_1y_fiscal_year\" ,\n                    cast(\"opportunity_usd_amount_prev_2y_fiscal_year\" as float) as \"opportunity_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(\"opportunity_usd_amount_prev_1y_fiscal_year\" as float) as \"opportunity_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(\"opportunity_usd_amount_current_fiscal_year\" as float) as \"opportunity_usd_amount_current_fiscal_year\" ,\n                    cast(\"opportunity_usd_amount_next_1y_fiscal_year\" as float) as \"opportunity_usd_amount_next_1y_fiscal_year\" ,\n                    cast(\"invoice_usd_amount_prev_2y_fiscal_year\" as float) as \"invoice_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(\"invoice_usd_amount_prev_1y_fiscal_year\" as float) as \"invoice_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(\"invoice_usd_amount_current_fiscal_year\" as float) as \"invoice_usd_amount_current_fiscal_year\" ,\n                    cast(\"invoice_usd_amount_next_1y_fiscal_year\" as float) as \"invoice_usd_amount_next_1y_fiscal_year\" ,\n                    cast(\"sales_order_usd_amount_prev_2y_fiscal_year\" as float) as \"sales_order_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(\"sales_order_usd_amount_prev_1y_fiscal_year\" as float) as \"sales_order_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(\"sales_order_usd_amount_current_fiscal_year\" as float) as \"sales_order_usd_amount_current_fiscal_year\" ,\n                    cast(\"sales_order_usd_amount_next_1y_fiscal_year\" as float) as \"sales_order_usd_amount_next_1y_fiscal_year\" ,\n                    cast(\"opportunity_dynamic_amount_prev_2y_fiscal_year\" as float) as \"opportunity_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(\"opportunity_dynamic_amount_prev_1y_fiscal_year\" as float) as \"opportunity_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(\"opportunity_dynamic_amount_current_fiscal_year\" as float) as \"opportunity_dynamic_amount_current_fiscal_year\" ,\n                    cast(\"opportunity_dynamic_amount_next_1y_fiscal_year\" as float) as \"opportunity_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(\"invoice_dynamic_amount_prev_2y_fiscal_year\" as float) as \"invoice_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(\"invoice_dynamic_amount_prev_1y_fiscal_year\" as float) as \"invoice_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(\"invoice_dynamic_amount_current_fiscal_year\" as float) as \"invoice_dynamic_amount_current_fiscal_year\" ,\n                    cast(\"invoice_dynamic_amount_next_1y_fiscal_year\" as float) as \"invoice_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(\"sales_order_dynamic_amount_prev_2y_fiscal_year\" as float) as \"sales_order_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(\"sales_order_dynamic_amount_prev_1y_fiscal_year\" as float) as \"sales_order_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(\"sales_order_dynamic_amount_current_fiscal_year\" as float) as \"sales_order_dynamic_amount_current_fiscal_year\" ,\n                    cast(\"sales_order_dynamic_amount_next_1y_fiscal_year\" as float) as \"sales_order_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(\"hist_item_name\" as varchar(21)) as \"hist_item_name\" ,\n                    cast(\"hist_item_code\" as varchar(16)) as \"hist_item_code\" ,\n                    cast(\"hist_item_type\" as varchar(16)) as \"hist_item_type\" ,\n                    cast(\"hist_project_code\" as varchar(16)) as \"hist_project_code\" ,\n                    cast(\"hist_item_category\" as varchar(19)) as \"hist_item_category\" ,\n                    cast(\"hist_item_sub_category\" as varchar(21)) as \"hist_item_sub_category\" ,\n                    cast(\"hist_item_pattern\" as varchar(16)) as \"hist_item_pattern\" ,\n                    cast(\"live_item_name\" as varchar(21)) as \"live_item_name\" ,\n                    cast(\"live_item_code\" as varchar(16)) as \"live_item_code\" ,\n                    cast(\"live_item_type\" as varchar(16)) as \"live_item_type\" ,\n                    cast(\"live_project_code\" as varchar(16)) as \"live_project_code\" ,\n                    cast(\"live_item_category\" as varchar(19)) as \"live_item_category\" ,\n                    cast(\"live_item_sub_category\" as varchar(21)) as \"live_item_sub_category\" ,\n                    cast(\"live_item_pattern\" as varchar(16)) as \"live_item_pattern\" ,\n                    cast(\"pk_item_nsid\" as varchar(50)) as \"pk_item_nsid\" ,\n                    cast(\"item_nsid\" as int) as \"item_nsid\" ,\n                    cast(\"hist_customer_name\" as varchar(31)) as \"hist_customer_name\" ,\n                    cast(\"hist_customer_tier\" as varchar(16)) as \"hist_customer_tier\" ,\n                    cast(\"live_customer_name\" as varchar(31)) as \"live_customer_name\" ,\n                    cast(\"live_customer_tier\" as varchar(16)) as \"live_customer_tier\" ,\n                    cast(\"pk_customer_nsid\" as varchar(50)) as \"pk_customer_nsid\" ,\n                    cast(\"customer_nsid\" as int) as \"customer_nsid\" ,\n                    cast(null as int) as \"budget_year\" ,\n                    cast(null as varchar(16)) as \"budget_version\" ,\n                    cast(null as float) as \"budget_sales_amount_bu_currency\" ,\n                    cast(null as float) as \"budget_sales_amount_usd_currency\" ,\n                    cast(null as float) as \"budget_sales_amount_dynamic_currency\" \n\n            from \"netsuite\".\"prod_ds\".\"dataset_sales_pipeline\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"netsuite\".\"prod_prp\".\"prep_budget_for_union\"' as VARCHAR(8000)) as _dbt_source_relation,\n\n                \n                    cast(null as int) as \"transaction_nsid\" ,\n                    cast(null as int) as \"transaction_line_nsid\" ,\n                    cast(null as varchar(16)) as \"transaction_last_modified_date\" ,\n                    cast(null as varchar(16)) as \"transaction_line_last_modified_date\" ,\n                    cast(\"transaction_type\" as varchar(16)) as \"transaction_type\" ,\n                    cast(null as varchar(16)) as \"transaction_number\" ,\n                    cast(null as varchar(16)) as \"transaction_status\" ,\n                    cast(null as datetime2) as \"transaction_date\" ,\n                    cast(null as varchar(16)) as \"expected_delivery_date\" ,\n                    cast(null as int) as \"foreign_amount\" ,\n                    cast(null as varchar(16)) as \"foreign_currency\" ,\n                    cast(null as int) as \"quantity\" ,\n                    cast(null as float) as \"bu_rate\" ,\n                    cast(null as float) as \"bu_amount\" ,\n                    cast(null as varchar(50)) as \"fk_item_nsid\" ,\n                    cast(null as varchar(50)) as \"fk_bu_nsid\" ,\n                    cast(null as varchar(50)) as \"fk_customer_nsid\" ,\n                    cast(null as datetime2) as \"dbt_load_datetime\" ,\n                    cast(null as varchar(36)) as \"dbt_run_id\" ,\n                    cast(null as datetime2) as \"dbt_functional_snapshot_date\" ,\n                    cast(null as bigint) as \"snapshot_date_order\" ,\n                    cast(\"hist_bu_code\" as varchar(16)) as \"hist_bu_code\" ,\n                    cast(\"hist_bu_country_code\" as varchar(16)) as \"hist_bu_country_code\" ,\n                    cast(\"hist_bu_currency\" as varchar(16)) as \"hist_bu_currency\" ,\n                    cast(\"hist_bu_legal_name\" as varchar(66)) as \"hist_bu_legal_name\" ,\n                    cast(\"hist_bu_commercial_group\" as varchar(16)) as \"hist_bu_commercial_group\" ,\n                    cast(\"live_bu_code\" as varchar(16)) as \"live_bu_code\" ,\n                    cast(\"live_bu_country_code\" as varchar(16)) as \"live_bu_country_code\" ,\n                    cast(\"live_bu_currency\" as varchar(16)) as \"live_bu_currency\" ,\n                    cast(\"live_bu_legal_name\" as varchar(66)) as \"live_bu_legal_name\" ,\n                    cast(\"live_bu_commercial_group\" as varchar(16)) as \"live_bu_commercial_group\" ,\n                    cast(\"pk_bu_nsid\" as varchar(50)) as \"pk_bu_nsid\" ,\n                    cast(\"bu_nsid\" as int) as \"bu_nsid\" ,\n                    cast(\"fx_rate_original_to_usd\" as float) as \"fx_rate_original_to_usd\" ,\n                    cast(\"fx_rate_original_to_dynamic\" as float) as \"fx_rate_original_to_dynamic\" ,\n                    cast(\"dynamic_target_currency\" as varchar(3)) as \"dynamic_target_currency\" ,\n                    cast(null as float) as \"usd_amount\" ,\n                    cast(null as float) as \"dynamic_amount\" ,\n                    cast(\"calculation_date\" as date) as \"calculation_date\" ,\n                    cast(null as float) as \"total_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"total_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"total_bu_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"total_bu_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"total_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"total_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"total_usd_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"total_usd_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"total_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"total_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"total_dynamic_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"total_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_bu_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_bu_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_bu_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"invoice_bu_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_bu_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_bu_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_bu_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_bu_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_usd_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_usd_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_usd_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"invoice_usd_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_usd_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_usd_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_usd_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_usd_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_dynamic_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"opportunity_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"invoice_dynamic_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"invoice_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_dynamic_amount_prev_2y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_dynamic_amount_prev_1y_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_dynamic_amount_current_fiscal_year\" ,\n                    cast(null as float) as \"sales_order_dynamic_amount_next_1y_fiscal_year\" ,\n                    cast(null as varchar(21)) as \"hist_item_name\" ,\n                    cast(null as varchar(16)) as \"hist_item_code\" ,\n                    cast(null as varchar(16)) as \"hist_item_type\" ,\n                    cast(null as varchar(16)) as \"hist_project_code\" ,\n                    cast(null as varchar(19)) as \"hist_item_category\" ,\n                    cast(null as varchar(21)) as \"hist_item_sub_category\" ,\n                    cast(null as varchar(16)) as \"hist_item_pattern\" ,\n                    cast(null as varchar(21)) as \"live_item_name\" ,\n                    cast(null as varchar(16)) as \"live_item_code\" ,\n                    cast(null as varchar(16)) as \"live_item_type\" ,\n                    cast(null as varchar(16)) as \"live_project_code\" ,\n                    cast(null as varchar(19)) as \"live_item_category\" ,\n                    cast(null as varchar(21)) as \"live_item_sub_category\" ,\n                    cast(null as varchar(16)) as \"live_item_pattern\" ,\n                    cast(null as varchar(50)) as \"pk_item_nsid\" ,\n                    cast(null as int) as \"item_nsid\" ,\n                    cast(\"hist_customer_name\" as varchar(31)) as \"hist_customer_name\" ,\n                    cast(null as varchar(16)) as \"hist_customer_tier\" ,\n                    cast(\"live_customer_name\" as varchar(31)) as \"live_customer_name\" ,\n                    cast(null as varchar(16)) as \"live_customer_tier\" ,\n                    cast(null as varchar(50)) as \"pk_customer_nsid\" ,\n                    cast(null as int) as \"customer_nsid\" ,\n                    cast(\"budget_year\" as int) as \"budget_year\" ,\n                    cast(\"budget_version\" as varchar(16)) as \"budget_version\" ,\n                    cast(\"budget_sales_amount_bu_currency\" as float) as \"budget_sales_amount_bu_currency\" ,\n                    cast(\"budget_sales_amount_usd_currency\" as float) as \"budget_sales_amount_usd_currency\" ,\n                    cast(\"budget_sales_amount_dynamic_currency\" as float) as \"budget_sales_amount_dynamic_currency\" \n\n            from \"netsuite\".\"prod_prp\".\"prep_budget_for_union\"\n\n            \n        )\n\n        \n)\n\nSELECT\n    \n            _dbt_source_relation,\n            COALESCE(transaction_nsid, 0) as transaction_nsid,\n            COALESCE(transaction_line_nsid, 0) as transaction_line_nsid,\n            transaction_last_modified_date,\n            transaction_line_last_modified_date,\n            transaction_type,\n            transaction_number,\n            transaction_status,\n            transaction_date,\n            expected_delivery_date,\n            COALESCE(foreign_amount, 0) as foreign_amount,\n            foreign_currency,\n            COALESCE(quantity, 0) as quantity,\n            COALESCE(bu_rate, 0) as bu_rate,\n            COALESCE(bu_amount, 0) as bu_amount,\n            fk_item_nsid,\n            fk_bu_nsid,\n            fk_customer_nsid,\n            dbt_load_datetime,\n            dbt_run_id,\n            dbt_functional_snapshot_date,\n            COALESCE(snapshot_date_order, 0) as snapshot_date_order,\n            hist_bu_code,\n            hist_bu_country_code,\n            hist_bu_currency,\n            hist_bu_legal_name,\n            hist_bu_commercial_group,\n            live_bu_code,\n            live_bu_country_code,\n            live_bu_currency,\n            live_bu_legal_name,\n            live_bu_commercial_group,\n            pk_bu_nsid,\n            COALESCE(bu_nsid, 0) as bu_nsid,\n            COALESCE(fx_rate_original_to_usd, 0) as fx_rate_original_to_usd,\n            COALESCE(fx_rate_original_to_dynamic, 0) as fx_rate_original_to_dynamic,\n            dynamic_target_currency,\n            COALESCE(usd_amount, 0) as usd_amount,\n            COALESCE(dynamic_amount, 0) as dynamic_amount,\n            calculation_date,\n            COALESCE(total_bu_amount_prev_2y_fiscal_year, 0) as total_bu_amount_prev_2y_fiscal_year,\n            COALESCE(total_bu_amount_prev_1y_fiscal_year, 0) as total_bu_amount_prev_1y_fiscal_year,\n            COALESCE(total_bu_amount_current_fiscal_year, 0) as total_bu_amount_current_fiscal_year,\n            COALESCE(total_bu_amount_next_1y_fiscal_year, 0) as total_bu_amount_next_1y_fiscal_year,\n            COALESCE(total_usd_amount_prev_2y_fiscal_year, 0) as total_usd_amount_prev_2y_fiscal_year,\n            COALESCE(total_usd_amount_prev_1y_fiscal_year, 0) as total_usd_amount_prev_1y_fiscal_year,\n            COALESCE(total_usd_amount_current_fiscal_year, 0) as total_usd_amount_current_fiscal_year,\n            COALESCE(total_usd_amount_next_1y_fiscal_year, 0) as total_usd_amount_next_1y_fiscal_year,\n            COALESCE(total_dynamic_amount_prev_2y_fiscal_year, 0) as total_dynamic_amount_prev_2y_fiscal_year,\n            COALESCE(total_dynamic_amount_prev_1y_fiscal_year, 0) as total_dynamic_amount_prev_1y_fiscal_year,\n            COALESCE(total_dynamic_amount_current_fiscal_year, 0) as total_dynamic_amount_current_fiscal_year,\n            COALESCE(total_dynamic_amount_next_1y_fiscal_year, 0) as total_dynamic_amount_next_1y_fiscal_year,\n            COALESCE(opportunity_bu_amount_prev_2y_fiscal_year, 0) as opportunity_bu_amount_prev_2y_fiscal_year,\n            COALESCE(opportunity_bu_amount_prev_1y_fiscal_year, 0) as opportunity_bu_amount_prev_1y_fiscal_year,\n            COALESCE(opportunity_bu_amount_current_fiscal_year, 0) as opportunity_bu_amount_current_fiscal_year,\n            COALESCE(opportunity_bu_amount_next_1y_fiscal_year, 0) as opportunity_bu_amount_next_1y_fiscal_year,\n            COALESCE(invoice_bu_amount_prev_2y_fiscal_year, 0) as invoice_bu_amount_prev_2y_fiscal_year,\n            COALESCE(invoice_bu_amount_prev_1y_fiscal_year, 0) as invoice_bu_amount_prev_1y_fiscal_year,\n            COALESCE(invoice_bu_amount_current_fiscal_year, 0) as invoice_bu_amount_current_fiscal_year,\n            COALESCE(invoice_bu_amount_next_1y_fiscal_year, 0) as invoice_bu_amount_next_1y_fiscal_year,\n            COALESCE(sales_order_bu_amount_prev_2y_fiscal_year, 0) as sales_order_bu_amount_prev_2y_fiscal_year,\n            COALESCE(sales_order_bu_amount_prev_1y_fiscal_year, 0) as sales_order_bu_amount_prev_1y_fiscal_year,\n            COALESCE(sales_order_bu_amount_current_fiscal_year, 0) as sales_order_bu_amount_current_fiscal_year,\n            COALESCE(sales_order_bu_amount_next_1y_fiscal_year, 0) as sales_order_bu_amount_next_1y_fiscal_year,\n            COALESCE(opportunity_usd_amount_prev_2y_fiscal_year, 0) as opportunity_usd_amount_prev_2y_fiscal_year,\n            COALESCE(opportunity_usd_amount_prev_1y_fiscal_year, 0) as opportunity_usd_amount_prev_1y_fiscal_year,\n            COALESCE(opportunity_usd_amount_current_fiscal_year, 0) as opportunity_usd_amount_current_fiscal_year,\n            COALESCE(opportunity_usd_amount_next_1y_fiscal_year, 0) as opportunity_usd_amount_next_1y_fiscal_year,\n            COALESCE(invoice_usd_amount_prev_2y_fiscal_year, 0) as invoice_usd_amount_prev_2y_fiscal_year,\n            COALESCE(invoice_usd_amount_prev_1y_fiscal_year, 0) as invoice_usd_amount_prev_1y_fiscal_year,\n            COALESCE(invoice_usd_amount_current_fiscal_year, 0) as invoice_usd_amount_current_fiscal_year,\n            COALESCE(invoice_usd_amount_next_1y_fiscal_year, 0) as invoice_usd_amount_next_1y_fiscal_year,\n            COALESCE(sales_order_usd_amount_prev_2y_fiscal_year, 0) as sales_order_usd_amount_prev_2y_fiscal_year,\n            COALESCE(sales_order_usd_amount_prev_1y_fiscal_year, 0) as sales_order_usd_amount_prev_1y_fiscal_year,\n            COALESCE(sales_order_usd_amount_current_fiscal_year, 0) as sales_order_usd_amount_current_fiscal_year,\n            COALESCE(sales_order_usd_amount_next_1y_fiscal_year, 0) as sales_order_usd_amount_next_1y_fiscal_year,\n            COALESCE(opportunity_dynamic_amount_prev_2y_fiscal_year, 0) as opportunity_dynamic_amount_prev_2y_fiscal_year,\n            COALESCE(opportunity_dynamic_amount_prev_1y_fiscal_year, 0) as opportunity_dynamic_amount_prev_1y_fiscal_year,\n            COALESCE(opportunity_dynamic_amount_current_fiscal_year, 0) as opportunity_dynamic_amount_current_fiscal_year,\n            COALESCE(opportunity_dynamic_amount_next_1y_fiscal_year, 0) as opportunity_dynamic_amount_next_1y_fiscal_year,\n            COALESCE(invoice_dynamic_amount_prev_2y_fiscal_year, 0) as invoice_dynamic_amount_prev_2y_fiscal_year,\n            COALESCE(invoice_dynamic_amount_prev_1y_fiscal_year, 0) as invoice_dynamic_amount_prev_1y_fiscal_year,\n            COALESCE(invoice_dynamic_amount_current_fiscal_year, 0) as invoice_dynamic_amount_current_fiscal_year,\n            COALESCE(invoice_dynamic_amount_next_1y_fiscal_year, 0) as invoice_dynamic_amount_next_1y_fiscal_year,\n            COALESCE(sales_order_dynamic_amount_prev_2y_fiscal_year, 0) as sales_order_dynamic_amount_prev_2y_fiscal_year,\n            COALESCE(sales_order_dynamic_amount_prev_1y_fiscal_year, 0) as sales_order_dynamic_amount_prev_1y_fiscal_year,\n            COALESCE(sales_order_dynamic_amount_current_fiscal_year, 0) as sales_order_dynamic_amount_current_fiscal_year,\n            COALESCE(sales_order_dynamic_amount_next_1y_fiscal_year, 0) as sales_order_dynamic_amount_next_1y_fiscal_year,\n            hist_item_name,\n            hist_item_code,\n            hist_item_type,\n            hist_project_code,\n            hist_item_category,\n            hist_item_sub_category,\n            hist_item_pattern,\n            live_item_name,\n            live_item_code,\n            live_item_type,\n            live_project_code,\n            live_item_category,\n            live_item_sub_category,\n            live_item_pattern,\n            pk_item_nsid,\n            COALESCE(item_nsid, 0) as item_nsid,\n            hist_customer_name,\n            hist_customer_tier,\n            live_customer_name,\n            live_customer_tier,\n            pk_customer_nsid,\n            COALESCE(customer_nsid, 0) as customer_nsid,\n            budget_year,\n            budget_version,\n            budget_sales_amount_bu_currency,\n            budget_sales_amount_usd_currency,\n            budget_sales_amount_dynamic_currency\nFROM unioned_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.dataset_sales_pipeline": {"database": "netsuite", "schema": "prod_ds", "name": "dataset_sales_pipeline", "resource_type": "model", "package_name": "netsuite_project", "path": "ds/dataset_sales_pipeline.sql", "original_file_path": "models/ds/dataset_sales_pipeline.sql", "unique_id": "model.netsuite_project.dataset_sales_pipeline", "fqn": ["netsuite_project", "ds", "dataset_sales_pipeline"], "alias": "dataset_sales_pipeline", "checksum": {"name": "sha256", "checksum": "09222902580ccb8c1c17bcbf1a57ef2dea31f9f3c8859d8cc62f5c5b3e14dd19"}, "config": {"enabled": true, "alias": null, "schema": "ds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This dataset contains the pipeline information, which represent the total expected sales.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/ds/schema.yml", "build_path": null, "unrendered_config": {"schema": "ds", "materialized": "view"}, "created_at": 1728687173.9220438, "relation_name": "\"netsuite\".\"prod_ds\".\"dataset_sales_pipeline\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\nWITH cte_scope AS (\nSELECT \n    {{ dbt_utils.star(from=ref('fact_all_transactions_with_line')) }}\n    , CAST ( CASE WHEN t.transaction_type IN ('Opportunity', 'Sales Order') THEN t.expected_delivery_date ELSE t.transaction_date END AS DATE ) AS calculation_date\nFROM {{ ref(\"fact_all_transactions_with_line\") }} t \n{# Scope of the dataset #}\nWHERE t.transaction_type IN ( '{{ var(\"sales_scope_type\") | join(\"', '\") }}' )\nAND\n    ( \n        ( t.transaction_type NOT IN ('Opportunity', 'Sales Order') )\n        OR \n        ( t.transaction_type = 'Opportunity' AND t.transaction_status IN ( '{{ var(\"opportunity_open_scope\") | join(\"', '\") }}' ) )\n        OR\n        ( t.transaction_type = 'Sales Order' AND t.transaction_status IN ( '{{ var(\"sales_order_open_scope\") | join(\"', '\") }}' ) )\n    )\n)\n\n{% set currencies = ['bu_amount', 'usd_amount', 'dynamic_amount'] %}\n, cte_calculate AS (\nSELECT \n    t.*\n    {% for currency in currencies %}\n        , IIF(d_calc.is_prev_2y_fiscal_year = 1, {{ currency }}, 0) AS total_{{ currency }}_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1, {{ currency }}, 0) AS total_{{ currency }}_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1, {{ currency }}, 0) AS total_{{ currency }}_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1, {{ currency }}, 0) AS total_{{ currency }}_next_1y_fiscal_year\n    {% endfor %}\n    {% for currency in currencies %}\n        {% for type in var(\"sales_scope_type\") %}\n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = '{{ type }}', {{ currency }}, 0) AS {{ type | lower | replace(\" \", \"_\") }}_{{ currency }}_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = '{{ type }}', {{ currency }}, 0) AS {{ type | lower | replace(\" \", \"_\") }}_{{ currency }}_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = '{{ type }}', {{ currency }}, 0) AS {{ type | lower | replace(\" \", \"_\") }}_{{ currency }}_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = '{{ type }}', {{ currency }}, 0) AS {{ type | lower | replace(\" \", \"_\") }}_{{ currency }}_next_1y_fiscal_year\n        {% endfor %}\n    {% endfor %}\nFROM cte_scope t \nLEFT OUTER JOIN {{ ref(\"dim_date\") }} d_calc\n    ON d_calc.pk_date_standard = t.calculation_date \n)\n\nSELECT \n    t.*\n    , {{ dbt_utils.star(from=ref('dim_item')    , except = var(\"scd_excluded_col_name\") ) }}\n    , {{ dbt_utils.star(from=ref('dim_customer'), except = var(\"scd_excluded_col_name\") ) }}\nFROM cte_calculate t\nLEFT OUTER JOIN {{ ref(\"dim_customer\") }} cu\n    ON cu.pk_{{ var(\"customer_key\") }} = t.fk_{{ var(\"customer_key\") }}\n    AND t.transaction_date BETWEEN cu.scd_valid_from_fill_date AND cu.scd_valid_to_fill_date\nLEFT OUTER JOIN {{ ref(\"dim_item\") }} it\n    ON it.pk_{{ var(\"item_key\") }} = t.fk_{{ var(\"item_key\") }}\n    AND t.transaction_date BETWEEN it.scd_valid_from_fill_date AND it.scd_valid_to_fill_date", "language": "sql", "refs": [{"name": "fact_all_transactions_with_line", "package": null, "version": null}, {"name": "fact_all_transactions_with_line", "package": null, "version": null}, {"name": "dim_date", "package": null, "version": null}, {"name": "dim_item", "package": null, "version": null}, {"name": "dim_customer", "package": null, "version": null}, {"name": "dim_customer", "package": null, "version": null}, {"name": "dim_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.netsuite_project.fact_all_transactions_with_line", "model.netsuite_project.dim_date", "model.netsuite_project.dim_item", "model.netsuite_project.dim_customer"]}, "compiled_path": "target/compiled/netsuite_project/models/ds/dataset_sales_pipeline.sql", "compiled": true, "compiled_code": "\n\nWITH cte_scope AS (\nSELECT \n    \"_dbt_source_relation\",\n  \"transaction_nsid\",\n  \"transaction_line_nsid\",\n  \"transaction_last_modified_date\",\n  \"transaction_line_last_modified_date\",\n  \"transaction_type\",\n  \"transaction_number\",\n  \"transaction_status\",\n  \"transaction_date\",\n  \"expected_delivery_date\",\n  \"foreign_amount\",\n  \"foreign_currency\",\n  \"quantity\",\n  \"bu_rate\",\n  \"bu_amount\",\n  \"fk_item_nsid\",\n  \"fk_bu_nsid\",\n  \"fk_customer_nsid\",\n  \"dbt_load_datetime\",\n  \"dbt_run_id\",\n  \"dbt_functional_snapshot_date\",\n  \"snapshot_date_order\",\n  \"hist_bu_code\",\n  \"hist_bu_country_code\",\n  \"hist_bu_currency\",\n  \"hist_bu_legal_name\",\n  \"hist_bu_commercial_group\",\n  \"live_bu_code\",\n  \"live_bu_country_code\",\n  \"live_bu_currency\",\n  \"live_bu_legal_name\",\n  \"live_bu_commercial_group\",\n  \"pk_bu_nsid\",\n  \"bu_nsid\",\n  \"fx_rate_original_to_usd\",\n  \"fx_rate_original_to_dynamic\",\n  \"dynamic_target_currency\",\n  \"usd_amount\",\n  \"dynamic_amount\"\n    , CAST ( CASE WHEN t.transaction_type IN ('Opportunity', 'Sales Order') THEN t.expected_delivery_date ELSE t.transaction_date END AS DATE ) AS calculation_date\nFROM \"netsuite\".\"prod_bus\".\"fact_all_transactions_with_line\" t \n\nWHERE t.transaction_type IN ( 'Opportunity', 'Invoice', 'Sales Order' )\nAND\n    ( \n        ( t.transaction_type NOT IN ('Opportunity', 'Sales Order') )\n        OR \n        ( t.transaction_type = 'Opportunity' AND t.transaction_status IN ( 'Under Discussion', 'Ongoing' ) )\n        OR\n        ( t.transaction_type = 'Sales Order' AND t.transaction_status IN ( 'Under Discussion', 'Ongoing' ) )\n    )\n)\n\n\n, cte_calculate AS (\nSELECT \n    t.*\n    \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1, bu_amount, 0) AS total_bu_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1, bu_amount, 0) AS total_bu_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1, bu_amount, 0) AS total_bu_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1, bu_amount, 0) AS total_bu_amount_next_1y_fiscal_year\n    \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1, usd_amount, 0) AS total_usd_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1, usd_amount, 0) AS total_usd_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1, usd_amount, 0) AS total_usd_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1, usd_amount, 0) AS total_usd_amount_next_1y_fiscal_year\n    \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1, dynamic_amount, 0) AS total_dynamic_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1, dynamic_amount, 0) AS total_dynamic_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1, dynamic_amount, 0) AS total_dynamic_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1, dynamic_amount, 0) AS total_dynamic_amount_next_1y_fiscal_year\n    \n    \n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', bu_amount, 0) AS opportunity_bu_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', bu_amount, 0) AS opportunity_bu_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Opportunity', bu_amount, 0) AS opportunity_bu_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', bu_amount, 0) AS opportunity_bu_amount_next_1y_fiscal_year\n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Invoice', bu_amount, 0) AS invoice_bu_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Invoice', bu_amount, 0) AS invoice_bu_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Invoice', bu_amount, 0) AS invoice_bu_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Invoice', bu_amount, 0) AS invoice_bu_amount_next_1y_fiscal_year\n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', bu_amount, 0) AS sales_order_bu_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', bu_amount, 0) AS sales_order_bu_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Sales Order', bu_amount, 0) AS sales_order_bu_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', bu_amount, 0) AS sales_order_bu_amount_next_1y_fiscal_year\n        \n    \n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', usd_amount, 0) AS opportunity_usd_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', usd_amount, 0) AS opportunity_usd_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Opportunity', usd_amount, 0) AS opportunity_usd_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', usd_amount, 0) AS opportunity_usd_amount_next_1y_fiscal_year\n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Invoice', usd_amount, 0) AS invoice_usd_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Invoice', usd_amount, 0) AS invoice_usd_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Invoice', usd_amount, 0) AS invoice_usd_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Invoice', usd_amount, 0) AS invoice_usd_amount_next_1y_fiscal_year\n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', usd_amount, 0) AS sales_order_usd_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', usd_amount, 0) AS sales_order_usd_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Sales Order', usd_amount, 0) AS sales_order_usd_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', usd_amount, 0) AS sales_order_usd_amount_next_1y_fiscal_year\n        \n    \n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', dynamic_amount, 0) AS opportunity_dynamic_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', dynamic_amount, 0) AS opportunity_dynamic_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Opportunity', dynamic_amount, 0) AS opportunity_dynamic_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Opportunity', dynamic_amount, 0) AS opportunity_dynamic_amount_next_1y_fiscal_year\n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Invoice', dynamic_amount, 0) AS invoice_dynamic_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Invoice', dynamic_amount, 0) AS invoice_dynamic_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Invoice', dynamic_amount, 0) AS invoice_dynamic_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Invoice', dynamic_amount, 0) AS invoice_dynamic_amount_next_1y_fiscal_year\n        \n        , IIF(d_calc.is_prev_2y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', dynamic_amount, 0) AS sales_order_dynamic_amount_prev_2y_fiscal_year\n        , IIF(d_calc.is_prev_1y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', dynamic_amount, 0) AS sales_order_dynamic_amount_prev_1y_fiscal_year\n        , IIF(d_calc.is_current_fiscal_year = 1 AND t.transaction_type = 'Sales Order', dynamic_amount, 0) AS sales_order_dynamic_amount_current_fiscal_year\n        , IIF(d_calc.is_next_1y_fiscal_year = 1 AND t.transaction_type = 'Sales Order', dynamic_amount, 0) AS sales_order_dynamic_amount_next_1y_fiscal_year\n        \n    \nFROM cte_scope t \nLEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"dim_date\" d_calc\n    ON d_calc.pk_date_standard = t.calculation_date \n)\n\nSELECT \n    t.*\n    , \"hist_item_name\",\n  \"hist_item_code\",\n  \"hist_item_type\",\n  \"hist_project_code\",\n  \"hist_item_category\",\n  \"hist_item_sub_category\",\n  \"hist_item_pattern\",\n  \"live_item_name\",\n  \"live_item_code\",\n  \"live_item_type\",\n  \"live_project_code\",\n  \"live_item_category\",\n  \"live_item_sub_category\",\n  \"live_item_pattern\",\n  \"pk_item_nsid\",\n  \"item_nsid\"\n    , \"hist_customer_name\",\n  \"hist_customer_tier\",\n  \"live_customer_name\",\n  \"live_customer_tier\",\n  \"pk_customer_nsid\",\n  \"customer_nsid\"\nFROM cte_calculate t\nLEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"dim_customer\" cu\n    ON cu.pk_customer_nsid = t.fk_customer_nsid\n    AND t.transaction_date BETWEEN cu.scd_valid_from_fill_date AND cu.scd_valid_to_fill_date\nLEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"dim_item\" it\n    ON it.pk_item_nsid = t.fk_item_nsid\n    AND t.transaction_date BETWEEN it.scd_valid_from_fill_date AND it.scd_valid_to_fill_date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.dataset_sales_pipeline_rls": {"database": "netsuite", "schema": "prod_ds", "name": "dataset_sales_pipeline_rls", "resource_type": "model", "package_name": "netsuite_project", "path": "ds/dataset_sales_pipeline_rls.sql", "original_file_path": "models/ds/dataset_sales_pipeline_rls.sql", "unique_id": "model.netsuite_project.dataset_sales_pipeline_rls", "fqn": ["netsuite_project", "ds", "dataset_sales_pipeline_rls"], "alias": "dataset_sales_pipeline_rls", "checksum": {"name": "sha256", "checksum": "99bd4760afa9d49b262e6c723a027be4c645068702eb1ea2f00cc8ca0a5722d5"}, "config": {"enabled": true, "alias": null, "schema": "ds", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "ds", "materialized": "view"}, "created_at": 1728687172.994595, "relation_name": "\"netsuite\".\"prod_ds\".\"dataset_sales_pipeline_rls\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\n-- depends_on: {{ ref('prep_rls_normalize') }}\n{{ model_generate_dataset_rls(ref(\"dataset_sales_pipeline\"), \"customer_bu_item\") }}", "language": "sql", "refs": [{"name": "prep_rls_normalize", "package": null, "version": null}, {"name": "dataset_sales_pipeline", "package": null, "version": null}, {"name": "prep_rls_normalize", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_project.model_generate_dataset_rls"], "nodes": ["model.netsuite_project.prep_rls_normalize", "model.netsuite_project.dataset_sales_pipeline"]}, "compiled_path": "target/compiled/netsuite_project/models/ds/dataset_sales_pipeline_rls.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: \"netsuite\".\"prod_prp\".\"prep_rls_normalize\"\n\n\n\n\n\n\n\n    \n        SELECT\n            ds.*,\n            rls.user_email\n        FROM \"netsuite\".\"prod_ds\".\"dataset_sales_pipeline\" ds\n        LEFT JOIN \"netsuite\".\"prod_prp\".\"prep_rls_normalize\" rls\n            ON  \n        (ds.live_customer_name = rls.authorized_customer_name OR rls.authorized_customer_name = 'All')\n        AND (ds.live_bu_code = rls.authorized_bu_code OR rls.authorized_bu_code = 'All')\n        AND (ds.live_item_type = rls.authorized_item_type OR rls.authorized_item_type = 'All')\n    \n        WHERE rls.row_id = 1\n         UNION \n    \n        SELECT\n            ds.*,\n            rls.user_email\n        FROM \"netsuite\".\"prod_ds\".\"dataset_sales_pipeline\" ds\n        LEFT JOIN \"netsuite\".\"prod_prp\".\"prep_rls_normalize\" rls\n            ON  \n        (ds.live_customer_name = rls.authorized_customer_name OR rls.authorized_customer_name = 'All')\n        AND (ds.live_bu_code = rls.authorized_bu_code OR rls.authorized_bu_code = 'All')\n        AND (ds.live_item_type = rls.authorized_item_type OR rls.authorized_item_type = 'All')\n    \n        WHERE rls.row_id = 2\n        \n    \n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.dim_bu": {"database": "netsuite", "schema": "prod_bus", "name": "dim_bu", "resource_type": "model", "package_name": "netsuite_project", "path": "bus/dim_bu.sql", "original_file_path": "models/bus/dim_bu.sql", "unique_id": "model.netsuite_project.dim_bu", "fqn": ["netsuite_project", "bus", "dim_bu"], "alias": "dim_bu", "checksum": {"name": "sha256", "checksum": "fda2228bc8fa2a3c6fa2f20d729edefe4e7721d5e7fb362906b1d6a10a3d1bc3"}, "config": {"enabled": true, "alias": null, "schema": "bus", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This dimension table returns, for any business unit primary key, both (1) the historical attribute, and (2) the current attribute.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/bus/schema.yml", "build_path": null, "unrendered_config": {"schema": "bus", "materialized": "view"}, "created_at": 1728687173.924567, "relation_name": "\"netsuite\".\"prod_bus\".\"dim_bu\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\n{{ model_generate_dim_scd ( var(\"business_unit_key\"), ref('historized_bu') ) }}", "language": "sql", "refs": [{"name": "historized_bu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_project.model_generate_dim_scd"], "nodes": ["snapshot.netsuite_project.historized_bu"]}, "compiled_path": "target/compiled/netsuite_project/models/bus/dim_bu.sql", "compiled": true, "compiled_code": "\n\n\n\n    \n\n    \n    \n    \n\n    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n\n    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n\n    SELECT \n        hist.bu_code AS hist_bu_code, hist.bu_country_code AS hist_bu_country_code, hist.bu_currency AS hist_bu_currency, hist.bu_legal_name AS hist_bu_legal_name, hist.bu_commercial_group AS hist_bu_commercial_group\n        , live.bu_code AS live_bu_code, live.bu_country_code AS live_bu_country_code, live.bu_currency AS live_bu_currency, live.bu_legal_name AS live_bu_legal_name, live.bu_commercial_group AS live_bu_commercial_group\n        , \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(hist.bu_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '')), '')), 2))\n AS pk_bu_nsid\n        , hist.bu_nsid, hist.dbt_scd_id, hist.dbt_updated_at, hist.dbt_valid_from, hist.dbt_valid_to\n        , IIF ( ROW_NUMBER() OVER ( PARTITION BY hist.bu_nsid ORDER BY hist.dbt_valid_from ) = 1\n            , CAST('1900-01-01' AS DATETIME2)\n            , hist.dbt_valid_from )                                                             AS scd_valid_from_fill_date\n        , COALESCE(hist.dbt_valid_to, cast('9999-12-31' AS DATETIME2))      AS scd_valid_to_fill_date\n        , ROW_NUMBER() OVER ( PARTITION BY hist.bu_nsid ORDER BY hist.dbt_valid_from ) AS version_number\n    FROM  \n        \"netsuite\".\"scd\".\"historized_bu\" AS hist\n        LEFT OUTER JOIN \n        ( SELECT * FROM \"netsuite\".\"scd\".\"historized_bu\" WHERE dbt_valid_to IS NULL ) live\n            ON live.bu_nsid = hist.bu_nsid\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.fact_all_transactions_with_line": {"database": "netsuite", "schema": "prod_bus", "name": "fact_all_transactions_with_line", "resource_type": "model", "package_name": "netsuite_project", "path": "bus/fact_all_transactions_with_line.sql", "original_file_path": "models/bus/fact_all_transactions_with_line.sql", "unique_id": "model.netsuite_project.fact_all_transactions_with_line", "fqn": ["netsuite_project", "bus", "fact_all_transactions_with_line"], "alias": "fact_all_transactions_with_line", "checksum": {"name": "sha256", "checksum": "859e5735e7340246b41b9204875d9d04218294bb6a45f9ca2dd63e0ce4ad83e3"}, "config": {"enabled": true, "alias": null, "schema": "bus", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table consolidates all the transactions and transaction lines - both current and historized (snapshotted). A snapshot date field can be use to differentiate the different versions of the transactions data. This table also centralizes the first joins with the dimensions that are common to all transaction types (e.g. Business Unit).", "columns": {"fx_rate_original_to_usd": {"name": "fx_rate_original_to_usd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fx_rate_original_to_dynamic": {"name": "fx_rate_original_to_dynamic", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/bus/schema.yml", "build_path": null, "unrendered_config": {"schema": "bus", "materialized": "view"}, "created_at": 1728687173.924067, "relation_name": "\"netsuite\".\"prod_bus\".\"fact_all_transactions_with_line\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\nWITH union_current_and_snapshot AS \n(\n    {{ dbt_utils.union_relations (\n        relations = [\n                    ref('prep_transaction_with_lines_for_union'),\n                    ref('historized_transaction_with_line')\n                    ]\n        , where = \"YEAR(transaction_date) >= '\" ~ var(\"all_transactions_scope_date\") \n            ~ \"' AND transaction_type IN ('\" ~ var(\"all_transactions_scope_type\") | join(\"', '\") ~ \"')\") }}\n),\n\ndata_consolidation AS \n(\n    SELECT \n        t.* \n        , DENSE_RANK () OVER ( ORDER BY {{ var(\"dbt_snapshot_col_name\") }} DESC )                    AS snapshot_date_order\n        , {{ dbt_utils.star(from=ref('dim_bu'), except = var(\"scd_excluded_col_name\") ) }}\n        , COALESCE( fx_dated.fx_rate_original_to_usd, fx_latest.fx_rate_original_to_usd )            AS fx_rate_original_to_usd\n        , COALESCE( fx_dated.fx_rate_original_to_dynamic, fx_latest.fx_rate_original_to_dynamic )    AS fx_rate_original_to_dynamic\n        , '{{ var(\"fx_avg_implicit_currency\") }}'                                                    AS dynamic_target_currency\n    FROM union_current_and_snapshot t\n\n    {# Common dimensions for all tansaction types #}\n    LEFT OUTER JOIN {{ ref(\"dim_bu\") }} bu\n        ON bu.pk_{{ var(\"business_unit_key\") }} = t.fk_{{ var(\"business_unit_key\") }}\n        AND t.transaction_date BETWEEN bu.scd_valid_from_fill_date AND bu.scd_valid_to_fill_date\n\n    {# Fx rates #}\n    LEFT OUTER JOIN {{ ref(\"fact_fx_avg_rate_latest\") }} fx_latest\n        ON bu.hist_bu_currency = fx_latest.original_currency\n    LEFT OUTER JOIN {{ ref(\"fact_fx_avg_rate_dated\") }} fx_dated\n        ON bu.hist_bu_currency = fx_dated.original_currency\n        AND EOMONTH(t.transaction_date) = fx_dated.closing_date\n)\n\nSELECT \n    * \n    , fx_rate_original_to_usd     * bu_amount AS usd_amount\n    , fx_rate_original_to_dynamic * bu_amount AS dynamic_amount\nFROM data_consolidation", "language": "sql", "refs": [{"name": "prep_transaction_with_lines_for_union", "package": null, "version": null}, {"name": "historized_transaction_with_line", "package": null, "version": null}, {"name": "dim_bu", "package": null, "version": null}, {"name": "dim_bu", "package": null, "version": null}, {"name": "fact_fx_avg_rate_latest", "package": null, "version": null}, {"name": "fact_fx_avg_rate_dated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt_utils.star"], "nodes": ["model.netsuite_project.prep_transaction_with_lines_for_union", "model.netsuite_project.historized_transaction_with_line", "model.netsuite_project.dim_bu", "model.netsuite_project.fact_fx_avg_rate_latest", "model.netsuite_project.fact_fx_avg_rate_dated"]}, "compiled_path": "target/compiled/netsuite_project/models/bus/fact_all_transactions_with_line.sql", "compiled": true, "compiled_code": "\n\nWITH union_current_and_snapshot AS \n(\n    \n\n        (\n            select\n                cast('\"netsuite\".\"prod_prp\".\"prep_transaction_with_lines_for_union\"' as VARCHAR(8000)) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_nsid\" as int) as \"transaction_nsid\" ,\n                    cast(\"transaction_line_nsid\" as int) as \"transaction_line_nsid\" ,\n                    cast(\"transaction_last_modified_date\" as varchar(16)) as \"transaction_last_modified_date\" ,\n                    cast(\"transaction_line_last_modified_date\" as varchar(16)) as \"transaction_line_last_modified_date\" ,\n                    cast(\"transaction_type\" as varchar(16)) as \"transaction_type\" ,\n                    cast(\"transaction_number\" as varchar(16)) as \"transaction_number\" ,\n                    cast(\"transaction_status\" as varchar(16)) as \"transaction_status\" ,\n                    cast(\"transaction_date\" as datetime2) as \"transaction_date\" ,\n                    cast(\"expected_delivery_date\" as varchar(16)) as \"expected_delivery_date\" ,\n                    cast(\"foreign_amount\" as int) as \"foreign_amount\" ,\n                    cast(\"foreign_currency\" as varchar(16)) as \"foreign_currency\" ,\n                    cast(\"quantity\" as int) as \"quantity\" ,\n                    cast(\"bu_rate\" as float) as \"bu_rate\" ,\n                    cast(\"bu_amount\" as float) as \"bu_amount\" ,\n                    cast(\"fk_item_nsid\" as varchar(50)) as \"fk_item_nsid\" ,\n                    cast(\"fk_bu_nsid\" as varchar(50)) as \"fk_bu_nsid\" ,\n                    cast(\"fk_customer_nsid\" as varchar(50)) as \"fk_customer_nsid\" ,\n                    cast(\"dbt_load_datetime\" as datetime2) as \"dbt_load_datetime\" ,\n                    cast(\"dbt_run_id\" as varchar(36)) as \"dbt_run_id\" ,\n                    cast(\"dbt_functional_snapshot_date\" as datetime2) as \"dbt_functional_snapshot_date\" \n\n            from \"netsuite\".\"prod_prp\".\"prep_transaction_with_lines_for_union\"\n\n            where YEAR(transaction_date) >= '2023' AND transaction_type IN ('Opportunity', 'Invoice', 'Sales Order', 'Journal Entry')\n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\"' as VARCHAR(8000)) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_nsid\" as int) as \"transaction_nsid\" ,\n                    cast(\"transaction_line_nsid\" as int) as \"transaction_line_nsid\" ,\n                    cast(\"transaction_last_modified_date\" as varchar(16)) as \"transaction_last_modified_date\" ,\n                    cast(\"transaction_line_last_modified_date\" as varchar(16)) as \"transaction_line_last_modified_date\" ,\n                    cast(\"transaction_type\" as varchar(16)) as \"transaction_type\" ,\n                    cast(\"transaction_number\" as varchar(16)) as \"transaction_number\" ,\n                    cast(\"transaction_status\" as varchar(16)) as \"transaction_status\" ,\n                    cast(\"transaction_date\" as datetime2) as \"transaction_date\" ,\n                    cast(\"expected_delivery_date\" as varchar(16)) as \"expected_delivery_date\" ,\n                    cast(\"foreign_amount\" as int) as \"foreign_amount\" ,\n                    cast(\"foreign_currency\" as varchar(16)) as \"foreign_currency\" ,\n                    cast(\"quantity\" as int) as \"quantity\" ,\n                    cast(\"bu_rate\" as float) as \"bu_rate\" ,\n                    cast(\"bu_amount\" as float) as \"bu_amount\" ,\n                    cast(\"fk_item_nsid\" as varchar(50)) as \"fk_item_nsid\" ,\n                    cast(\"fk_bu_nsid\" as varchar(50)) as \"fk_bu_nsid\" ,\n                    cast(\"fk_customer_nsid\" as varchar(50)) as \"fk_customer_nsid\" ,\n                    cast(\"dbt_load_datetime\" as datetime2) as \"dbt_load_datetime\" ,\n                    cast(\"dbt_run_id\" as varchar(36)) as \"dbt_run_id\" ,\n                    cast(\"dbt_functional_snapshot_date\" as datetime2) as \"dbt_functional_snapshot_date\" \n\n            from \"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\"\n\n            where YEAR(transaction_date) >= '2023' AND transaction_type IN ('Opportunity', 'Invoice', 'Sales Order', 'Journal Entry')\n        )\n\n        \n),\n\ndata_consolidation AS \n(\n    SELECT \n        t.* \n        , DENSE_RANK () OVER ( ORDER BY dbt_functional_snapshot_date DESC )                    AS snapshot_date_order\n        , \"hist_bu_code\",\n  \"hist_bu_country_code\",\n  \"hist_bu_currency\",\n  \"hist_bu_legal_name\",\n  \"hist_bu_commercial_group\",\n  \"live_bu_code\",\n  \"live_bu_country_code\",\n  \"live_bu_currency\",\n  \"live_bu_legal_name\",\n  \"live_bu_commercial_group\",\n  \"pk_bu_nsid\",\n  \"bu_nsid\"\n        , COALESCE( fx_dated.fx_rate_original_to_usd, fx_latest.fx_rate_original_to_usd )            AS fx_rate_original_to_usd\n        , COALESCE( fx_dated.fx_rate_original_to_dynamic, fx_latest.fx_rate_original_to_dynamic )    AS fx_rate_original_to_dynamic\n        , 'EUR'                                                    AS dynamic_target_currency\n    FROM union_current_and_snapshot t\n\n    \n    LEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"dim_bu\" bu\n        ON bu.pk_bu_nsid = t.fk_bu_nsid\n        AND t.transaction_date BETWEEN bu.scd_valid_from_fill_date AND bu.scd_valid_to_fill_date\n\n    \n    LEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"fact_fx_avg_rate_latest\" fx_latest\n        ON bu.hist_bu_currency = fx_latest.original_currency\n    LEFT OUTER JOIN \"netsuite\".\"prod_bus\".\"fact_fx_avg_rate_dated\" fx_dated\n        ON bu.hist_bu_currency = fx_dated.original_currency\n        AND EOMONTH(t.transaction_date) = fx_dated.closing_date\n)\n\nSELECT \n    * \n    , fx_rate_original_to_usd     * bu_amount AS usd_amount\n    , fx_rate_original_to_dynamic * bu_amount AS dynamic_amount\nFROM data_consolidation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.dim_item": {"database": "netsuite", "schema": "prod_bus", "name": "dim_item", "resource_type": "model", "package_name": "netsuite_project", "path": "bus/dim_item.sql", "original_file_path": "models/bus/dim_item.sql", "unique_id": "model.netsuite_project.dim_item", "fqn": ["netsuite_project", "bus", "dim_item"], "alias": "dim_item", "checksum": {"name": "sha256", "checksum": "7f06ae5748ea52eb6fc050c103008d94fcd5372ed7c40a7821dcde77ee67e45b"}, "config": {"enabled": true, "alias": null, "schema": "bus", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This dimension table returns, for any item primary key, both (1) the historical attribute, and (2) the current attribute.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/bus/schema.yml", "build_path": null, "unrendered_config": {"schema": "bus", "materialized": "view"}, "created_at": 1728687173.9255247, "relation_name": "\"netsuite\".\"prod_bus\".\"dim_item\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\n{{ model_generate_dim_scd ( var(\"item_key\"), ref('historized_item') ) }}", "language": "sql", "refs": [{"name": "historized_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_project.model_generate_dim_scd"], "nodes": ["snapshot.netsuite_project.historized_item"]}, "compiled_path": "target/compiled/netsuite_project/models/bus/dim_item.sql", "compiled": true, "compiled_code": "\n\n\n\n    \n\n    \n    \n    \n\n    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n\n    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n\n    SELECT \n        hist.item_name AS hist_item_name, hist.item_code AS hist_item_code, hist.item_type AS hist_item_type, hist.project_code AS hist_project_code, hist.item_category AS hist_item_category, hist.item_sub_category AS hist_item_sub_category, hist.item_pattern AS hist_item_pattern\n        , live.item_name AS live_item_name, live.item_code AS live_item_code, live.item_type AS live_item_type, live.project_code AS live_project_code, live.item_category AS live_item_category, live.item_sub_category AS live_item_sub_category, live.item_pattern AS live_item_pattern\n        , \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(hist.item_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '')), '')), 2))\n AS pk_item_nsid\n        , hist.item_nsid, hist.dbt_scd_id, hist.dbt_updated_at, hist.dbt_valid_from, hist.dbt_valid_to\n        , IIF ( ROW_NUMBER() OVER ( PARTITION BY hist.item_nsid ORDER BY hist.dbt_valid_from ) = 1\n            , CAST('1900-01-01' AS DATETIME2)\n            , hist.dbt_valid_from )                                                             AS scd_valid_from_fill_date\n        , COALESCE(hist.dbt_valid_to, cast('9999-12-31' AS DATETIME2))      AS scd_valid_to_fill_date\n        , ROW_NUMBER() OVER ( PARTITION BY hist.item_nsid ORDER BY hist.dbt_valid_from ) AS version_number\n    FROM  \n        \"netsuite\".\"scd\".\"historized_item\" AS hist\n        LEFT OUTER JOIN \n        ( SELECT * FROM \"netsuite\".\"scd\".\"historized_item\" WHERE dbt_valid_to IS NULL ) live\n            ON live.item_nsid = hist.item_nsid\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.dim_date": {"database": "netsuite", "schema": "prod_bus", "name": "dim_date", "resource_type": "model", "package_name": "netsuite_project", "path": "bus/dim_date.sql", "original_file_path": "models/bus/dim_date.sql", "unique_id": "model.netsuite_project.dim_date", "fqn": ["netsuite_project", "bus", "dim_date"], "alias": "dim_date", "checksum": {"name": "sha256", "checksum": "3a5d2a3ec04ae4a7bfab11f138c9346b5d132f1249233c7115d38a875aafd2ff"}, "config": {"enabled": true, "alias": null, "schema": "bus", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This dimension date table contains all date attributes for time-intelligent calculations and advanced filtering (e.g. YTD).", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/bus/schema.yml", "build_path": null, "unrendered_config": {"schema": "bus", "materialized": "view"}, "created_at": 1728687173.9259937, "relation_name": "\"netsuite\".\"prod_bus\".\"dim_date\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\n{% set current_fiscal_year = 'CASE WHEN\n  MONTH(' ~ column_dbt_load_date() ~ ') >= ' ~ var(\"date_table_fiscal_month\") ~\n  ' THEN YEAR(' ~ column_dbt_load_date() ~ ')\n  ELSE YEAR(' ~ column_dbt_load_date() ~ ') - 1 \nEND'\n%}\n\nWITH cte_sequence AS (\n  SELECT \n    DATEADD(DAY,value, CAST('{{ var(\"date_table_start_date\") }}' AS DATE)) AS d\n  FROM GENERATE_SERIES ( \n    0\n    , DATEDIFF(DAY, CAST('{{ var(\"date_table_start_date\") }}' AS DATE)\n    , DATEADD(YEAR, {{ var(\"date_table_window_year\") }}\n    , {{ column_dbt_load_date() }}))\n    , 1\n    ) AS gs\n),\n\ncte_core_definition AS (\n  SELECT\n    date_standard                        = CONVERT(DATE,d)\n    , date_int                           = FORMAT(CONVERT(DATE,d), 'yyyyMMdd')\n    , day_of_month_number                = DATEPART(DAY,d)\n    , day_of_week_number                 = DATEPART(WEEKDAY,d)\n    , first_date_of_month                = DATEFROMPARTS(YEAR(d),MONTH(d),1)\n    , last_date_of_month                 = DATEFROMPARTS(YEAR(d),MONTH(d),DAY(EOMONTH(d)))\n    , is_current_day                     = IIF(CONVERT(DATE,d) =  {{ column_dbt_load_date() }}, 1, 0)\n    , is_above_current_day               = IIF(CONVERT(DATE,d) >  {{ column_dbt_load_date() }}, 1, 0)\n    , is_above_or_at_current_day         = IIF(CONVERT(DATE,d) >= {{ column_dbt_load_date() }}, 1, 0)\n    , calendar_year_number               = DATEPART(YEAR,d)\n    , calendar_first_day_of_year         = DATEFROMPARTS(YEAR(d),1,1)\n    , calendar_last_day_of_year          = DATEFROMPARTS(YEAR(d),12,31)\n    , calendar_month_of_year_number      = DATEPART(MONTH,d)\n    , fiscal_year_number                 = CASE WHEN DATEPART(MONTH,d) >= {{ var(\"date_table_fiscal_month\") }} THEN DATEPART(YEAR,d) ELSE DATEPART(YEAR,d) - 1 END\n    , fiscal_first_day_of_year           = DATEFROMPARTS(CASE WHEN DATEPART(MONTH,d) >= {{ var(\"date_table_fiscal_month\") }} THEN DATEPART(YEAR,d) ELSE DATEPART(YEAR,d) - 1 END, {{ var(\"date_table_fiscal_month\") }}, 1)\n    , fiscal_last_day_of_year            = DATEADD(DAY, -1, DATEFROMPARTS(CASE WHEN DATEPART(MONTH,d) >= {{ var(\"date_table_fiscal_month\") }} THEN DATEPART(YEAR,d) + 1 ELSE DATEPART(YEAR,d) END, {{ var(\"date_table_fiscal_month\") }}, 1))\n    , fiscal_month_of_year_number        = (DATEPART(MONTH,d) + 12 - {{ var(\"date_table_fiscal_month\") }}) % 12 + 1\n  FROM cte_sequence\n),\n\ncte_date_dimension AS (\n  SELECT\n    date_standard AS pk_date_standard\n    , date_int     \n    , day_of_month_number   \n    , day_of_week_number   \n    , first_date_of_month  \n    , last_date_of_month       \n    , is_current_day      \n    , is_above_current_day\n    , is_above_or_at_current_day\n    , calendar_year_number    \n    , calendar_first_day_of_year        \n    , calendar_last_day_of_year      \n    , calendar_month_of_year_number   \n    , fiscal_year_number\n    , fiscal_first_day_of_year\n    , fiscal_last_day_of_year\n    , fiscal_month_of_year_number\n    , is_prev_2y_fiscal_year          = IIF({{current_fiscal_year}} -2 = fiscal_year_number,1,0)\n    , is_prev_1y_fiscal_year          = IIF({{current_fiscal_year}} -1 = fiscal_year_number,1,0)\n    , is_current_fiscal_year          = IIF({{current_fiscal_year}}    = fiscal_year_number,1,0)\n    , is_next_1y_fiscal_year          = IIF({{current_fiscal_year}} +1 = fiscal_year_number,1,0)\n  FROM cte_core_definition\n)\n\nSELECT * FROM cte_date_dimension", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_project.column_dbt_load_date"], "nodes": []}, "compiled_path": "target/compiled/netsuite_project/models/bus/dim_date.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH cte_sequence AS (\n  SELECT \n    DATEADD(DAY,value, CAST('2020-01-01' AS DATE)) AS d\n  FROM GENERATE_SERIES ( \n    0\n    , DATEDIFF(DAY, CAST('2020-01-01' AS DATE)\n    , DATEADD(YEAR, 5\n    , \n    CAST('2024-10-12 00:52:50' AS DATE)\n))\n    , 1\n    ) AS gs\n),\n\ncte_core_definition AS (\n  SELECT\n    date_standard                        = CONVERT(DATE,d)\n    , date_int                           = FORMAT(CONVERT(DATE,d), 'yyyyMMdd')\n    , day_of_month_number                = DATEPART(DAY,d)\n    , day_of_week_number                 = DATEPART(WEEKDAY,d)\n    , first_date_of_month                = DATEFROMPARTS(YEAR(d),MONTH(d),1)\n    , last_date_of_month                 = DATEFROMPARTS(YEAR(d),MONTH(d),DAY(EOMONTH(d)))\n    , is_current_day                     = IIF(CONVERT(DATE,d) =  \n    CAST('2024-10-12 00:52:50' AS DATE)\n, 1, 0)\n    , is_above_current_day               = IIF(CONVERT(DATE,d) >  \n    CAST('2024-10-12 00:52:50' AS DATE)\n, 1, 0)\n    , is_above_or_at_current_day         = IIF(CONVERT(DATE,d) >= \n    CAST('2024-10-12 00:52:50' AS DATE)\n, 1, 0)\n    , calendar_year_number               = DATEPART(YEAR,d)\n    , calendar_first_day_of_year         = DATEFROMPARTS(YEAR(d),1,1)\n    , calendar_last_day_of_year          = DATEFROMPARTS(YEAR(d),12,31)\n    , calendar_month_of_year_number      = DATEPART(MONTH,d)\n    , fiscal_year_number                 = CASE WHEN DATEPART(MONTH,d) >= 2 THEN DATEPART(YEAR,d) ELSE DATEPART(YEAR,d) - 1 END\n    , fiscal_first_day_of_year           = DATEFROMPARTS(CASE WHEN DATEPART(MONTH,d) >= 2 THEN DATEPART(YEAR,d) ELSE DATEPART(YEAR,d) - 1 END, 2, 1)\n    , fiscal_last_day_of_year            = DATEADD(DAY, -1, DATEFROMPARTS(CASE WHEN DATEPART(MONTH,d) >= 2 THEN DATEPART(YEAR,d) + 1 ELSE DATEPART(YEAR,d) END, 2, 1))\n    , fiscal_month_of_year_number        = (DATEPART(MONTH,d) + 12 - 2) % 12 + 1\n  FROM cte_sequence\n),\n\ncte_date_dimension AS (\n  SELECT\n    date_standard AS pk_date_standard\n    , date_int     \n    , day_of_month_number   \n    , day_of_week_number   \n    , first_date_of_month  \n    , last_date_of_month       \n    , is_current_day      \n    , is_above_current_day\n    , is_above_or_at_current_day\n    , calendar_year_number    \n    , calendar_first_day_of_year        \n    , calendar_last_day_of_year      \n    , calendar_month_of_year_number   \n    , fiscal_year_number\n    , fiscal_first_day_of_year\n    , fiscal_last_day_of_year\n    , fiscal_month_of_year_number\n    , is_prev_2y_fiscal_year          = IIF(CASE WHEN\n  MONTH(\n    CAST('2024-10-12 00:52:50' AS DATE)\n) >= 2 THEN YEAR(\n    CAST('2024-10-12 00:52:50' AS DATE)\n)\n  ELSE YEAR(\n    CAST('2024-10-12 00:52:50' AS DATE)\n) - 1 \nEND -2 = fiscal_year_number,1,0)\n    , is_prev_1y_fiscal_year          = IIF(CASE WHEN\n  MONTH(\n    CAST('2024-10-12 00:52:50' AS DATE)\n) >= 2 THEN YEAR(\n    CAST('2024-10-12 00:52:50' AS DATE)\n)\n  ELSE YEAR(\n    CAST('2024-10-12 00:52:50' AS DATE)\n) - 1 \nEND -1 = fiscal_year_number,1,0)\n    , is_current_fiscal_year          = IIF(CASE WHEN\n  MONTH(\n    CAST('2024-10-12 00:52:50' AS DATE)\n) >= 2 THEN YEAR(\n    CAST('2024-10-12 00:52:50' AS DATE)\n)\n  ELSE YEAR(\n    CAST('2024-10-12 00:52:50' AS DATE)\n) - 1 \nEND    = fiscal_year_number,1,0)\n    , is_next_1y_fiscal_year          = IIF(CASE WHEN\n  MONTH(\n    CAST('2024-10-12 00:52:50' AS DATE)\n) >= 2 THEN YEAR(\n    CAST('2024-10-12 00:52:50' AS DATE)\n)\n  ELSE YEAR(\n    CAST('2024-10-12 00:52:50' AS DATE)\n) - 1 \nEND +1 = fiscal_year_number,1,0)\n  FROM cte_core_definition\n)\n\nSELECT * FROM cte_date_dimension", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.fact_fx_avg_rate_dated": {"database": "netsuite", "schema": "prod_bus", "name": "fact_fx_avg_rate_dated", "resource_type": "model", "package_name": "netsuite_project", "path": "bus/fact_fx_avg_rate_dated.sql", "original_file_path": "models/bus/fact_fx_avg_rate_dated.sql", "unique_id": "model.netsuite_project.fact_fx_avg_rate_dated", "fqn": ["netsuite_project", "bus", "fact_fx_avg_rate_dated"], "alias": "fact_fx_avg_rate_dated", "checksum": {"name": "sha256", "checksum": "7c25da8a1e39d29fa4d930d76f62a8ecb1668006548e85c20795c47e93b4138d"}, "config": {"enabled": true, "alias": null, "schema": "bus", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This average fx rate table contains the normalized fx rates for every month. This table also calculates the implicit dynamic exchange rate - based on the USD rate.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/bus/schema.yml", "build_path": null, "unrendered_config": {"schema": "bus", "materialized": "view"}, "created_at": 1728687173.9264812, "relation_name": "\"netsuite\".\"prod_bus\".\"fact_fx_avg_rate_dated\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\nSELECT\n    t1.original_currency\n    , t1.closing_date\n    , t1.fx_rate_original_to_target                                 AS fx_rate_original_to_usd\n    , t1.fx_rate_original_to_target / t2.fx_rate_original_to_target AS fx_rate_original_to_dynamic\n    , '{{ var(\"fx_avg_implicit_currency\") }}'                       AS dynamic_target_currency\nFROM\n    {{ ref(\"prep_fx_avg_rate_unpivot\") }} t1\nLEFT OUTER JOIN \n    (SELECT fx_rate_original_to_target, closing_date FROM {{ ref(\"prep_fx_avg_rate_unpivot\") }} WHERE original_currency = '{{ var(\"fx_avg_implicit_currency\") }}' ) t2 ON t1.closing_date = t2.closing_date", "language": "sql", "refs": [{"name": "prep_fx_avg_rate_unpivot", "package": null, "version": null}, {"name": "prep_fx_avg_rate_unpivot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.netsuite_project.prep_fx_avg_rate_unpivot"]}, "compiled_path": "target/compiled/netsuite_project/models/bus/fact_fx_avg_rate_dated.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    t1.original_currency\n    , t1.closing_date\n    , t1.fx_rate_original_to_target                                 AS fx_rate_original_to_usd\n    , t1.fx_rate_original_to_target / t2.fx_rate_original_to_target AS fx_rate_original_to_dynamic\n    , 'EUR'                       AS dynamic_target_currency\nFROM\n    \"netsuite\".\"prod_prp\".\"prep_fx_avg_rate_unpivot\" t1\nLEFT OUTER JOIN \n    (SELECT fx_rate_original_to_target, closing_date FROM \"netsuite\".\"prod_prp\".\"prep_fx_avg_rate_unpivot\" WHERE original_currency = 'EUR' ) t2 ON t1.closing_date = t2.closing_date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.dim_customer": {"database": "netsuite", "schema": "prod_bus", "name": "dim_customer", "resource_type": "model", "package_name": "netsuite_project", "path": "bus/dim_customer.sql", "original_file_path": "models/bus/dim_customer.sql", "unique_id": "model.netsuite_project.dim_customer", "fqn": ["netsuite_project", "bus", "dim_customer"], "alias": "dim_customer", "checksum": {"name": "sha256", "checksum": "a597d75a228e6ad5fc0511101015c73ad5ffb5ea151d76d743d0ec9e793b5977"}, "config": {"enabled": true, "alias": null, "schema": "bus", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This dimension table returns, for any customer primary key, both (1) the historical attribute, and (2) the current attribute.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/bus/schema.yml", "build_path": null, "unrendered_config": {"schema": "bus", "materialized": "view"}, "created_at": 1728687173.9250412, "relation_name": "\"netsuite\".\"prod_bus\".\"dim_customer\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\n{{ model_generate_dim_scd ( var(\"customer_key\"), ref('historized_customer') ) }}", "language": "sql", "refs": [{"name": "historized_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.netsuite_project.model_generate_dim_scd"], "nodes": ["snapshot.netsuite_project.historized_customer"]}, "compiled_path": "target/compiled/netsuite_project/models/bus/dim_customer.sql", "compiled": true, "compiled_code": "\n\n\n\n    \n\n    \n    \n    \n\n    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n\n    \n        \n    \n        \n            \n                    \n        \n    \n        \n            \n                    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n\n    SELECT \n        hist.customer_name AS hist_customer_name, hist.customer_tier AS hist_customer_tier\n        , live.customer_name AS live_customer_name, live.customer_tier AS live_customer_tier\n        , \n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), \n        concat(coalesce(cast(hist.customer_nsid as VARCHAR(8000)), '_dbt_utils_surrogate_key_null_'), '')), '')), 2))\n AS pk_customer_nsid\n        , hist.customer_nsid, hist.dbt_scd_id, hist.dbt_updated_at, hist.dbt_valid_from, hist.dbt_valid_to\n        , IIF ( ROW_NUMBER() OVER ( PARTITION BY hist.customer_nsid ORDER BY hist.dbt_valid_from ) = 1\n            , CAST('1900-01-01' AS DATETIME2)\n            , hist.dbt_valid_from )                                                             AS scd_valid_from_fill_date\n        , COALESCE(hist.dbt_valid_to, cast('9999-12-31' AS DATETIME2))      AS scd_valid_to_fill_date\n        , ROW_NUMBER() OVER ( PARTITION BY hist.customer_nsid ORDER BY hist.dbt_valid_from ) AS version_number\n    FROM  \n        \"netsuite\".\"scd\".\"historized_customer\" AS hist\n        LEFT OUTER JOIN \n        ( SELECT * FROM \"netsuite\".\"scd\".\"historized_customer\" WHERE dbt_valid_to IS NULL ) live\n            ON live.customer_nsid = hist.customer_nsid\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.netsuite_project.fact_fx_avg_rate_latest": {"database": "netsuite", "schema": "prod_bus", "name": "fact_fx_avg_rate_latest", "resource_type": "model", "package_name": "netsuite_project", "path": "bus/fact_fx_avg_rate_latest.sql", "original_file_path": "models/bus/fact_fx_avg_rate_latest.sql", "unique_id": "model.netsuite_project.fact_fx_avg_rate_latest", "fqn": ["netsuite_project", "bus", "fact_fx_avg_rate_latest"], "alias": "fact_fx_avg_rate_latest", "checksum": {"name": "sha256", "checksum": "32e824ff053b0ea11b798fc203f2d6c81dd5cf12696944989ae660ae8f17b5a7"}, "config": {"enabled": true, "alias": null, "schema": "bus", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This average fx rate table contains the normalized fx rates for the latest month available only. This is the rate to be used when the dated fx rate (previously defined) is not available. This table also calculates the implicit dynamic exchange rate - based on the USD rate.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://models/bus/schema.yml", "build_path": null, "unrendered_config": {"schema": "bus", "materialized": "view"}, "created_at": 1728687173.926951, "relation_name": "\"netsuite\".\"prod_bus\".\"fact_fx_avg_rate_latest\"", "raw_code": "{{\n    config (\n        materialized = 'view'\n    )\n}}\n\nWITH flag_latest_rate AS \n(\n    SELECT \n        *     \n        , ROW_NUMBER () OVER (PARTITION BY original_currency ORDER BY closing_date DESC) AS row_id\n    FROM {{ ref(\"prep_fx_avg_rate_unpivot\") }}\n),\n\nfilter_latest_rate AS \n(\n    SELECT\n        *\n    FROM flag_latest_rate \n    WHERE row_id = 1\n)\n\nSELECT\n    t1.original_currency\n    , t1.fx_rate_original_to_target                                 AS fx_rate_original_to_usd\n    , t1.fx_rate_original_to_target / t2.fx_rate_original_to_target AS fx_rate_original_to_dynamic\n    , '{{ var(\"fx_avg_implicit_currency\") }}'                       AS dynamic_target_currency\nFROM\n    filter_latest_rate t1\nCROSS JOIN \n    (SELECT fx_rate_original_to_target FROM filter_latest_rate WHERE original_currency = '{{ var(\"fx_avg_implicit_currency\") }}' ) t2", "language": "sql", "refs": [{"name": "prep_fx_avg_rate_unpivot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.netsuite_project.prep_fx_avg_rate_unpivot"]}, "compiled_path": "target/compiled/netsuite_project/models/bus/fact_fx_avg_rate_latest.sql", "compiled": true, "compiled_code": "\n\nWITH flag_latest_rate AS \n(\n    SELECT \n        *     \n        , ROW_NUMBER () OVER (PARTITION BY original_currency ORDER BY closing_date DESC) AS row_id\n    FROM \"netsuite\".\"prod_prp\".\"prep_fx_avg_rate_unpivot\"\n),\n\nfilter_latest_rate AS \n(\n    SELECT\n        *\n    FROM flag_latest_rate \n    WHERE row_id = 1\n)\n\nSELECT\n    t1.original_currency\n    , t1.fx_rate_original_to_target                                 AS fx_rate_original_to_usd\n    , t1.fx_rate_original_to_target / t2.fx_rate_original_to_target AS fx_rate_original_to_dynamic\n    , 'EUR'                       AS dynamic_target_currency\nFROM\n    filter_latest_rate t1\nCROSS JOIN \n    (SELECT fx_rate_original_to_target FROM filter_latest_rate WHERE original_currency = 'EUR' ) t2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "snapshot.netsuite_project.historized_user_rls": {"database": "netsuite", "schema": "scd", "name": "historized_user_rls", "resource_type": "snapshot", "package_name": "netsuite_project", "path": "historized_user_rls.sql", "original_file_path": "snapshots/historized_user_rls.sql", "unique_id": "snapshot.netsuite_project.historized_user_rls", "fqn": ["netsuite_project", "historized_user_rls", "historized_user_rls"], "alias": "historized_user_rls", "checksum": {"name": "sha256", "checksum": "97ebec9412ab8ffb3bd8613c1fce2d6c814f54dc93f33848cdde21dfc30860fa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "user_email + authorized_bu_code + authorized_customer_name + authorized_item_type", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "check", "target_schema": "scd", "target_database": null, "updated_at": null, "check_cols": "all", "invalidate_hard_deletes": true}, "tags": [], "description": "This table historizes the raw row-level-security settings for each user.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://snapshots/schema.yml", "build_path": null, "unrendered_config": {"unique_key": "user_email + authorized_bu_code + authorized_customer_name + authorized_item_type", "strategy": "check", "target_schema": "scd", "check_cols": "all", "invalidate_hard_deletes": true}, "created_at": 1728687173.9588912, "relation_name": "\"netsuite\".\"scd\".\"historized_user_rls\"", "raw_code": "\n\n{{\n    config (\n      unique_key    = \"user_email + authorized_bu_code + authorized_customer_name + authorized_item_type\",\n      strategy      = 'check',\n      target_schema = 'scd',\n      check_cols    = 'all',\n      invalidate_hard_deletes = True\n    )\n}}\n\nSELECT\n  user_email\n  , authorized_bu_code\n  , authorized_customer_name\n  , authorized_item_type\n  \nFROM {{ ref(\"user_rls\") }}\n\n", "language": "sql", "refs": [{"name": "user_rls", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.netsuite_project.user_rls"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\n\n\nSELECT\n  user_email\n  , authorized_bu_code\n  , authorized_customer_name\n  , authorized_item_type\n  \nFROM \"netsuite\".\"prod_stg\".\"user_rls\"\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.netsuite_project.historized_bu": {"database": "netsuite", "schema": "scd", "name": "historized_bu", "resource_type": "snapshot", "package_name": "netsuite_project", "path": "historized_bu.sql", "original_file_path": "snapshots/historized_bu.sql", "unique_id": "snapshot.netsuite_project.historized_bu", "fqn": ["netsuite_project", "historized_bu", "historized_bu"], "alias": "historized_bu", "checksum": {"name": "sha256", "checksum": "4220385f4b266a14481a0ee34d9eb499664f8bed8866716181ff049669287e11"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "bu_nsid", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "check", "target_schema": "scd", "target_database": null, "updated_at": null, "check_cols": "all"}, "tags": [], "description": "This table defines and historizes the business unit dimension with all its attributes.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://snapshots/schema.yml", "build_path": null, "unrendered_config": {"unique_key": "bu_nsid", "strategy": "check", "target_schema": "scd", "check_cols": "all"}, "created_at": 1728687173.9573288, "relation_name": "\"netsuite\".\"scd\".\"historized_bu\"", "raw_code": "\n\n{{\n    config (\n      unique_key    = var(\"business_unit_key\")\n      , strategy      = 'check'\n      , target_schema = 'scd'\n      , check_cols    = 'all'\n    )\n}}\n\nSELECT\n  bu.bu_nsid\n  , bu.bu_code\n  , bu.bu_country_code\n  , bu.bu_currency\n  , bu.bu_legal_name\n  , bu.bu_commercial_group\nFROM {{ ref('subsidiary') }} bu\n\n", "language": "sql", "refs": [{"name": "subsidiary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.netsuite_project.subsidiary"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\n\n\nSELECT\n  bu.bu_nsid\n  , bu.bu_code\n  , bu.bu_country_code\n  , bu.bu_currency\n  , bu.bu_legal_name\n  , bu.bu_commercial_group\nFROM \"netsuite\".\"prod_stg\".\"subsidiary\" bu\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.netsuite_project.historized_customer": {"database": "netsuite", "schema": "scd", "name": "historized_customer", "resource_type": "snapshot", "package_name": "netsuite_project", "path": "historized_customer.sql", "original_file_path": "snapshots/historized_customer.sql", "unique_id": "snapshot.netsuite_project.historized_customer", "fqn": ["netsuite_project", "historized_customer", "historized_customer"], "alias": "historized_customer", "checksum": {"name": "sha256", "checksum": "77d8ea0c905574965e990da176cc16ba54a5ae94315eda70b5d44ce509728218"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "customer_nsid", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "check", "target_schema": "scd", "target_database": null, "updated_at": null, "check_cols": "all"}, "tags": [], "description": "This table defines and historizes the customer dimension with all its attributes.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://snapshots/schema.yml", "build_path": null, "unrendered_config": {"unique_key": "customer_nsid", "strategy": "check", "target_schema": "scd", "check_cols": "all"}, "created_at": 1728687173.9579067, "relation_name": "\"netsuite\".\"scd\".\"historized_customer\"", "raw_code": "\n\n{{\n    config(\n      unique_key    = var(\"customer_key\")\n      , strategy      = 'check'\n      , target_schema = 'scd'\n      , check_cols    = 'all'\n    )\n}}\n\nSELECT\n  cu.customer_nsid\n  , cu.customer_name\n  , cu.customer_tier\nFROM {{ ref('customer') }} cu\n\n", "language": "sql", "refs": [{"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.netsuite_project.customer"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\n\n\nSELECT\n  cu.customer_nsid\n  , cu.customer_name\n  , cu.customer_tier\nFROM \"netsuite\".\"prod_stg\".\"customer\" cu\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.netsuite_project.historized_item": {"database": "netsuite", "schema": "scd", "name": "historized_item", "resource_type": "snapshot", "package_name": "netsuite_project", "path": "historized_item.sql", "original_file_path": "snapshots/historized_item.sql", "unique_id": "snapshot.netsuite_project.historized_item", "fqn": ["netsuite_project", "historized_item", "historized_item"], "alias": "historized_item", "checksum": {"name": "sha256", "checksum": "924337680ef9c2a39288302babaab234dd965706baeafcaa8ca614e36bc79edd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "item_nsid", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "check", "target_schema": "scd", "target_database": null, "updated_at": null, "check_cols": "all"}, "tags": [], "description": "This table defines and historizes the item dimension with all its attributes.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://snapshots/schema.yml", "build_path": null, "unrendered_config": {"unique_key": "item_nsid", "strategy": "check", "target_schema": "scd", "check_cols": "all"}, "created_at": 1728687173.9583938, "relation_name": "\"netsuite\".\"scd\".\"historized_item\"", "raw_code": "\n\n{{\n    config(\n      unique_key    = var(\"item_key\"),\n      strategy      = 'check',\n      target_schema = 'scd',\n      check_cols    = 'all'\n    )\n}}\n\nSELECT\n  it.item_nsid\n  , it.item_name\n  , it.item_code\n  , it.item_type\n  , it.project_code\n  , it_cat.item_category\n  , it_cat.item_sub_category\n  , it_pat.item_pattern\n  \nFROM {{ ref('item') }} it\n  LEFT OUTER JOIN {{ ref('item_category') }} it_cat \n    ON it.item_category_nsid = it_cat.item_category_nsid\n  LEFT OUTER JOIN {{ ref('item_pattern') }} it_pat\n    ON it.item_pattern_nsid = it_pat.item_pattern_nsid\n\n", "language": "sql", "refs": [{"name": "item", "package": null, "version": null}, {"name": "item_category", "package": null, "version": null}, {"name": "item_pattern", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.netsuite_project.item", "seed.netsuite_project.item_category", "seed.netsuite_project.item_pattern"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\n\n\nSELECT\n  it.item_nsid\n  , it.item_name\n  , it.item_code\n  , it.item_type\n  , it.project_code\n  , it_cat.item_category\n  , it_cat.item_sub_category\n  , it_pat.item_pattern\n  \nFROM \"netsuite\".\"prod_stg\".\"item\" it\n  LEFT OUTER JOIN \"netsuite\".\"prod_stg\".\"item_category\" it_cat \n    ON it.item_category_nsid = it_cat.item_category_nsid\n  LEFT OUTER JOIN \"netsuite\".\"prod_stg\".\"item_pattern\" it_pat\n    ON it.item_pattern_nsid = it_pat.item_pattern_nsid\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.netsuite_project.test_incremental_load": {"database": "netsuite", "schema": "prod_dbt_test__audit", "name": "test_incremental_load", "resource_type": "test", "package_name": "netsuite_project", "path": "test_incremental_load.sql", "original_file_path": "tests/test_incremental_load.sql", "unique_id": "test.netsuite_project.test_incremental_load", "fqn": ["netsuite_project", "test_incremental_load"], "alias": "test_incremental_load", "checksum": {"name": "sha256", "checksum": "c40f870778c1df757f8c2b3ab119ae3bf8c89e8867cc61d98f616b807b973353"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error"}, "created_at": 1728687173.4587312, "relation_name": null, "raw_code": "{# \n\tThe incremental load of the DWH is expected to return the same rows as the rows in the staging area.\n\tIf there is any discrepancy, this test will return a fail. \n#}\n\n{{ config ( \n\tseverity = 'error' \n\t)\n}}\n\n{% set excluded_columns_comparison = [var(\"dbt_load_datetime_col_name\"), var(\"dbt_run_id_col_name\")] %}\n\nWITH cte_incremental_table AS (\nSELECT\n\t{{ dbt_utils.star(from=ref('transaction_with_line'), except =  excluded_columns_comparison) }}\n\t, CHECKSUM ({{ dbt_utils.star(from=ref('transaction_with_line'), except = excluded_columns_comparison ) }} ) AS checksum_result\nFROM {{ ref(\"transaction_with_line\") }} )\n\n, cte_current_table AS (\nSELECT\n\t{{ dbt_utils.star(from=ref('prep_transaction_with_lines'), except =  excluded_columns_comparison) }}\n\t, CHECKSUM ({{ dbt_utils.star(from=ref('prep_transaction_with_lines'), except = excluded_columns_comparison ) }} ) AS checksum_result\nFROM {{ ref(\"prep_transaction_with_lines\") }} )\n\nSELECT \n\tcte_incremental_table.transaction_nsid\t\t\tAS incremental_transaction_nsid\n    , cte_incremental_table.transaction_line_nsid\tAS incremental_transaction_line_nsid\n\t, cte_current_table.transaction_nsid\t\t\tAS current_transaction_nsid\n    , cte_current_table.transaction_line_nsid\t\tAS current_transaction_line_nsid\n\t, CASE \n\t\tWHEN cte_incremental_table.transaction_nsid IS NOT NULL THEN 'Hash present in incremental table exclusively'\n\t\tWHEN cte_current_table.transaction_nsid IS NOT NULL THEN 'Hash present in current table exclusively'\n\tEND \t\t\t\t\t\t\t\t\t\t\tAS control_warning_description\n\t\nFROM cte_incremental_table\nFULL OUTER JOIN cte_current_table\n\tON cte_incremental_table.checksum_result = cte_current_table.checksum_result\nWHERE cte_incremental_table.checksum_result IS NULL\n\tOR cte_current_table.checksum_result IS NULL", "language": "sql", "refs": [{"name": "transaction_with_line", "package": null, "version": null}, {"name": "transaction_with_line", "package": null, "version": null}, {"name": "transaction_with_line", "package": null, "version": null}, {"name": "prep_transaction_with_lines", "package": null, "version": null}, {"name": "prep_transaction_with_lines", "package": null, "version": null}, {"name": "prep_transaction_with_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.netsuite_project.transaction_with_line", "model.netsuite_project.prep_transaction_with_lines"]}, "compiled_path": "target/compiled/netsuite_project/tests/test_incremental_load.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nWITH cte_incremental_table AS (\nSELECT\n\t\"transaction_nsid\",\n  \"transaction_line_nsid\",\n  \"transaction_last_modified_date\",\n  \"transaction_line_last_modified_date\",\n  \"transaction_type\",\n  \"transaction_number\",\n  \"transaction_status\",\n  \"transaction_date\",\n  \"expected_delivery_date\",\n  \"foreign_amount\",\n  \"foreign_currency\",\n  \"quantity\",\n  \"bu_rate\",\n  \"bu_amount\",\n  \"fk_item_nsid\",\n  \"fk_bu_nsid\",\n  \"fk_customer_nsid\"\n\t, CHECKSUM (\"transaction_nsid\",\n  \"transaction_line_nsid\",\n  \"transaction_last_modified_date\",\n  \"transaction_line_last_modified_date\",\n  \"transaction_type\",\n  \"transaction_number\",\n  \"transaction_status\",\n  \"transaction_date\",\n  \"expected_delivery_date\",\n  \"foreign_amount\",\n  \"foreign_currency\",\n  \"quantity\",\n  \"bu_rate\",\n  \"bu_amount\",\n  \"fk_item_nsid\",\n  \"fk_bu_nsid\",\n  \"fk_customer_nsid\" ) AS checksum_result\nFROM \"netsuite\".\"prod_dwh\".\"transaction_with_line\" )\n\n, cte_current_table AS (\nSELECT\n\t\"transaction_nsid\",\n  \"transaction_line_nsid\",\n  \"transaction_last_modified_date\",\n  \"transaction_line_last_modified_date\",\n  \"transaction_type\",\n  \"transaction_number\",\n  \"transaction_status\",\n  \"transaction_date\",\n  \"expected_delivery_date\",\n  \"foreign_amount\",\n  \"foreign_currency\",\n  \"quantity\",\n  \"bu_rate\",\n  \"bu_amount\",\n  \"fk_item_nsid\",\n  \"fk_bu_nsid\",\n  \"fk_customer_nsid\"\n\t, CHECKSUM (\"transaction_nsid\",\n  \"transaction_line_nsid\",\n  \"transaction_last_modified_date\",\n  \"transaction_line_last_modified_date\",\n  \"transaction_type\",\n  \"transaction_number\",\n  \"transaction_status\",\n  \"transaction_date\",\n  \"expected_delivery_date\",\n  \"foreign_amount\",\n  \"foreign_currency\",\n  \"quantity\",\n  \"bu_rate\",\n  \"bu_amount\",\n  \"fk_item_nsid\",\n  \"fk_bu_nsid\",\n  \"fk_customer_nsid\" ) AS checksum_result\nFROM \"netsuite\".\"prod_prp\".\"prep_transaction_with_lines\" )\n\nSELECT \n\tcte_incremental_table.transaction_nsid\t\t\tAS incremental_transaction_nsid\n    , cte_incremental_table.transaction_line_nsid\tAS incremental_transaction_line_nsid\n\t, cte_current_table.transaction_nsid\t\t\tAS current_transaction_nsid\n    , cte_current_table.transaction_line_nsid\t\tAS current_transaction_line_nsid\n\t, CASE \n\t\tWHEN cte_incremental_table.transaction_nsid IS NOT NULL THEN 'Hash present in incremental table exclusively'\n\t\tWHEN cte_current_table.transaction_nsid IS NOT NULL THEN 'Hash present in current table exclusively'\n\tEND \t\t\t\t\t\t\t\t\t\t\tAS control_warning_description\n\t\nFROM cte_incremental_table\nFULL OUTER JOIN cte_current_table\n\tON cte_incremental_table.checksum_result = cte_current_table.checksum_result\nWHERE cte_incremental_table.checksum_result IS NULL\n\tOR cte_current_table.checksum_result IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.netsuite_project.item": {"database": "netsuite", "schema": "prod_stg", "name": "item", "resource_type": "seed", "package_name": "netsuite_project", "path": "stg/item.csv", "original_file_path": "seeds/stg/item.csv", "unique_id": "seed.netsuite_project.item", "fqn": ["netsuite_project", "stg", "item"], "alias": "item", "checksum": {"name": "path", "checksum": "seeds/stg/item.csv"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ";", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "stg", "delimiter": ";"}, "created_at": 1728687173.6235802, "relation_name": "\"netsuite\".\"prod_stg\".\"item\"", "raw_code": "", "root_path": "/netsuite_project", "depends_on": {"macros": []}}, "seed.netsuite_project.customer": {"database": "netsuite", "schema": "prod_stg", "name": "customer", "resource_type": "seed", "package_name": "netsuite_project", "path": "stg/customer.csv", "original_file_path": "seeds/stg/customer.csv", "unique_id": "seed.netsuite_project.customer", "fqn": ["netsuite_project", "stg", "customer"], "alias": "customer", "checksum": {"name": "sha256", "checksum": "ba768199b2dda12ed9cc06f9da5eff135d5541386964a069c00f81047f0a8a07"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ";", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "stg", "delimiter": ";"}, "created_at": 1728687173.626368, "relation_name": "\"netsuite\".\"prod_stg\".\"customer\"", "raw_code": "", "root_path": "/netsuite_project", "depends_on": {"macros": []}}, "seed.netsuite_project.item_category": {"database": "netsuite", "schema": "prod_stg", "name": "item_category", "resource_type": "seed", "package_name": "netsuite_project", "path": "stg/item_category.csv", "original_file_path": "seeds/stg/item_category.csv", "unique_id": "seed.netsuite_project.item_category", "fqn": ["netsuite_project", "stg", "item_category"], "alias": "item_category", "checksum": {"name": "sha256", "checksum": "8a0e9ccb051b4115b7d775be006bcd5574d08606f1e8a9ce3a14675f1a5133b7"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ";", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "stg", "delimiter": ";"}, "created_at": 1728687173.628831, "relation_name": "\"netsuite\".\"prod_stg\".\"item_category\"", "raw_code": "", "root_path": "/netsuite_project", "depends_on": {"macros": []}}, "seed.netsuite_project.subsidiary": {"database": "netsuite", "schema": "prod_stg", "name": "subsidiary", "resource_type": "seed", "package_name": "netsuite_project", "path": "stg/subsidiary.csv", "original_file_path": "seeds/stg/subsidiary.csv", "unique_id": "seed.netsuite_project.subsidiary", "fqn": ["netsuite_project", "stg", "subsidiary"], "alias": "subsidiary", "checksum": {"name": "sha256", "checksum": "a8249c9cdda8f32df3f5c78161fcd5f55300c31ddad3408c90e6a55fb9bb67d7"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ";", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "stg", "delimiter": ";"}, "created_at": 1728687173.6314762, "relation_name": "\"netsuite\".\"prod_stg\".\"subsidiary\"", "raw_code": "", "root_path": "/netsuite_project", "depends_on": {"macros": []}}, "seed.netsuite_project.transactionline": {"database": "netsuite", "schema": "prod_stg", "name": "transactionline", "resource_type": "seed", "package_name": "netsuite_project", "path": "stg/transactionline.csv", "original_file_path": "seeds/stg/transactionline.csv", "unique_id": "seed.netsuite_project.transactionline", "fqn": ["netsuite_project", "stg", "transactionline"], "alias": "transactionline", "checksum": {"name": "path", "checksum": "seeds/stg/transactionline.csv"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ";", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "stg", "delimiter": ";"}, "created_at": 1728687173.6338975, "relation_name": "\"netsuite\".\"prod_stg\".\"transactionline\"", "raw_code": "", "root_path": "/netsuite_project", "depends_on": {"macros": []}}, "seed.netsuite_project.sales_budget": {"database": "netsuite", "schema": "prod_stg", "name": "sales_budget", "resource_type": "seed", "package_name": "netsuite_project", "path": "stg/sales_budget.csv", "original_file_path": "seeds/stg/sales_budget.csv", "unique_id": "seed.netsuite_project.sales_budget", "fqn": ["netsuite_project", "stg", "sales_budget"], "alias": "sales_budget", "checksum": {"name": "sha256", "checksum": "ae01166871bb74a934bd127a453341d19056393a461c3615de5d59d64de93ff8"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ";", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "stg", "delimiter": ";"}, "created_at": 1728687173.6363142, "relation_name": "\"netsuite\".\"prod_stg\".\"sales_budget\"", "raw_code": "", "root_path": "/netsuite_project", "depends_on": {"macros": []}}, "seed.netsuite_project.deleted_records": {"database": "netsuite", "schema": "prod_stg", "name": "deleted_records", "resource_type": "seed", "package_name": "netsuite_project", "path": "stg/deleted_records.csv", "original_file_path": "seeds/stg/deleted_records.csv", "unique_id": "seed.netsuite_project.deleted_records", "fqn": ["netsuite_project", "stg", "deleted_records"], "alias": "deleted_records", "checksum": {"name": "sha256", "checksum": "458012059d92cac33efbaacfb239abe1aa79964ab7980c93ca107d07de7682c0"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ";", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "stg", "delimiter": ";"}, "created_at": 1728687173.638742, "relation_name": "\"netsuite\".\"prod_stg\".\"deleted_records\"", "raw_code": "", "root_path": "/netsuite_project", "depends_on": {"macros": []}}, "seed.netsuite_project.transaction": {"database": "netsuite", "schema": "prod_stg", "name": "transaction", "resource_type": "seed", "package_name": "netsuite_project", "path": "stg/transaction.csv", "original_file_path": "seeds/stg/transaction.csv", "unique_id": "seed.netsuite_project.transaction", "fqn": ["netsuite_project", "stg", "transaction"], "alias": "transaction", "checksum": {"name": "path", "checksum": "seeds/stg/transaction.csv"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ";", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "stg", "delimiter": ";"}, "created_at": 1728687173.6411917, "relation_name": "\"netsuite\".\"prod_stg\".\"transaction\"", "raw_code": "", "root_path": "/netsuite_project", "depends_on": {"macros": []}}, "seed.netsuite_project.user_rls": {"database": "netsuite", "schema": "prod_stg", "name": "user_rls", "resource_type": "seed", "package_name": "netsuite_project", "path": "stg/user_rls.csv", "original_file_path": "seeds/stg/user_rls.csv", "unique_id": "seed.netsuite_project.user_rls", "fqn": ["netsuite_project", "stg", "user_rls"], "alias": "user_rls", "checksum": {"name": "sha256", "checksum": "cdb2ea84482240ae01c7e5d9bc24bb099068d6248b1b45bdd60f3cf53665c9b7"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ";", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "stg", "delimiter": ";"}, "created_at": 1728687173.6437013, "relation_name": "\"netsuite\".\"prod_stg\".\"user_rls\"", "raw_code": "", "root_path": "/netsuite_project", "depends_on": {"macros": []}}, "seed.netsuite_project.item_pattern": {"database": "netsuite", "schema": "prod_stg", "name": "item_pattern", "resource_type": "seed", "package_name": "netsuite_project", "path": "stg/item_pattern.csv", "original_file_path": "seeds/stg/item_pattern.csv", "unique_id": "seed.netsuite_project.item_pattern", "fqn": ["netsuite_project", "stg", "item_pattern"], "alias": "item_pattern", "checksum": {"name": "sha256", "checksum": "f6acd628422db8703d288635ffbf70b6e7a28ac5ae88c59a0ebc59a2b3ba1ee5"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ";", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "stg", "delimiter": ";"}, "created_at": 1728687173.646119, "relation_name": "\"netsuite\".\"prod_stg\".\"item_pattern\"", "raw_code": "", "root_path": "/netsuite_project", "depends_on": {"macros": []}}, "seed.netsuite_project.fx_avg_rate": {"database": "netsuite", "schema": "prod_stg", "name": "fx_avg_rate", "resource_type": "seed", "package_name": "netsuite_project", "path": "stg/fx_avg_rate.csv", "original_file_path": "seeds/stg/fx_avg_rate.csv", "unique_id": "seed.netsuite_project.fx_avg_rate", "fqn": ["netsuite_project", "stg", "fx_avg_rate"], "alias": "fx_avg_rate", "checksum": {"name": "sha256", "checksum": "fec521ae4986732d31f3e41addabfaf351767425fbb4e110e9d45888cfe91535"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ";", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "stg", "delimiter": ";"}, "created_at": 1728687173.6485412, "relation_name": "\"netsuite\".\"prod_stg\".\"fx_avg_rate\"", "raw_code": "", "root_path": "/netsuite_project", "depends_on": {"macros": []}}, "test.netsuite_project.not_null_prep_budget_for_union_live_bu_code.d946ceafd7": {"database": "netsuite", "schema": "prod_dbt_test__audit", "name": "not_null_prep_budget_for_union_live_bu_code", "resource_type": "test", "package_name": "netsuite_project", "path": "not_null_prep_budget_for_union_live_bu_code.sql", "original_file_path": "models/prp/schema.yml", "unique_id": "test.netsuite_project.not_null_prep_budget_for_union_live_bu_code.d946ceafd7", "fqn": ["netsuite_project", "prp", "not_null_prep_budget_for_union_live_bu_code"], "alias": "not_null_prep_budget_for_union_live_bu_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "WARN"}, "created_at": 1728687173.8730543, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "prep_budget_for_union", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_project.prep_budget_for_union"]}, "compiled_path": "target/compiled/netsuite_project/models/prp/schema.yml/not_null_prep_budget_for_union_live_bu_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect live_bu_code\nfrom \"netsuite\".\"prod_prp\".\"prep_budget_for_union\"\nwhere live_bu_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "live_bu_code", "file_key_name": "models.prep_budget_for_union", "attached_node": "model.netsuite_project.prep_budget_for_union", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "live_bu_code", "model": "{{ get_where_subquery(ref('prep_budget_for_union')) }}"}, "namespace": null}}, "test.netsuite_project.unexpected_opportunity_status.a0dda7bad4": {"database": "netsuite", "schema": "prod_dbt_test__audit", "name": "unexpected_opportunity_status", "resource_type": "test", "package_name": "netsuite_project", "path": "unexpected_opportunity_status.sql", "original_file_path": "models/dwh/schema.yml", "unique_id": "test.netsuite_project.unexpected_opportunity_status.a0dda7bad4", "fqn": ["netsuite_project", "dwh", "unexpected_opportunity_status"], "alias": "unexpected_opportunity_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": "transaction_type = 'Opportunity'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "where": "transaction_type = 'Opportunity'"}, "created_at": 1728687173.8796268, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",where=\"transaction_type = 'Opportunity'\") }}", "language": "sql", "refs": [{"name": "transaction_with_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_project.transaction_with_line"]}, "compiled_path": "target/compiled/netsuite_project/models/dwh/schema.yml/unexpected_opportunity_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        transaction_status as value_field,\n        count(*) as n_records\n\n    from (select * from \"netsuite\".\"prod_dwh\".\"transaction_with_line\" where transaction_type = 'Opportunity') dbt_subquery\n    group by transaction_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Under Discussion','Ongoing','Closed - Won','Closed - Lost'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_status", "file_key_name": "models.transaction_with_line", "attached_node": "model.netsuite_project.transaction_with_line", "test_metadata": {"name": "accepted_values", "kwargs": {"values": "{{ var(\"opportunity_open_scope\") + var(\"opportunity_closed_scope\") }}", "column_name": "transaction_status", "model": "{{ get_where_subquery(ref('transaction_with_line')) }}"}, "namespace": null}}, "test.netsuite_project.unexpected_sales_order_status.5f4b39d9f8": {"database": "netsuite", "schema": "prod_dbt_test__audit", "name": "unexpected_sales_order_status", "resource_type": "test", "package_name": "netsuite_project", "path": "unexpected_sales_order_status.sql", "original_file_path": "models/dwh/schema.yml", "unique_id": "test.netsuite_project.unexpected_sales_order_status.5f4b39d9f8", "fqn": ["netsuite_project", "dwh", "unexpected_sales_order_status"], "alias": "unexpected_sales_order_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": "transaction_type = 'Sales Order'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "where": "transaction_type = 'Sales Order'"}, "created_at": 1728687173.9031975, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",where=\"transaction_type = 'Sales Order'\") }}", "language": "sql", "refs": [{"name": "transaction_with_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_project.transaction_with_line"]}, "compiled_path": "target/compiled/netsuite_project/models/dwh/schema.yml/unexpected_sales_order_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        transaction_status as value_field,\n        count(*) as n_records\n\n    from (select * from \"netsuite\".\"prod_dwh\".\"transaction_with_line\" where transaction_type = 'Sales Order') dbt_subquery\n    group by transaction_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Under Discussion','Ongoing','Closed - Won','Closed - Lost'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_status", "file_key_name": "models.transaction_with_line", "attached_node": "model.netsuite_project.transaction_with_line", "test_metadata": {"name": "accepted_values", "kwargs": {"values": "{{ var(\"sales_order_open_scope\") + var(\"sales_order_closed_scope\") }}", "column_name": "transaction_status", "model": "{{ get_where_subquery(ref('transaction_with_line')) }}"}, "namespace": null}}, "test.netsuite_project.not_null_historized_transaction_with_line_transaction_nsid.4b11b8bce6": {"database": "netsuite", "schema": "prod_dbt_test__audit", "name": "not_null_historized_transaction_with_line_transaction_nsid", "resource_type": "test", "package_name": "netsuite_project", "path": "not_null_historized_transaction_with_line_transaction_nsid.sql", "original_file_path": "models/dwh/schema.yml", "unique_id": "test.netsuite_project.not_null_historized_transaction_with_line_transaction_nsid.4b11b8bce6", "fqn": ["netsuite_project", "dwh", "not_null_historized_transaction_with_line_transaction_nsid"], "alias": "not_null_historized_transaction_with_line_transaction_nsid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1728687173.9084485, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "historized_transaction_with_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_project.historized_transaction_with_line"]}, "compiled_path": "target/compiled/netsuite_project/models/dwh/schema.yml/not_null_historized_transaction_with_line_transaction_nsid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_nsid\nfrom \"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\"\nwhere transaction_nsid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_nsid", "file_key_name": "models.historized_transaction_with_line", "attached_node": "model.netsuite_project.historized_transaction_with_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_nsid", "model": "{{ get_where_subquery(ref('historized_transaction_with_line')) }}"}, "namespace": null}}, "test.netsuite_project.not_null_historized_transaction_with_line_transaction_line_nsid.c46e56a2e1": {"database": "netsuite", "schema": "prod_dbt_test__audit", "name": "not_null_historized_transaction_with_line_transaction_line_nsid", "resource_type": "test", "package_name": "netsuite_project", "path": "not_null_historized_transaction_with_line_transaction_line_nsid.sql", "original_file_path": "models/dwh/schema.yml", "unique_id": "test.netsuite_project.not_null_historized_transaction_with_line_transaction_line_nsid.c46e56a2e1", "fqn": ["netsuite_project", "dwh", "not_null_historized_transaction_with_line_transaction_line_nsid"], "alias": "not_null_historized_transaction_with_line_transaction_line_nsid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1728687173.9103482, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "historized_transaction_with_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_project.historized_transaction_with_line"]}, "compiled_path": "target/compiled/netsuite_project/models/dwh/schema.yml/not_null_historized_transaction_with_line_transaction_line_nsid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_line_nsid\nfrom \"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\"\nwhere transaction_line_nsid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_line_nsid", "file_key_name": "models.historized_transaction_with_line", "attached_node": "model.netsuite_project.historized_transaction_with_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_line_nsid", "model": "{{ get_where_subquery(ref('historized_transaction_with_line')) }}"}, "namespace": null}}, "test.netsuite_project.dbt_utils_unique_combination_of_columns_historized_transaction_with_line_var_dbt_snapshot_col_name___transaction_nsid__transaction_line_nsid.8021ab7f24": {"database": "netsuite", "schema": "prod_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_historized_transaction_with_line_var_dbt_snapshot_col_name___transaction_nsid__transaction_line_nsid", "resource_type": "test", "package_name": "netsuite_project", "path": "dbt_utils_unique_combination_o_9d7549ace7be1cd2028d3aace98f54e6.sql", "original_file_path": "models/dwh/schema.yml", "unique_id": "test.netsuite_project.dbt_utils_unique_combination_of_columns_historized_transaction_with_line_var_dbt_snapshot_col_name___transaction_nsid__transaction_line_nsid.8021ab7f24", "fqn": ["netsuite_project", "dwh", "dbt_utils_unique_combination_of_columns_historized_transaction_with_line_var_dbt_snapshot_col_name___transaction_nsid__transaction_line_nsid"], "alias": "dbt_utils_unique_combination_o_9d7549ace7be1cd2028d3aace98f54e6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9d7549ace7be1cd2028d3aace98f54e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9d7549ace7be1cd2028d3aace98f54e6"}, "created_at": 1728687173.9120858, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9d7549ace7be1cd2028d3aace98f54e6\") }}", "language": "sql", "refs": [{"name": "historized_transaction_with_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_project.historized_transaction_with_line"]}, "compiled_path": "target/compiled/netsuite_project/models/dwh/schema.yml/dbt_utils_unique_combination_o_9d7549ace7be1cd2028d3aace98f54e6.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        dbt_functional_snapshot_date, transaction_nsid, transaction_line_nsid\n    from \"netsuite\".\"prod_dwh\".\"historized_transaction_with_line\"\n    group by dbt_functional_snapshot_date, transaction_nsid, transaction_line_nsid\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.historized_transaction_with_line", "attached_node": "model.netsuite_project.historized_transaction_with_line", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["var(\"dbt_snapshot_col_name\")", "transaction_nsid", "transaction_line_nsid"], "model": "{{ get_where_subquery(ref('historized_transaction_with_line')) }}"}, "namespace": "dbt_utils"}}, "test.netsuite_project.not_null_fact_all_transactions_with_line_fx_rate_original_to_usd.0896bf129b": {"database": "netsuite", "schema": "prod_dbt_test__audit", "name": "not_null_fact_all_transactions_with_line_fx_rate_original_to_usd", "resource_type": "test", "package_name": "netsuite_project", "path": "not_null_fact_all_transactions_9cd00e9d7774eb63817f75d8f4508cf6.sql", "original_file_path": "models/bus/schema.yml", "unique_id": "test.netsuite_project.not_null_fact_all_transactions_with_line_fx_rate_original_to_usd.0896bf129b", "fqn": ["netsuite_project", "bus", "not_null_fact_all_transactions_with_line_fx_rate_original_to_usd"], "alias": "not_null_fact_all_transactions_9cd00e9d7774eb63817f75d8f4508cf6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fact_all_transactions_9cd00e9d7774eb63817f75d8f4508cf6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fact_all_transactions_9cd00e9d7774eb63817f75d8f4508cf6", "severity": "ERROR"}, "created_at": 1728687173.9285324, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"not_null_fact_all_transactions_9cd00e9d7774eb63817f75d8f4508cf6\") }}", "language": "sql", "refs": [{"name": "fact_all_transactions_with_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_project.fact_all_transactions_with_line"]}, "compiled_path": "target/compiled/netsuite_project/models/bus/schema.yml/not_null_fact_all_transactions_9cd00e9d7774eb63817f75d8f4508cf6.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fx_rate_original_to_usd\nfrom \"netsuite\".\"prod_bus\".\"fact_all_transactions_with_line\"\nwhere fx_rate_original_to_usd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fx_rate_original_to_usd", "file_key_name": "models.fact_all_transactions_with_line", "attached_node": "model.netsuite_project.fact_all_transactions_with_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fx_rate_original_to_usd", "model": "{{ get_where_subquery(ref('fact_all_transactions_with_line')) }}"}, "namespace": null}}, "test.netsuite_project.not_null_fact_all_transactions_with_line_fx_rate_original_to_dynamic.80ae594c95": {"database": "netsuite", "schema": "prod_dbt_test__audit", "name": "not_null_fact_all_transactions_with_line_fx_rate_original_to_dynamic", "resource_type": "test", "package_name": "netsuite_project", "path": "not_null_fact_all_transactions_d78f80e52d51228c94206e0ee39c5842.sql", "original_file_path": "models/bus/schema.yml", "unique_id": "test.netsuite_project.not_null_fact_all_transactions_with_line_fx_rate_original_to_dynamic.80ae594c95", "fqn": ["netsuite_project", "bus", "not_null_fact_all_transactions_with_line_fx_rate_original_to_dynamic"], "alias": "not_null_fact_all_transactions_d78f80e52d51228c94206e0ee39c5842", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fact_all_transactions_d78f80e52d51228c94206e0ee39c5842", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_fact_all_transactions_d78f80e52d51228c94206e0ee39c5842", "severity": "ERROR"}, "created_at": 1728687173.9302974, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"not_null_fact_all_transactions_d78f80e52d51228c94206e0ee39c5842\") }}", "language": "sql", "refs": [{"name": "fact_all_transactions_with_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.netsuite_project.fact_all_transactions_with_line"]}, "compiled_path": "target/compiled/netsuite_project/models/bus/schema.yml/not_null_fact_all_transactions_d78f80e52d51228c94206e0ee39c5842.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fx_rate_original_to_dynamic\nfrom \"netsuite\".\"prod_bus\".\"fact_all_transactions_with_line\"\nwhere fx_rate_original_to_dynamic is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fx_rate_original_to_dynamic", "file_key_name": "models.fact_all_transactions_with_line", "attached_node": "model.netsuite_project.fact_all_transactions_with_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fx_rate_original_to_dynamic", "model": "{{ get_where_subquery(ref('fact_all_transactions_with_line')) }}"}, "namespace": null}}}, "sources": {}, "macros": {"macro.netsuite_project.column_dbt_load_datetime": {"name": "column_dbt_load_datetime", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/column_dbt_load_datetime.sql", "original_file_path": "macros/column_dbt_load_datetime.sql", "unique_id": "macro.netsuite_project.column_dbt_load_datetime", "macro_sql": "{% macro column_dbt_load_datetime() %}\n    CAST('{{ var(\"dbt_start_datetime\") }}' AS DATETIME2)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "This macro returns a SQL column which casts the Dbt start run date (i.e. load date) as a datetime.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://macros/schema.yml", "arguments": [], "created_at": 1728687173.9733853, "supported_languages": null}, "macro.netsuite_project.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/dbt_generate_schema_name.sql", "original_file_path": "macros/dbt_generate_schema_name.sql", "unique_id": "macro.netsuite_project.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n        {{ default_schema }}\n    {%- else -%}\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "This macro is an edited version of the built-in standard Dbt macro, to remove the user-specific schema generation.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://macros/schema.yml", "arguments": [], "created_at": 1728687173.9752948, "supported_languages": null}, "macro.netsuite_project.column_dbt_previous_month": {"name": "column_dbt_previous_month", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/column_dbt_previous_month.sql", "original_file_path": "macros/column_dbt_previous_month.sql", "unique_id": "macro.netsuite_project.column_dbt_previous_month", "macro_sql": "{% macro column_dbt_previous_month() %}\n    EOMONTH('{{ var(\"dbt_start_date\") }}', -1)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "This macro returns a SQL column which represents the last day of the previous month, based on the Dbt start run date. This is useful when Dbt automatically takes a monthly snapshot of the data, at the end of each month.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://macros/schema.yml", "arguments": [], "created_at": 1728687173.9738839, "supported_languages": null}, "macro.netsuite_project.sqlserver__concat": {"name": "sqlserver__concat", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/dbt_concat.sql", "original_file_path": "macros/dbt_concat.sql", "unique_id": "macro.netsuite_project.sqlserver__concat", "macro_sql": "{% macro sqlserver__concat(fields) -%}\n    {%- if fields|length > 1 %}\n        concat({{ fields|join(', ') }})\n    {# 10/03/2024 GLE : SQLServer requires to manage concat of a single field #}\n    {%- elif fields|length == 1 %}\n        concat({{ fields[0] }}, '')\n    {%- else %}\n        ''\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "This macro is an edited version of the built-in standard Dbt macro, to ensure syntax compability with TSQL and SQL Server Express.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://macros/schema.yml", "arguments": [], "created_at": 1728687173.9743557, "supported_languages": null}, "macro.netsuite_project.list_numerical_columns": {"name": "list_numerical_columns", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/list_numerical_columns.sql", "original_file_path": "macros/list_numerical_columns.sql", "unique_id": "macro.netsuite_project.list_numerical_columns", "macro_sql": "{% macro list_numerical_columns(model) %}\n    {% set results = adapter.get_columns_in_relation(ref(model)) %}\n    {% set numerical_columns = [] %}\n    {% for column in results %}\n        {% if column.data_type in ['int', 'integer', 'bigint', 'smallint', 'tinyint', 'decimal', 'numeric', 'float', 'double', 'real'] %}\n            {% do numerical_columns.append(column.name) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(numerical_columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1693225, "supported_languages": null}, "macro.netsuite_project.model_generate_dim_scd": {"name": "model_generate_dim_scd", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/model_generate_dim_scd.sql", "original_file_path": "macros/model_generate_dim_scd.sql", "unique_id": "macro.netsuite_project.model_generate_dim_scd", "macro_sql": "{% macro model_generate_dim_scd(column_key, table_name) %}\n\n    {% set excluded_columns = [column_key, 'dbt_scd_id', 'dbt_updated_at', 'dbt_valid_from', 'dbt_valid_to'] %}\n\n    {% set selected_columns_1 = [] %}\n    {% set selected_columns_2 = [] %}\n    {% set excluded_columns_meta = [] %}\n\n    {% for col_name in excluded_columns %}\n        {% set _ = excluded_columns_meta.append('hist.' ~ col_name) %}\n    {% endfor %}\n\n    {% for col in adapter.get_columns_in_relation(table_name) %}\n        {% if col.name not in excluded_columns %}\n            {% set _ = selected_columns_1.append('hist.' ~ col.name ~ ' AS hist_' ~ col.name) %}\n            {% set _ = selected_columns_2.append('live.' ~ col.name ~ ' AS live_' ~ col.name) %}        \n        {% endif %}\n    {% endfor %}\n\n    SELECT \n        {{ selected_columns_1 | join(', ') }}\n        , {{ selected_columns_2 | join(', ') }}\n        , {{ dbt_utils.generate_surrogate_key(['hist.' ~ column_key])}} AS pk_{{ column_key }}\n        , {{ excluded_columns_meta | join(', ') }}\n        , IIF ( ROW_NUMBER() OVER ( PARTITION BY hist.{{ column_key }} ORDER BY hist.dbt_valid_from ) = 1\n            , CAST('{{ var(\"past_proof_date\") }}' AS DATETIME2)\n            , hist.dbt_valid_from )                                                             AS scd_valid_from_fill_date\n        , COALESCE(hist.dbt_valid_to, cast('{{ var(\"future_proof_date\") }}' AS DATETIME2))      AS scd_valid_to_fill_date\n        , ROW_NUMBER() OVER ( PARTITION BY hist.{{ column_key }} ORDER BY hist.dbt_valid_from ) AS version_number\n    FROM  \n        {{ table_name }} AS hist\n        LEFT OUTER JOIN \n        ( SELECT * FROM {{ table_name }} WHERE dbt_valid_to IS NULL ) live\n            ON live.{{ column_key }} = hist.{{ column_key }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"]}, "description": "This macro creates a SQL statement that performs a self-join on a historized dimension table. Therefore, the macro creates a dimension table which contains both the historical attributes and the current attributes for the specified primary key.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://macros/schema.yml", "arguments": [{"name": "table_name", "type": null, "description": "Name of the historized dimension table that should be queried."}, {"name": "column_key", "type": null, "description": "Primary key of the dimension table - on which the self-join should be performed."}], "created_at": 1728687173.9795685, "supported_languages": null}, "macro.netsuite_project.column_dbt_load_date": {"name": "column_dbt_load_date", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/column_dbt_load_date.sql", "original_file_path": "macros/column_dbt_load_date.sql", "unique_id": "macro.netsuite_project.column_dbt_load_date", "macro_sql": "{% macro column_dbt_load_date() %}\n    CAST('{{ var(\"dbt_start_datetime\") }}' AS DATE)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "This macro returns a SQL column which casts the Dbt start run date (i.e. load date) as a date.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://macros/schema.yml", "arguments": [], "created_at": 1728687173.9728498, "supported_languages": null}, "macro.netsuite_project.admin_drop_all": {"name": "admin_drop_all", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/admin_drop_all_except_stg.sql", "original_file_path": "macros/admin_drop_all_except_stg.sql", "unique_id": "macro.netsuite_project.admin_drop_all", "macro_sql": "{% macro admin_drop_all(except_stg=False, specific_schema=None) -%}\n\n    {% if except_stg %}\n        {% set filter_condition = \"AND s.name NOT LIKE '%stg%'\" %}\n    {% else %}\n        {% set filter_condition = \"\" %}\n    {% endif %}\n    \n    {% if specific_schema %}\n        {% set schema_filter_condition = \"AND s.name LIKE '\" ~ specific_schema ~ \"%'\" %}\n    {% else %}\n        {% set schema_filter_condition = \"\" %}\n    {% endif %}\n    \n    {% set sql %}\n        DECLARE @sql NVARCHAR(MAX) = ''\n\n        -- Drop all views except those in the STG schema (if except_stg=True) and specific_schema (if provided)\n        SELECT @sql += 'DROP VIEW ' + QUOTENAME(s.name) + '.' + QUOTENAME(v.name) + ';'\n        FROM sys.views v\n        INNER JOIN sys.schemas s ON v.schema_id = s.schema_id\n        WHERE 1=1 {{ filter_condition }} {{ schema_filter_condition }}\n\n        -- Drop all tables except those in the STG schema (if except_stg=True) and specific_schema (if provided)\n        SELECT @sql += 'DROP TABLE ' + QUOTENAME(s.name) + '.' + QUOTENAME(t.name) + ';'\n        FROM sys.tables t   \n        INNER JOIN sys.schemas s ON t.schema_id = s.schema_id\n        WHERE 1=1 {{ filter_condition }} {{ schema_filter_condition }}\n\n        -- Execute the generated SQL\n        EXEC sp_executesql @sql\n    {% endset %}\n\n    {% do run_query(sql) %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1765, "supported_languages": null}, "macro.netsuite_project.hook_transaction_drop_pk_constraint": {"name": "hook_transaction_drop_pk_constraint", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/hook_transaction_drop_pk_constraint.sql", "original_file_path": "macros/hook_transaction_drop_pk_constraint.sql", "unique_id": "macro.netsuite_project.hook_transaction_drop_pk_constraint", "macro_sql": "{% macro hook_transaction_drop_pk_constraint() %}\n\n    {%- set target_relation = adapter.get_relation(\n        database=this.database,\n        schema=this.schema,\n        identifier=this.name) -%}\n    \n    {%- set table_exists = target_relation is not none -%}\n    \n    {%- if table_exists -%}\n\n        {% if not is_incremental() %}\n\n            ALTER TABLE {{ this }}\n            DROP CONSTRAINT IF EXISTS {{ var(\"pk_transaction_with_line\") }};\n\n        {% endif %}\n    \n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "This macro DROPs the primary key constraint on the transaction_line_nsid and transaction_nsid if it had been previously created inside the database. This is a mandatory step to create a primary key constraint inside the database. Indeed TSQL does not support \"ADD CONSTRAINT IF NOT EXISTS\".", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://macros/schema.yml", "arguments": [], "created_at": 1728687173.976687, "supported_languages": null}, "macro.netsuite_project.sqlserver__unpivot": {"name": "sqlserver__unpivot", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/dbt_unpivot.sql", "original_file_path": "macros/dbt_unpivot.sql", "unique_id": "macro.netsuite_project.sqlserver__unpivot", "macro_sql": "{% macro sqlserver__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast( {% if col.data_type == 'boolean' %}\n      \n            {# 10/03/2024 GLE : SQLServer requires [] for column names #}\n            [{{ dbt.cast_bool_to_text(col.column) }}]\n             {% else %}\n            [{{ col.column }}]\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "This macro is an edited version of the built-in standard Dbt macro, to ensure syntax compability with TSQL and SQL Server Express.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://macros/schema.yml", "arguments": [], "created_at": 1728687173.9757617, "supported_languages": null}, "macro.netsuite_project.hook_transaction_add_pk": {"name": "hook_transaction_add_pk", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/hook_transaction_add_pk.sql", "original_file_path": "macros/hook_transaction_add_pk.sql", "unique_id": "macro.netsuite_project.hook_transaction_add_pk", "macro_sql": "{% macro hook_transaction_add_pk() %}\n\n    {% if not is_incremental() %}\n\n        ALTER TABLE {{ this }}\n        ADD CONSTRAINT {{ var(\"pk_transaction_with_line\") }} PRIMARY KEY CLUSTERED ([transaction_nsid], [transaction_line_nsid]);\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "This macro ADDs the primary key constraint on the transaction_line_nsid and transaction_nsid.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://macros/schema.yml", "arguments": [], "created_at": 1728687173.9771469, "supported_languages": null}, "macro.netsuite_project.hook_transaction_add_not_null": {"name": "hook_transaction_add_not_null", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/hook_transaction_add_not_null.sql", "original_file_path": "macros/hook_transaction_add_not_null.sql", "unique_id": "macro.netsuite_project.hook_transaction_add_not_null", "macro_sql": "{% macro hook_transaction_add_not_null() %}\n\n    {% if not is_incremental() %}\n\n        ALTER TABLE {{ this }}\n        ALTER COLUMN [transaction_nsid] INT NOT NULL;\n        \n        ALTER TABLE {{ this }}\n        ALTER COLUMN [transaction_line_nsid] INT NOT NULL;\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "This macro adds a NON NULL constraint on the transaction_line_nsid and transaction_nsid. This is a mandatory step to create a primary key constraint inside the database.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://macros/schema.yml", "arguments": [], "created_at": 1728687173.9762168, "supported_languages": null}, "macro.netsuite_project.sqlserver__create_columns": {"name": "sqlserver__create_columns", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/dbt_create_columns.sql", "original_file_path": "macros/dbt_create_columns.sql", "unique_id": "macro.netsuite_project.sqlserver__create_columns", "macro_sql": "{% macro sqlserver__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      {# 10/03/2024 GLE : SQLServer requires 'add' instead of 'add column' #}\n      alter table {{ relation }} add \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "This macro is an edited version of the built-in standard Dbt macro, to ensure syntax compability with TSQL and SQL Server Express.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://macros/schema.yml", "arguments": [], "created_at": 1728687173.9748418, "supported_languages": null}, "macro.netsuite_project.model_generate_dataset_rls": {"name": "model_generate_dataset_rls", "resource_type": "macro", "package_name": "netsuite_project", "path": "macros/model_generate_dataset_rls.sql", "original_file_path": "macros/model_generate_dataset_rls.sql", "unique_id": "macro.netsuite_project.model_generate_dataset_rls", "macro_sql": "{% macro model_generate_dataset_rls(data_model, scenario) %}\n\n{% set scenario_conditions = {\n    \"customer_bu_item\": \"\"\"\n        (ds.live_customer_name = rls.authorized_customer_name OR rls.authorized_customer_name = 'All')\n        AND (ds.live_bu_code = rls.authorized_bu_code OR rls.authorized_bu_code = 'All')\n        AND (ds.live_item_type = rls.authorized_item_type OR rls.authorized_item_type = 'All')\n    \"\"\",\n    \"customer_bu\": \"\"\"\n        (ds.live_customer_name = rls.authorized_customer_name OR rls.authorized_customer_name = 'All')\n        AND (ds.live_bu_code = rls.authorized_bu_code OR rls.authorized_bu_code = 'All')\n        AND (rls.authorized_item_type = 'All')\n    \"\"\",\n    \"bu\": \"\"\"\n        (rls.authorized_customer_name = 'All')\n        AND (ds.live_bu_code = rls.authorized_bu_code OR rls.authorized_bu_code = 'All')\n        AND (rls.authorized_item_type = 'All')        \n    \"\"\",\n    \"customer\": \"\"\"\n        (ds.live_customer_name = rls.authorized_customer_name OR rls.authorized_customer_name = 'All')\n        AND (rls.authorized_bu_code = 'All')\n        AND (rls.authorized_item_type = 'All')    \n    \"\"\"\n} %}\n\n{% set condition = scenario_conditions[scenario] %}\n\n{% set sql_statement %}\n    SELECT MAX(row_id) AS max_row_id FROM {{ ref (\"prep_rls_normalize\") }}\n{% endset %}\n{%- set max_row_id = dbt_utils.get_single_value(sql_statement) -%}\n\n{% if execute %}\n    {% for i in range(1, max_row_id + 1) %}\n        SELECT\n            ds.*,\n            rls.user_email\n        FROM {{ data_model }} ds\n        LEFT JOIN {{ ref(\"prep_rls_normalize\") }} rls\n            ON  {{ condition|format(i=i) }}\n        WHERE rls.row_id = {{ i }}\n        {% if not loop.last %} UNION {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_single_value"]}, "description": "This macro creates a SQL statement that automatically implement the row-level-security on a dataset. Technically, the table generated by the macro duplicates records of the initial dataset, for each user, based on the security scenario defined. The BI tool is then expected to filter the records based on the user email logged-in.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "netsuite_project://macros/schema.yml", "arguments": [{"name": "data_model", "type": null, "description": "Name of the dataset for which row-level-security should be implemented."}, {"name": "scenario", "type": null, "description": "Join condition that is expected to be used in order to assign users to the dimensions of the dataset. Indeed, some security dimensions may not be relevant if they are absent from the dataset."}], "created_at": 1728687173.980817, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__validate_sql": {"name": "sqlserver__validate_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/validate_sql.sql", "original_file_path": "macros/adapter/validate_sql.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__validate_sql", "macro_sql": "{% macro sqlserver__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1869538, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__truncate_relation": {"name": "sqlserver__truncate_relation", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/relation.sql", "original_file_path": "macros/adapter/relation.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__truncate_relation", "macro_sql": "{% macro sqlserver__truncate_relation(relation) %}\n    {% call statement('truncate_relation') -%}\n        truncate table {{ relation }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1874073, "supported_languages": null}, "macro.dbt_sqlserver.apply_label": {"name": "apply_label", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/metadata.sql", "original_file_path": "macros/adapter/metadata.sql", "unique_id": "macro.dbt_sqlserver.apply_label", "macro_sql": "{% macro apply_label() %}\n    {{ log (config.get('query_tag','dbt-sqlserver'))}}\n    {%- set query_label = config.get('query_tag','dbt-sqlserver') -%}\n    OPTION (LABEL = '{{query_label}}');\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1881351, "supported_languages": null}, "macro.dbt_sqlserver.default__information_schema_hints": {"name": "default__information_schema_hints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/metadata.sql", "original_file_path": "macros/adapter/metadata.sql", "unique_id": "macro.dbt_sqlserver.default__information_schema_hints", "macro_sql": "{% macro default__information_schema_hints() %}{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1882913, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__information_schema_hints": {"name": "sqlserver__information_schema_hints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/metadata.sql", "original_file_path": "macros/adapter/metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__information_schema_hints", "macro_sql": "{% macro sqlserver__information_schema_hints() %}with (nolock){% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1884677, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_schema_named": {"name": "sqlserver__drop_schema_named", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/schemas.sql", "original_file_path": "macros/adapter/schemas.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__drop_schema_named", "macro_sql": "{% macro sqlserver__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1889853, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index": {"name": "sqlserver__create_clustered_columnstore_index", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/indexes.sql", "original_file_path": "macros/adapter/indexes.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index", "macro_sql": "{% macro sqlserver__create_clustered_columnstore_index(relation) -%}\n    {%- set cci_name = (relation.schema ~ '_' ~ relation.identifier ~ '_cci') | replace(\".\", \"\") | replace(\" \", \"\") -%}\n    {%- set relation_name = relation.schema ~ '_' ~ relation.identifier -%}\n    {%- set full_relation = '\"' ~ relation.schema ~ '\".\"' ~ relation.identifier ~ '\"' -%}\n    use [{{ relation.database }}];\n    if EXISTS (\n        SELECT *\n        FROM sys.indexes {{ information_schema_hints() }}\n        WHERE name = '{{cci_name}}'\n        AND object_id=object_id('{{relation_name}}')\n    )\n    DROP index {{full_relation}}.{{cci_name}}\n    CREATE CLUSTERED COLUMNSTORE INDEX {{cci_name}}\n    ON {{full_relation}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.193769, "supported_languages": null}, "macro.dbt_sqlserver.drop_xml_indexes": {"name": "drop_xml_indexes", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/indexes.sql", "original_file_path": "macros/adapter/indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_xml_indexes", "macro_sql": "{% macro drop_xml_indexes() -%}\n    {{ log(\"Running drop_xml_indexes() macro...\") }}\n\n    declare @drop_xml_indexes nvarchar(max);\n    select @drop_xml_indexes = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n    from sys.indexes {{ information_schema_hints() }}\n    inner join sys.tables {{ information_schema_hints() }}\n    on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n        and sys.indexes.type_desc = 'XML'\n        and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n    ); exec sp_executesql @drop_xml_indexes;\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1942623, "supported_languages": null}, "macro.dbt_sqlserver.drop_spatial_indexes": {"name": "drop_spatial_indexes", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/indexes.sql", "original_file_path": "macros/adapter/indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_spatial_indexes", "macro_sql": "{% macro drop_spatial_indexes() -%}\n    {# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n    {# and https://stackoverflow.com/a/33785833/10415173         #}\n\n    {{ log(\"Running drop_spatial_indexes() macro...\") }}\n\n    declare @drop_spatial_indexes nvarchar(max);\n    select @drop_spatial_indexes = (\n        select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n        from sys.indexes {{ information_schema_hints() }}\n        inner join sys.tables {{ information_schema_hints() }}\n        on sys.indexes.object_id = sys.tables.object_id\n        where sys.indexes.[name] is not null\n        and sys.indexes.type_desc = 'Spatial'\n        and sys.tables.[name] = '{{ this.table }}'\n        for xml path('')\n    ); exec sp_executesql @drop_spatial_indexes;\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1947994, "supported_languages": null}, "macro.dbt_sqlserver.drop_fk_constraints": {"name": "drop_fk_constraints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/indexes.sql", "original_file_path": "macros/adapter/indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_fk_constraints", "macro_sql": "{% macro drop_fk_constraints() -%}\n    {# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n\n    {{ log(\"Running drop_fk_constraints() macro...\") }}\n\n    declare @drop_fk_constraints nvarchar(max);\n    select @drop_fk_constraints = (\n        select 'IF OBJECT_ID(''' + SCHEMA_NAME(CONVERT(VARCHAR(MAX), sys.foreign_keys.[schema_id])) + '.' + sys.foreign_keys.[name] + ''', ''F'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.foreign_keys.[schema_id]) + '].[' + OBJECT_NAME(sys.foreign_keys.[parent_object_id]) + '] DROP CONSTRAINT [' + sys.foreign_keys.[name]+ '];'\n        from sys.foreign_keys\n        inner join sys.tables on sys.foreign_keys.[referenced_object_id] = sys.tables.[object_id]\n        where sys.tables.[name] = '{{ this.table }}'\n        for xml path('')\n    ); exec sp_executesql @drop_fk_constraints;\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1951814, "supported_languages": null}, "macro.dbt_sqlserver.drop_pk_constraints": {"name": "drop_pk_constraints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/indexes.sql", "original_file_path": "macros/adapter/indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_pk_constraints", "macro_sql": "{% macro drop_pk_constraints() -%}\n    {# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n    {# and https://stackoverflow.com/a/33785833/10415173         #}\n\n    {{ drop_xml_indexes() }}\n\n    {{ drop_spatial_indexes() }}\n\n    {{ drop_fk_constraints() }}\n\n    {{ log(\"Running drop_pk_constraints() macro...\") }}\n\n    declare @drop_pk_constraints nvarchar(max);\n    select @drop_pk_constraints = (\n        select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + sys.tables.[name] + '] DROP CONSTRAINT [' + sys.indexes.[name]+ '];'\n        from sys.indexes\n        inner join sys.tables on sys.indexes.[object_id] = sys.tables.[object_id]\n        where sys.indexes.is_primary_key = 1\n        and sys.tables.[name] = '{{ this.table }}'\n        for xml path('')\n    ); exec sp_executesql @drop_pk_constraints;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.drop_xml_indexes", "macro.dbt_sqlserver.drop_spatial_indexes", "macro.dbt_sqlserver.drop_fk_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1957748, "supported_languages": null}, "macro.dbt_sqlserver.drop_all_indexes_on_table": {"name": "drop_all_indexes_on_table", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/indexes.sql", "original_file_path": "macros/adapter/indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_all_indexes_on_table", "macro_sql": "{% macro drop_all_indexes_on_table() -%}\n    {# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n    {# and https://stackoverflow.com/a/33785833/10415173         #}\n\n    {{ drop_pk_constraints() }}\n\n    {{ log(\"Dropping remaining indexes...\") }}\n\n    declare @drop_remaining_indexes_last nvarchar(max);\n    select @drop_remaining_indexes_last = (\n        select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n        from sys.indexes {{ information_schema_hints() }}\n        inner join sys.tables {{ information_schema_hints() }}\n        on sys.indexes.object_id = sys.tables.object_id\n        where sys.indexes.[name] is not null\n        and SCHEMA_NAME(sys.tables.schema_id) = '{{ this.schema }}'\n        and sys.tables.[name] = '{{ this.table }}'\n        for xml path('')\n    ); exec sp_executesql @drop_remaining_indexes_last;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.drop_pk_constraints", "macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1964254, "supported_languages": null}, "macro.dbt_sqlserver.create_clustered_index": {"name": "create_clustered_index", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/indexes.sql", "original_file_path": "macros/adapter/indexes.sql", "unique_id": "macro.dbt_sqlserver.create_clustered_index", "macro_sql": "{% macro create_clustered_index(columns, unique=False) -%}\n    {{ log(\"Creating clustered index...\") }}\n\n    {% set idx_name = \"clustered_\" + local_md5(columns | join(\"_\")) %}\n\n    if not exists(select *\n                    from sys.indexes {{ information_schema_hints() }}\n                    where name = '{{ idx_name }}'\n                    and object_id = OBJECT_ID('{{ this }}')\n    )\n    begin\n\n    create\n    {% if unique -%}\n    unique\n    {% endif %}\n    clustered index\n        {{ idx_name }}\n        on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\n    end\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.1983414, "supported_languages": null}, "macro.dbt_sqlserver.create_nonclustered_index": {"name": "create_nonclustered_index", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/indexes.sql", "original_file_path": "macros/adapter/indexes.sql", "unique_id": "macro.dbt_sqlserver.create_nonclustered_index", "macro_sql": "{% macro create_nonclustered_index(columns, includes=False) %}\n\n    {{ log(\"Creating nonclustered index...\") }}\n\n    {% if includes -%}\n        {% set idx_name = (\n            \"nonclustered_\"\n            + local_md5(columns | join(\"_\"))\n            + \"_incl_\"\n            + local_md5(includes | join(\"_\"))\n        ) %}\n    {% else -%}\n        {% set idx_name = \"nonclustered_\" + local_md5(columns | join(\"_\")) %}\n    {% endif %}\n\n    if not exists(select *\n                    from sys.indexes {{ information_schema_hints() }}\n                    where name = '{{ idx_name }}'\n                    and object_id = OBJECT_ID('{{ this }}')\n    )\n    begin\n    create nonclustered index\n        {{ idx_name }}\n        on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\n        {% if includes -%}\n            include ({{ '[' + includes|join(\"], [\") + ']' }})\n        {% endif %}\n    end\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2000191, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_catalog": {"name": "sqlserver__get_catalog", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/catalog.sql", "original_file_path": "macros/adapter/catalog.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_catalog", "macro_sql": "{% macro sqlserver__get_catalog(information_schemas, schemas) -%}\n    {% set query_label = apply_label() %}\n    {%- call statement('catalog', fetch_result=True) -%}\n\n        with\n        principals as (\n            select\n                name as principal_name,\n                principal_id as principal_id\n            from\n                sys.database_principals {{ information_schema_hints() }}\n        ),\n\n        schemas as (\n            select\n                name as schema_name,\n                schema_id as schema_id,\n                principal_id as principal_id\n            from\n                sys.schemas {{ information_schema_hints() }}\n        ),\n\n        tables as (\n            select\n                object_id,\n                name as table_name,\n                schema_id as schema_id,\n                principal_id as principal_id,\n                'BASE TABLE' as table_type\n            from\n                sys.tables {{ information_schema_hints() }}\n        ),\n\n        tables_with_metadata as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n                table_type\n            from\n                tables\n            join schemas on tables.schema_id = schemas.schema_id\n        ),\n\n        views as (\n            select\n                object_id,\n                name as table_name,\n                schema_id as schema_id,\n                principal_id as principal_id,\n                'VIEW' as table_type\n            from\n                sys.views {{ information_schema_hints() }}\n        ),\n\n        views_with_metadata as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n                table_type\n            from\n                views\n            join schemas on views.schema_id = schemas.schema_id\n        ),\n\n        tables_and_views as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                principal_name,\n                table_type\n            from\n                tables_with_metadata\n            join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n            union all\n            select\n                object_id,\n                table_name,\n                schema_name,\n                principal_name,\n                table_type\n            from\n                views_with_metadata\n            join principals on views_with_metadata.owner_principal_id = principals.principal_id\n        ),\n\n        cols as (\n\n            select\n                c.object_id,\n                c.name as column_name,\n                c.column_id as column_index,\n                t.name as column_type\n            from sys.columns as c {{ information_schema_hints() }}\n            left join sys.types as t {{ information_schema_hints() }} on c.system_type_id = t.system_type_id\n        )\n\n        select\n            DB_NAME() as table_database,\n            tv.schema_name as table_schema,\n            tv.table_name,\n            tv.table_type,\n            null as table_comment,\n            tv.principal_name as table_owner,\n            cols.column_name,\n            cols.column_index,\n            cols.column_type,\n            null as column_comment\n        from tables_and_views tv\n        join cols on tv.object_id = cols.object_id\n        where ({%- for schema in schemas -%}\n            upper(tv.schema_name) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%})\n\n        order by column_index\n        {{ query_label }}\n\n        {%- endcall -%}\n\n    {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.apply_label", "macro.dbt.statement", "macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2090895, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_catalog_relations": {"name": "sqlserver__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/catalog.sql", "original_file_path": "macros/adapter/catalog.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_catalog_relations", "macro_sql": "{% macro sqlserver__get_catalog_relations(information_schema, relations) -%}\n    {% set query_label = apply_label() %}\n    {%- call statement('catalog', fetch_result=True) -%}\n\n    with\n    principals as (\n        select\n            name as principal_name,\n            principal_id as principal_id\n        from\n            sys.database_principals {{ information_schema_hints() }}\n    ),\n\n    schemas as (\n        select\n            name as schema_name,\n            schema_id as schema_id,\n            principal_id as principal_id\n        from\n            sys.schemas {{ information_schema_hints() }}\n    ),\n\n    tables as (\n        select\n            object_id,\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'BASE TABLE' as table_type\n        from\n            sys.tables {{ information_schema_hints() }}\n    ),\n\n    tables_with_metadata as (\n        select\n            object_id,\n            table_name,\n            schema_name,\n            coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            tables\n        join schemas on tables.schema_id = schemas.schema_id\n    ),\n\n    views as (\n        select\n            object_id,\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'VIEW' as table_type\n        from\n            sys.views {{ information_schema_hints() }}\n    ),\n\n    views_with_metadata as (\n        select\n            object_id,\n            table_name,\n            schema_name,\n            coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            views\n        join schemas on views.schema_id = schemas.schema_id\n    ),\n\n    tables_and_views as (\n        select\n            object_id,\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            tables_with_metadata\n        join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n        union all\n        select\n            object_id,\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            views_with_metadata\n        join principals on views_with_metadata.owner_principal_id = principals.principal_id\n    ),\n\n    cols as (\n\n        select\n            c.object_id,\n            c.name as column_name,\n            c.column_id as column_index,\n            t.name as column_type\n        from sys.columns as c {{ information_schema_hints() }}\n        left join sys.types as t on c.system_type_id = t.system_type_id\n    )\n\n    select\n        DB_NAME() as table_database,\n        tv.schema_name as table_schema,\n        tv.table_name,\n        tv.table_type,\n        null as table_comment,\n        tv.principal_name as table_owner,\n        cols.column_name,\n        cols.column_index,\n        cols.column_type,\n        null as column_comment\n    from tables_and_views tv\n    join cols on tv.object_id = cols.object_id\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    upper(tv.schema_name) = upper('{{ relation.schema }}')\n                    and upper(tv.table_name) = upper('{{ relation.identifier }}')\n                )\n            {% elif relation.schema %}\n                (\n                    upper(tv.schema_name) = upper('{{ relation.schema }}')\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n    order by column_index\n    {{ query_label }}\n    {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.apply_label", "macro.dbt.statement", "macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2111423, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__alter_column_type": {"name": "sqlserver__alter_column_type", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/adapter/columns.sql", "original_file_path": "macros/adapter/columns.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__alter_column_type", "macro_sql": "{% macro sqlserver__alter_column_type(relation, column_name, new_column_type) %}\n\n    {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n    {% set alter_column_type %}\n        alter {{ relation.type }} {{ relation }} add \"{{ tmp_column }}\" {{ new_column_type }};\n    {%- endset %}\n\n    {% set update_column %}\n        update {{ relation }} set \"{{ tmp_column }}\" = \"{{ column_name }}\";\n    {%- endset %}\n\n    {% set drop_column %}\n        alter {{ relation.type }} {{ relation }} drop column \"{{ column_name }}\";\n    {%- endset %}\n\n    {% set rename_column %}\n        exec sp_rename '{{ relation | replace('\"', '') }}.{{ tmp_column }}', '{{ column_name }}', 'column'\n    {%- endset %}\n\n    {% do run_query(alter_column_type) %}\n    {% do run_query(update_column) %}\n    {% do run_query(drop_column) %}\n    {% do run_query(rename_column) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2135468, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__split_part": {"name": "sqlserver__split_part", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__split_part", "macro_sql": "{% macro sqlserver__split_part(string_text, delimiter_text, part_number) %}\n    {% if part_number >= 0 %}\n        LTRIM(CAST(('<X>'+REPLACE({{ string_text }},{{ delimiter_text }} ,'</X><X>')+'</X>') AS XML).value('(/X)[{{ part_number }}]', 'VARCHAR(128)'))\n    {% else %}\n        LTRIM(CAST(('<X>'+REPLACE({{ string_text }},{{ delimiter_text }} ,'</X><X>')+'</X>') AS XML).value('(/X)[position() = last(){{ part_number }}+1][1]', 'VARCHAR(128)'))\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2144775, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_binding_char": {"name": "sqlserver__get_binding_char", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/relations/seeds/helpers.sql", "original_file_path": "macros/relations/seeds/helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_binding_char", "macro_sql": "{% macro sqlserver__get_binding_char() %}\n  {{ return('?') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2160785, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_batch_size": {"name": "sqlserver__get_batch_size", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/relations/seeds/helpers.sql", "original_file_path": "macros/relations/seeds/helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_batch_size", "macro_sql": "{% macro sqlserver__get_batch_size() %}\n  {{ return(400) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2163312, "supported_languages": null}, "macro.dbt_sqlserver.calc_batch_size": {"name": "calc_batch_size", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/relations/seeds/helpers.sql", "original_file_path": "macros/relations/seeds/helpers.sql", "unique_id": "macro.dbt_sqlserver.calc_batch_size", "macro_sql": "{% macro calc_batch_size(num_columns) %}\n    {#\n        SQL Server allows for a max of 2098 parameters in a single statement.\n        Check if the max_batch_size fits with the number of columns, otherwise\n        reduce the batch size so it fits.\n    #}\n    {% set max_batch_size = get_batch_size() %}\n    {% set calculated_batch = (2098 / num_columns)|int %}\n    {% set batch_size = [max_batch_size, calculated_batch] | min %}\n\n    {{ return(batch_size) }}\n{%  endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2170508, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__load_csv_rows": {"name": "sqlserver__load_csv_rows", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/relations/seeds/helpers.sql", "original_file_path": "macros/relations/seeds/helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__load_csv_rows", "macro_sql": "{% macro sqlserver__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set batch_size = calc_batch_size(agate_table.column_names|length) %}\n  {% set bindings = [] %}\n  {% set statements = [] %}\n\n  {{ log(\"Inserting batches of \" ~ batch_size ~ \" records\") }}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv", "macro.dbt_sqlserver.calc_batch_size", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2198, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_view_as": {"name": "sqlserver__create_view_as", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/relations/views/create.sql", "original_file_path": "macros/relations/views/create.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_view_as", "macro_sql": "{% macro sqlserver__create_view_as(relation, sql) -%}\n\n    {{ get_use_database_sql(relation.database) }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n        {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n\n    {% set query %}\n        create view {{ relation.include(database=False) }} as {{ sql }};\n    {% endset %}\n\n    {% set tst %}\n    SELECT '1' as col\n    {% endset %}\n    USE [{{ relation.database }}];\n    EXEC('{{- escape_single_quotes(query) -}}')\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.get_use_database_sql", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2212913, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__can_clone_table": {"name": "sqlserver__can_clone_table", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/relations/table/clone.sql", "original_file_path": "macros/relations/table/clone.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__can_clone_table", "macro_sql": "{% macro sqlserver__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.221628, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_table_as": {"name": "sqlserver__create_table_as", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_table_as", "macro_sql": "{% macro sqlserver__create_table_as(temporary, relation, sql) -%}\n    {%- set query_label = apply_label() -%}\n    {%- set tmp_relation = relation.incorporate(path={\"identifier\": relation.identifier ~ '__dbt_tmp_vw'}, type='view') -%}\n\n    {%- do adapter.drop_relation(tmp_relation) -%}\n    USE [{{ relation.database }}];\n    {{ get_create_view_as_sql(tmp_relation, sql) }}\n\n    {%- set table_name -%}\n        {{ relation }}\n    {%- endset -%}\n\n\n    {%- set contract_config = config.get('contract') -%}\n    {%- set query -%}\n        {% if contract_config.enforced and (not temporary) %}\n            CREATE TABLE {{table_name}}\n            {{ get_assert_columns_equivalent(sql)  }}\n            {{ build_columns_constraints(relation) }}\n            {% set listColumns %}\n                {% for column in model['columns'] %}\n                    {{ \"[\"~column~\"]\" }}{{ \", \" if not loop.last }}\n                {% endfor %}\n            {%endset%}\n            INSERT INTO {{relation}} ({{listColumns}})\n            SELECT {{listColumns}} FROM {{tmp_relation}} {{ query_label }}\n\n        {% else %}\n            SELECT * INTO {{ table_name }} FROM {{ tmp_relation }} {{ query_label }}\n        {% endif %}\n    {%- endset -%}\n\n    EXEC('{{- escape_single_quotes(query) -}}')\n\n    {# For some reason drop_relation is not firing. This solves the issue for now. #}\n    EXEC('DROP VIEW IF EXISTS {{tmp_relation.schema}}.{{tmp_relation.identifier}}')\n\n\n\n    {% set as_columnstore = config.get('as_columnstore', default=true) %}\n    {% if not temporary and as_columnstore -%}\n        {#-\n        add columnstore index\n        this creates with dbt_temp as its coming from a temporary relation before renaming\n        could alter relation to drop the dbt_temp portion if needed\n        -#}\n        {{ sqlserver__create_clustered_columnstore_index(relation) }}\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.apply_label", "macro.dbt.get_create_view_as_sql", "macro.dbt.get_assert_columns_equivalent", "macro.dbt_fabric.build_columns_constraints", "macro.dbt.escape_single_quotes", "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2258532, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_unit_test_sql": {"name": "sqlserver__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/materializations/unit_tests.sql", "original_file_path": "macros/materializations/unit_tests.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_unit_test_sql", "macro_sql": "{% macro sqlserver__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n\nUSE [{{ target.database }}];\nIF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ target.schema }}')\nBEGIN\nEXEC('CREATE SCHEMA [{{ target.schema }}]')\nEND\n\n{% set test_view %}\n    [{{ target.schema }}.testview_{{ range(1300, 19000) | random }}]\n{% endset %}\n{% set test_sql = main_sql.replace(\"'\", \"''\")%}\nEXEC('create view {{test_view}} as {{ test_sql }};')\n\n{% set expected_view %}\n    [{{ target.schema }}.expectedview_{{ range(1300, 19000) | random }}]\n{% endset %}\n{% set expected_sql = expected_fixture_sql.replace(\"'\", \"''\")%}\nEXEC('create view {{expected_view}} as {{ expected_sql }};')\n\n-- Build actual result given inputs\n{% set unittest_sql %}\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from\n    {{ test_view }}\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from\n    {{ expected_view }}\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{% endset %}\n\nEXEC('{{- escape_single_quotes(unittest_sql) -}}')\n\nEXEC('drop view {{test_view}};')\nEXEC('drop view {{expected_view}};')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.string_literal", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.229902, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_test_sql": {"name": "sqlserver__get_test_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/materializations/tests.sql", "original_file_path": "macros/materializations/tests.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_test_sql", "macro_sql": "{% macro sqlserver__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n\n  -- Create target schema if it does not\n  USE [{{ target.database }}];\n  IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ target.schema }}')\n  BEGIN\n    EXEC('CREATE SCHEMA [{{ target.schema }}]')\n  END\n\n  {% set testview %}\n    [{{ target.schema }}.testview_{{ range(1300, 19000) | random }}]\n  {% endset %}\n\n  {% set sql = main_sql.replace(\"'\", \"''\")%}\n  EXEC('create view {{testview}} as {{ sql }};')\n  select\n    {{ \"top (\" ~ limit ~ ')' if limit != none }}\n    {{ fail_calc }} as failures,\n    case when {{ fail_calc }} {{ warn_if }}\n      then 'true' else 'false' end as should_warn,\n    case when {{ fail_calc }} {{ error_if }}\n      then 'true' else 'false' end as should_error\n  from (\n    select * from {{testview}}\n  ) dbt_internal_test;\n\n  EXEC('drop view {{testview}};')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2318578, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_columns": {"name": "sqlserver__create_columns", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/materializations/snapshot/helpers.sql", "original_file_path": "macros/materializations/snapshot/helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_columns", "macro_sql": "{% macro sqlserver__create_columns(relation, columns) %}\n  {% set column_list %}\n    {% for column_entry in columns %}\n      {{column_entry.name}} {{column_entry.data_type}}{{ \", \" if not loop.last }}\n    {% endfor %}\n  {% endset %}\n\n  {% set alter_sql %}\n    ALTER TABLE {{ relation }}\n    ADD {{ column_list }}\n  {% endset %}\n\n  {% set results = run_query(alter_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.233648, "supported_languages": null}, "macro.dbt_sqlserver.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/materializations/snapshot/helpers.sql", "original_file_path": "macros/materializations/snapshot/helpers.sql", "unique_id": "macro.dbt_sqlserver.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n    {{ adapter.drop_relation(temp_relation) }}\n\n    {% set select = snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n\n    {% set tmp_tble_vw_relation = temp_relation.incorporate(path={\"identifier\": temp_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ get_create_table_as_sql(True, temp_relation, select) }}\n    {% endcall %}\n\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2352195, "supported_languages": null}, "macro.dbt_sqlserver.materialization_snapshot_sqlserver": {"name": "materialization_snapshot_sqlserver", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "unique_id": "macro.dbt_sqlserver.materialization_snapshot_sqlserver", "macro_sql": "{% materialization snapshot, adapter='sqlserver' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% set temp_snapshot_relation_exists, temp_snapshot_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table+\"_snapshot_staging_temp_view\",\n          type='view')\n  -%}\n\n  {% set temp_snapshot_relation_sql = model['compiled_code'].replace(\"'\", \"''\") %}\n  {% call statement('create temp_snapshot_relation') %}\n    USE [{{ model.database}}];\n    EXEC('DROP VIEW IF EXISTS {{ temp_snapshot_relation.include(database=False) }};');\n    EXEC('create view {{ temp_snapshot_relation.include(database=False) }} as {{ temp_snapshot_relation_sql }};');\n  {% endcall %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, temp_snapshot_relation) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n     {% if missing_columns|length > 0 %}\n        {{log(\"Missing columns length is: \"~ missing_columns|length)}}\n        {% do create_columns(target_relation, missing_columns) %}\n      {% endif %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {{ adapter.drop_relation(temp_snapshot_relation) }}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.statement", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt_sqlserver.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2485893, "supported_languages": ["sql"]}, "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql": {"name": "sqlserver__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql", "macro_sql": "{% macro sqlserver__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2495027, "supported_languages": null}, "macro.dbt_sqlserver.materialization_view_sqlserver": {"name": "materialization_view_sqlserver", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt_sqlserver.materialization_view_sqlserver", "macro_sql": "{%- materialization view, adapter='sqlserver' -%}\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2546427, "supported_languages": ["sql"]}, "macro.dbt_sqlserver.materialization_table_sqlserver": {"name": "materialization_table_sqlserver", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt_sqlserver.materialization_table_sqlserver", "macro_sql": "{% materialization table, adapter='sqlserver' %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.259787, "supported_languages": ["sql"]}, "macro.dbt_sqlserver.materialization_incremental_sqlserver": {"name": "materialization_incremental_sqlserver", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt_sqlserver.materialization_incremental_sqlserver", "macro_sql": "{% materialization incremental, adapter='sqlserver' -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n    {% do to_drop.append(temp_relation) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2696764, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__concat": {"name": "fabric__concat", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt_fabric.fabric__concat", "macro_sql": "{% macro fabric__concat(fields) -%}\n    {%- if fields|length < 2 -%}\n        {{ fields[0] }}\n    {%- else -%}\n        concat({{ fields|join(', ') }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2703576, "supported_languages": null}, "macro.dbt_fabric.fabric__date_trunc": {"name": "fabric__date_trunc", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_fabric.fabric__date_trunc", "macro_sql": "{% macro fabric__date_trunc(datepart, date) %}\n    CAST(DATEADD({{datepart}}, DATEDIFF({{datepart}}, 0, {{date}}), 0) AS DATE)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2707753, "supported_languages": null}, "macro.dbt_fabric.fabric__current_timestamp": {"name": "fabric__current_timestamp", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_fabric.fabric__current_timestamp", "macro_sql": "{% macro fabric__current_timestamp() -%}\n  CAST(SYSDATETIME() AS DATETIME2(6))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2710612, "supported_languages": null}, "macro.dbt_fabric.fabric__snapshot_string_as_time": {"name": "fabric__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_string_as_time", "macro_sql": "{% macro fabric__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"CONVERT(DATETIME2(6), '\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.271452, "supported_languages": null}, "macro.dbt_fabric.fabric__hash": {"name": "fabric__hash", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_fabric.fabric__hash", "macro_sql": "{% macro fabric__hash(field) %}\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), {{field}}), '')), 2))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2717452, "supported_languages": null}, "macro.dbt_fabric.fabric__safe_cast": {"name": "fabric__safe_cast", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_fabric.fabric__safe_cast", "macro_sql": "{% macro fabric__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2720802, "supported_languages": null}, "macro.dbt_fabric.fabric__last_day": {"name": "fabric__last_day", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_fabric.fabric__last_day", "macro_sql": "{% macro fabric__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    \tCAST(DATEADD(QUARTER, DATEDIFF(QUARTER, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- elif datepart == 'month' -%}\n        EOMONTH ( {{ date }})\n    {%- elif datepart == 'year' -%}\n        CAST(DATEADD(YEAR, DATEDIFF(year, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- else -%}\n        {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2730753, "supported_languages": null}, "macro.dbt_fabric.fabric__length": {"name": "fabric__length", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt_fabric.fabric__length", "macro_sql": "{% macro fabric__length(expression) %}\n\n    len( {{ expression }} )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2733605, "supported_languages": null}, "macro.dbt_fabric.fabric__array_construct": {"name": "fabric__array_construct", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_fabric.fabric__array_construct", "macro_sql": "{% macro fabric__array_construct(inputs, data_type) -%}\n    JSON_ARRAY({{ inputs|join(' , ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2737274, "supported_languages": null}, "macro.dbt_fabric.fabric__listagg": {"name": "fabric__listagg", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_fabric.fabric__listagg", "macro_sql": "{% macro fabric__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg({{ measure }}, {{ delimiter_text }})\n        {%- if order_by_clause != None %}\n            within group ({{ order_by_clause }})\n        {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2743194, "supported_languages": null}, "macro.dbt_fabric.fabric__position": {"name": "fabric__position", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_fabric.fabric__position", "macro_sql": "{% macro fabric__position(substring_text, string_text) %}\n\n    CHARINDEX(\n        {{ substring_text }},\n        {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2747025, "supported_languages": null}, "macro.dbt_fabric.fabric__cast_bool_to_text": {"name": "fabric__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_fabric.fabric__cast_bool_to_text", "macro_sql": "{% macro fabric__cast_bool_to_text(field) %}\n    case {{ field }}\n        when 1 then 'true'\n        when 0 then 'false'\n        else null\n    end\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2750006, "supported_languages": null}, "macro.dbt_fabric.fabric__any_value": {"name": "fabric__any_value", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_fabric.fabric__any_value", "macro_sql": "{% macro fabric__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2752686, "supported_languages": null}, "macro.dbt_fabric.fabric__dateadd": {"name": "fabric__dateadd", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_fabric.fabric__dateadd", "macro_sql": "{% macro fabric__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        cast({{ from_date_or_timestamp }} as datetime2(6))\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2757425, "supported_languages": null}, "macro.dbt_fabric.fabric__get_tables_by_pattern_sql": {"name": "fabric__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/utils/get_tables_by_pattern.sql", "original_file_path": "macros/utils/get_tables_by_pattern.sql", "unique_id": "macro.dbt_fabric.fabric__get_tables_by_pattern_sql", "macro_sql": "{% macro fabric__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    select distinct\n        table_schema as {{ adapter.quote('table_schema') }},\n        table_name as {{ adapter.quote('table_name') }},\n        {{ dbt_utils.get_table_types_sql() }}\n    from {{ database }}.INFORMATION_SCHEMA.TABLES\n    where table_schema like '{{ schema_pattern }}'\n    and table_name like '{{ table_pattern }}'\n    and table_name not like '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2767096, "supported_languages": null}, "macro.dbt_fabric.fabric__snapshot_hash_arguments": {"name": "fabric__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_hash_arguments", "macro_sql": "{% macro fabric__snapshot_hash_arguments(args) %}\n    CONVERT(VARCHAR(32), HashBytes('MD5', {% for arg in args %}\n        coalesce(cast({{ arg }} as varchar(8000)), '') {% if not loop.last %} + '|' + {% endif %}\n    {% endfor %}), 2)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2772973, "supported_languages": null}, "macro.dbt_fabric.fabric__post_snapshot": {"name": "fabric__post_snapshot", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt_fabric.fabric__post_snapshot", "macro_sql": "{% macro fabric__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation_if_exists(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2908945, "supported_languages": null}, "macro.dbt_fabric.fabric__create_columns": {"name": "fabric__create_columns", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt_fabric.fabric__create_columns", "macro_sql": "{% macro fabric__create_columns(relation, columns) %}\n  {# default__ macro uses \"add column\"\n     TSQL preferes just \"add\"\n  #}\n\n  {% set columns %}\n    {% for column in columns %}\n      , CAST(NULL AS {{column.data_type}}) AS {{column_name}}\n    {% endfor %}\n  {% endset %}\n\n  {% set tempTableName %}\n    [{{relation.database}}].[{{ relation.schema }}].[{{ relation.identifier }}_{{ range(1300, 19000) | random }}]\n  {% endset %}\n  {{ log(\"Creating new columns are not supported without dropping a table. Using random table as a temp table. - \" ~ tempTableName) }}\n\n  {% set tempTable %}\n      CREATE TABLE {{tempTableName}}\n      AS SELECT * {{columns}} FROM [{{relation.database}}].[{{ relation.schema }}].[{{ relation.identifier }}] {{ information_schema_hints() }} {{ apply_label() }}\n  {% endset %}\n\n  {% call statement('create_temp_table') -%}\n      {{ tempTable }}\n  {%- endcall %}\n\n  {% set dropTable %}\n      DROP TABLE [{{relation.database}}].[{{ relation.schema }}].[{{ relation.identifier }}]\n  {% endset %}\n\n  {% call statement('drop_table') -%}\n      {{ dropTable }}\n  {%- endcall %}\n\n  {% set createTable %}\n      CREATE TABLE {{ relation }}\n      AS SELECT * FROM {{tempTableName}} {{ information_schema_hints() }} {{ apply_label() }}\n  {% endset %}\n\n  {% call statement('create_Table') -%}\n      {{ createTable }}\n  {%- endcall %}\n\n  {% set dropTempTable %}\n      DROP TABLE {{tempTableName}}\n  {% endset %}\n\n  {% call statement('drop_temp_table') -%}\n      {{ dropTempTable }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints", "macro.dbt_fabric.apply_label", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2939448, "supported_languages": null}, "macro.dbt_fabric.fabric__get_true_sql": {"name": "fabric__get_true_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_true_sql", "macro_sql": "{% macro fabric__get_true_sql() %}\n  {{ return('1=1') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2942245, "supported_languages": null}, "macro.dbt_fabric.fabric__build_snapshot_table": {"name": "fabric__build_snapshot_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt_fabric.fabric__build_snapshot_table", "macro_sql": "{% macro fabric__build_snapshot_table(strategy, relation) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        select * from {{ relation }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.29478, "supported_languages": null}, "macro.dbt_fabric.fabric__snapshot_staging_table": {"name": "fabric__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_staging_table", "macro_sql": "{% macro fabric__snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) -%}\n\n    with snapshot_query as (\n\n        select * from {{ temp_snapshot_relation }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2965965, "supported_languages": null}, "macro.dbt_fabric.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt_fabric.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n    {{ adapter.drop_relation(temp_relation) }}\n\n    {% set select = snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n\n    {% set tmp_tble_vw_relation = temp_relation.incorporate(path={\"identifier\": temp_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ get_create_table_as_sql(True, temp_relation, select) }}\n    {% endcall %}\n\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.2980797, "supported_languages": null}, "macro.dbt_fabric.materialization_snapshot_fabric": {"name": "materialization_snapshot_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt_fabric.materialization_snapshot_fabric", "macro_sql": "{% materialization snapshot, adapter='fabric' %}\n\n  {%- set config = model['config'] -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% set temp_snapshot_relation_exists, temp_snapshot_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table+\"_snapshot_staging_temp_view\",\n          type='view') -%}\n\n  -- Create a temporary view to manage if user SQl uses CTE\n  {% set temp_snapshot_relation_sql = model['compiled_code'].replace(\"'\", \"''\") %}\n  {% call statement('create temp_snapshot_relation') %}\n    EXEC('DROP VIEW IF EXISTS {{ temp_snapshot_relation.include(database=False) }};');\n    EXEC('create view {{ temp_snapshot_relation.include(database=False) }} as {{ temp_snapshot_relation_sql }};');\n  {% endcall %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, temp_snapshot_relation) %}\n\n      -- naming a temp relation\n      {% set tmp_relation_view = target_relation.incorporate(path={\"identifier\": target_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n      -- Fabric & Synapse adapters use temp relation because of lack of CTE support for CTE in CTAS, Insert\n      -- drop temp relation if exists\n      {{ adapter.drop_relation(tmp_relation_view) }}\n      {% set final_sql = get_create_table_as_sql(False, target_relation, build_sql) %}\n      {{ adapter.drop_relation(tmp_relation_view) }}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n      {% set staging_table = build_snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n      {% if missing_columns|length > 0 %}\n        {{log(\"Missing columns length is: \"~ missing_columns|length)}}\n        {% do create_columns(target_relation, missing_columns) %}\n      {% endif %}\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {{ adapter.drop_relation(temp_snapshot_relation) }}\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.statement", "macro.dbt.build_snapshot_table", "macro.dbt.get_create_table_as_sql", "macro.dbt_fabric.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.313015, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__snapshot_merge_sql": {"name": "fabric__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_merge_sql", "macro_sql": "{% macro fabric__snapshot_merge_sql(target, source, insert_cols) %}\n\n  {%- set insert_cols_csv = insert_cols | join(', ') -%}\n  {%- set target_table = target.include(database=False) -%}\n  {%- set source_table = source.include(database=False) -%}\n  {% set target_columns_list = [] %}\n  {% for column in insert_cols %}\n    {% set target_columns_list = target_columns_list.append(\"DBT_INTERNAL_SOURCE.\"+column)  %}\n  {% endfor %}\n  {%- set target_columns = target_columns_list | join(', ') -%}\n\n  UPDATE DBT_INTERNAL_DEST\n  SET dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n  FROM {{ target_table }} as DBT_INTERNAL_DEST\n  INNER JOIN {{ source_table }} as DBT_INTERNAL_SOURCE\n  on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n  WHERE DBT_INTERNAL_DEST.dbt_valid_to is null\n  AND DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n  {{ apply_label() }}\n\n  INSERT INTO {{ target_table }} ({{ insert_cols_csv }})\n  SELECT {{target_columns}} FROM {{ source_table }} as DBT_INTERNAL_SOURCE\n  WHERE  DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n  {{ apply_label() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3151584, "supported_languages": null}, "macro.dbt_fabric.fabric__get_binding_char": {"name": "fabric__get_binding_char", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_binding_char", "macro_sql": "{% macro fabric__get_binding_char() %}\n  {{ return('?') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3168752, "supported_languages": null}, "macro.dbt_fabric.fabric__get_batch_size": {"name": "fabric__get_batch_size", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_batch_size", "macro_sql": "{% macro fabric__get_batch_size() %}\n  {{ return(400) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3171277, "supported_languages": null}, "macro.dbt_fabric.calc_batch_size": {"name": "calc_batch_size", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_fabric.calc_batch_size", "macro_sql": "{% macro calc_batch_size(num_columns) %}\n    {#\n        SQL Server allows for a max of 2100 parameters in a single statement.\n        Check if the max_batch_size fits with the number of columns, otherwise\n        reduce the batch size so it fits.\n    #}\n    {% set max_batch_size = get_batch_size() %}\n    {% set calculated_batch = (2100 / num_columns)-1|int %}\n    {% set batch_size = [max_batch_size, calculated_batch] | min %}\n\n    {{ return(batch_size) }}\n{%  endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3178542, "supported_languages": null}, "macro.dbt_fabric.fabric__load_csv_rows": {"name": "fabric__load_csv_rows", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_fabric.fabric__load_csv_rows", "macro_sql": "{% macro fabric__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set batch_size = calc_batch_size(agate_table.column_names|length) %}\n  {% set bindings = [] %}\n  {% set statements = [] %}\n\n  {{ log(\"Inserting batches of \" ~ batch_size ~ \" records\") }}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n          {{ apply_label()}}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv", "macro.dbt_fabric.calc_batch_size", "macro.dbt.get_binding_char", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3206244, "supported_languages": null}, "macro.dbt_fabric.fabric__create_view_as": {"name": "fabric__create_view_as", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt_fabric.fabric__create_view_as", "macro_sql": "{% macro fabric__create_view_as(relation, sql) -%}\n    {{ fabric__create_view_exec(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_view_exec"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3212113, "supported_languages": null}, "macro.dbt_fabric.fabric__create_view_exec": {"name": "fabric__create_view_exec", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt_fabric.fabric__create_view_exec", "macro_sql": "{% macro fabric__create_view_exec(relation, sql) -%}\n\n    {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n    {{ get_use_database_sql(relation.database) }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n        {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n\n    EXEC('create view {{ relation.include(database=False) }} as {{ temp_view_sql }};');\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt_fabric.get_use_database_sql", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3221545, "supported_languages": null}, "macro.dbt_fabric.materialization_view_fabric": {"name": "materialization_view_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt_fabric.materialization_view_fabric", "macro_sql": "{% materialization view, adapter='fabric' -%}\n\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set existing_relation = adapter.get_relation(database=this.database, schema=this.schema, identifier=this.identifier) -%}\n\n  {%- set backup_relation = none %}\n  {% if (existing_relation != none and existing_relation.type == \"table\") %}\n      {%- set backup_relation = make_backup_relation(target_relation, 'table') -%}\n  {% elif (existing_relation != none and existing_relation.type == \"view\") %}\n      {%- set backup_relation = make_backup_relation(target_relation, 'view') -%}\n  {% endif %}\n\n  {% if (existing_relation != none) %}\n    -- drop the temp relations if they exist already in the database\n    {% do adapter.drop_relation(backup_relation) %}\n    -- Rename target relation as backup relation\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {{ adapter.commit() }}\n  {% if (backup_relation != none) %}\n    {% do adapter.drop_relation(backup_relation) %}\n  {% endif %}\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3267052, "supported_languages": ["sql"]}, "macro.dbt_fabric.build_columns_constraints": {"name": "build_columns_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt_fabric.build_columns_constraints", "macro_sql": "{% macro build_columns_constraints(relation) %}\n    {{ return(adapter.dispatch('build_columns_constraints', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__build_columns_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3276238, "supported_languages": null}, "macro.dbt_fabric.fabric__build_columns_constraints": {"name": "fabric__build_columns_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt_fabric.fabric__build_columns_constraints", "macro_sql": "{% macro fabric__build_columns_constraints(relation) %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    (\n      {% for c in raw_column_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n      {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3282824, "supported_languages": null}, "macro.dbt_fabric.build_model_constraints": {"name": "build_model_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt_fabric.build_model_constraints", "macro_sql": "{% macro build_model_constraints(relation) %}\n    {{ return(adapter.dispatch('build_model_constraints', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__build_model_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3286836, "supported_languages": null}, "macro.dbt_fabric.fabric__build_model_constraints": {"name": "fabric__build_model_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt_fabric.fabric__build_model_constraints", "macro_sql": "{% macro fabric__build_model_constraints(relation) %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    {% for c in raw_model_constraints -%}\n      {% set alter_table_script %}\n        alter table {{ relation.include(database=False) }} {{c}};\n      {%endset%}\n      {% call statement('alter_table_add_constraint') -%}\n        {{alter_table_script}}\n      {%- endcall %}\n    {% endfor -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3295736, "supported_languages": null}, "macro.dbt_fabric.materialization_table_fabric": {"name": "materialization_table_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt_fabric.materialization_table_fabric", "macro_sql": "{% materialization table, adapter='fabric' %}\n\n  -- Load target relation\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set existing_relation = adapter.get_relation(database=this.database, schema=this.schema, identifier=this.identifier) -%}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if existing_relation is not none and not existing_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n    {{ adapter.drop_relation(existing_relation) }}\n  {% endif %}\n\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- Making a temp relation\n  {% set temp_relation = make_temp_relation(target_relation, '__dbt_temp') %}\n\n  -- Drop temp relation if it exists before materializing temp relation\n  {{ adapter.drop_relation(temp_relation) }}\n\n  {% set tmp_vw_relation = temp_relation.incorporate(path={\"identifier\": temp_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n\n  {{ adapter.drop_relation(tmp_vw_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, temp_relation, sql) }}\n  {% endcall %}\n\n  {% if existing_relation is not none and existing_relation.is_table %}\n\n      -- making a backup relation, this will come in use when contract is enforced or not\n      {%- set backup_relation = make_backup_relation(existing_relation, 'table') -%}\n\n      -- Dropping a temp relation if it exists\n      {{ adapter.drop_relation(backup_relation) }}\n\n      -- Rename existing relation to back up relation\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n\n      -- Renaming temp relation as main relation\n      {{ adapter.rename_relation(temp_relation, target_relation) }}\n\n      -- Drop backup relation\n      {{ adapter.drop_relation(backup_relation) }}\n\n  {%- else %}\n\n      -- Renaming temp relation as main relation\n      {{ adapter.rename_relation(temp_relation, target_relation) }}\n\n  {% endif %}\n\n  {{ adapter.drop_relation(tmp_vw_relation) }}\n\n  -- cleanup\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n  {% do persist_docs(target_relation, model) %}\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- Add constraints including FK relation.\n  {{ build_model_constraints(target_relation) }}\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.make_backup_relation", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_fabric.build_model_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3354502, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__can_clone_table": {"name": "fabric__can_clone_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/table/clone.sql", "original_file_path": "macros/materializations/models/table/clone.sql", "unique_id": "macro.dbt_fabric.fabric__can_clone_table", "macro_sql": "{% macro fabric__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3371034, "supported_languages": null}, "macro.dbt_fabric.fabric__create_or_replace_clone": {"name": "fabric__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/table/clone.sql", "original_file_path": "macros/materializations/models/table/clone.sql", "unique_id": "macro.dbt_fabric.fabric__create_or_replace_clone", "macro_sql": "{% macro fabric__create_or_replace_clone(target_relation, defer_relation) %}\n    CREATE TABLE {{target_relation}}\n    AS CLONE OF {{defer_relation}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.337388, "supported_languages": null}, "macro.dbt_fabric.materialization_clone_fabric": {"name": "materialization_clone_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/table/clone.sql", "original_file_path": "macros/materializations/models/table/clone.sql", "unique_id": "macro.dbt_fabric.materialization_clone_fabric", "macro_sql": "\n\n\n{%- materialization clone, adapter='fabric' -%}\n\n    {%- set relations = {'relations': []} -%}\n    {%- if not defer_relation -%}\n        -- nothing to do\n        {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n        {{ return(relations) }}\n    {%- endif -%}\n\n    {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n    {% set can_clone_table = can_clone_table() %}\n\n    {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n        {%- set target_relation = this.incorporate(type='table') -%}\n\n        {% call statement('main') %}\n            {% do adapter.drop_relation(target_relation) %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n        {{ return({'relations': [target_relation]}) }}\n    {%- else -%}\n\n        {%- set target_relation = this.incorporate(type='view') -%}\n\n        -- reuse the view materialization\n        -- TODO: support actual dispatch for materialization macros\n        -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n        {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n        {% if not search_name in context %}\n            {% set search_name = \"materialization_view_default\" %}\n        {% endif %}\n        {% set materialization_macro = context[search_name] %}\n        {% set relations = materialization_macro() %}\n        {{ return(relations) }}\n    {%- endif -%}\n\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.statement", "macro.dbt.create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3399944, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__create_table_as": {"name": "fabric__create_table_as", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt_fabric.fabric__create_table_as", "macro_sql": "{% macro fabric__create_table_as(temporary, relation, sql) -%}\n    {% set query_label = apply_label() %}\n    {% set tmp_vw_relation = relation.incorporate(path={\"identifier\": relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    {% do adapter.drop_relation(tmp_vw_relation) %}\n    {{ get_create_view_as_sql(tmp_vw_relation, sql) }}\n\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n\n        CREATE TABLE {{relation}}\n        {{ build_columns_constraints(relation) }}\n        {{ get_assert_columns_equivalent(sql)  }}\n        {% set listColumns %}\n            {% for column in model['columns'] %}\n                {{ \"[\"~column~\"]\" }}{{ \", \" if not loop.last }}\n            {% endfor %}\n        {%endset%}\n\n        INSERT INTO {{relation}} ({{listColumns}})\n        SELECT {{listColumns}} FROM {{tmp_vw_relation}} {{ query_label }}\n\n    {%- else %}\n        {%- set query_label_option = query_label.replace(\"'\", \"''\") -%}\n        EXEC('CREATE TABLE {{relation}} AS SELECT * FROM {{tmp_vw_relation}} {{ query_label_option }}');\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.get_create_view_as_sql", "macro.dbt_fabric.build_columns_constraints", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3430343, "supported_languages": null}, "macro.dbt_fabric.materialization_incremental_fabric": {"name": "materialization_incremental_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt_fabric.materialization_incremental_fabric", "macro_sql": "{% materialization incremental, adapter='fabric' -%}\n\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {% set target_relation = this.incorporate(type='table') %}\n  {%- set relation = load_cached_relation(this) -%}\n  {%- set existing_relation = none %}\n  {% if relation.type ==  'table' %}\n    {% set existing_relation = target_relation %}\n  {% elif relation.type ==  'view' %}\n    {% set existing_relation = get_or_create_relation(relation.database, relation.schema, relation.identifier, relation.type)[1] %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is a view and target is a table.\") }}\n    {{ adapter.drop_relation(existing_relation) }}\n  {% endif %}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n\n  {% set grant_config = config.get('grants') %}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if existing_relation is none or full_refresh_mode or existing_relation.is_view %}\n\n    {% set tmp_vw_relation = target_relation.incorporate(path={\"identifier\": target_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_vw_relation) }}\n    -- Dropping target relation if exists\n    {{ adapter.drop_relation(target_relation) }}\n\n    {%- call statement('main') -%}\n      {{ get_create_table_as_sql(False, target_relation, sql)}}\n    {%- endcall -%}\n\n    -- Dropping temp view relation\n    {{ adapter.drop_relation(tmp_vw_relation) }}\n\n  {% else %}\n\n    {%- set temp_relation = make_temp_relation(target_relation)-%}\n    {{ adapter.drop_relation(temp_relation) }}\n    {% set tmp_tble_vw_relation = temp_relation.incorporate(path={\"identifier\": temp_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {%- call statement('create_tmp_relation') -%}\n      {{ get_create_table_as_sql(True, temp_relation, sql)}}\n    {%- endcall -%}\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n    {% do adapter.expand_target_column_types(\n              from_relation=temp_relation,\n              to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n\n    {{ adapter.drop_relation(temp_relation) }}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n  {% do persist_docs(target_relation, model) %}\n  {% do adapter.commit() %}\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_cached_relation", "macro.dbt.get_or_create_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.make_temp_relation", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3518076, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__get_incremental_default_sql": {"name": "fabric__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/incremental/incremental_strategies.sql", "original_file_path": "macros/materializations/models/incremental/incremental_strategies.sql", "unique_id": "macro.dbt_fabric.fabric__get_incremental_default_sql", "macro_sql": "{% macro fabric__get_incremental_default_sql(arg_dict) %}\n\n    {% if arg_dict[\"unique_key\"] %}\n        {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n    {% else %}\n        -- Incremental Append will insert data into target table.\n        {% do return(get_incremental_append_sql(arg_dict)) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3526547, "supported_languages": null}, "macro.dbt_fabric.fabric__get_merge_sql": {"name": "fabric__get_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_merge_sql", "macro_sql": "{% macro fabric__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) %}\n  {{ default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3553271, "supported_languages": null}, "macro.dbt_fabric.fabric__get_insert_overwrite_merge_sql": {"name": "fabric__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_insert_overwrite_merge_sql", "macro_sql": "{% macro fabric__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) %}\n  {{ default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3557749, "supported_languages": null}, "macro.dbt_fabric.fabric__get_delete_insert_merge_sql": {"name": "fabric__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_delete_insert_merge_sql", "macro_sql": "{% macro fabric__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) %}\n\n    {% set query_label = apply_label() %}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{ target }}\n            where exists (\n                select null\n                from {{ source }}\n                where\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            )\n            {% if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {% endif %}\n            {{ query_label }}\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%}\n            {{ query_label }}\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    ){{ query_label }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.358079, "supported_languages": null}, "macro.dbt_fabric.fabric__get_test_sql": {"name": "fabric__get_test_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_test_sql", "macro_sql": "{% macro fabric__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n\n  -- Create target schema if it does not\n  USE [{{ target.database }}];\n  IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ target.schema }}')\n  BEGIN\n    EXEC('CREATE SCHEMA [{{ target.schema }}]')\n  END\n\n  {% if main_sql.strip().lower().startswith('with') %}\n    {% set testview %}\n      [{{ target.schema }}.testview_{{ range(1300, 19000) | random }}]\n    {% endset %}\n\n    {% set sql = main_sql.replace(\"'\", \"''\")%}\n    EXEC('create view {{testview}} as {{ sql }};')\n    select\n      {{ \"top (\" ~ limit ~ ')' if limit != none }}\n      {{ fail_calc }} as failures,\n      case when {{ fail_calc }} {{ warn_if }}\n        then 'true' else 'false' end as should_warn,\n      case when {{ fail_calc }} {{ error_if }}\n        then 'true' else 'false' end as should_error\n    from (\n      select * from {{testview}}\n    ) dbt_internal_test;\n\n    EXEC('drop view {{testview}};')\n\n  {% else -%}\n    select\n      {{ \"top (\" ~ limit ~ ')' if limit != none }}\n      {{ fail_calc }} as failures,\n      case when {{ fail_calc }} {{ warn_if }}\n        then 'true' else 'false' end as should_warn,\n      case when {{ fail_calc }} {{ error_if }}\n        then 'true' else 'false' end as should_error\n    from (\n      {{ main_sql }}\n    ) dbt_internal_test\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3612087, "supported_languages": null}, "macro.dbt_fabric.fabric__make_temp_relation": {"name": "fabric__make_temp_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_fabric.fabric__make_temp_relation", "macro_sql": "{% macro fabric__make_temp_relation(base_relation, suffix='__dbt_temp') %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3643897, "supported_languages": null}, "macro.dbt_fabric.fabric__get_drop_sql": {"name": "fabric__get_drop_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_fabric.fabric__get_drop_sql", "macro_sql": "{% macro fabric__get_drop_sql(relation) -%}\n  {% if relation.type == 'view' -%}\n      {% call statement('find_references', fetch_result=true) %}\n        {{ get_use_database_sql(relation.database) }}\n        select\n            sch.name as schema_name,\n            obj.name as view_name\n        from sys.sql_expression_dependencies refs\n        inner join sys.objects obj\n        on refs.referencing_id = obj.object_id\n        inner join sys.schemas sch\n        on obj.schema_id = sch.schema_id\n        where refs.referenced_database_name = '{{ relation.database }}'\n        and refs.referenced_schema_name = '{{ relation.schema }}'\n        and refs.referenced_entity_name = '{{ relation.identifier }}'\n        and refs.referencing_class = 1\n        and obj.type = 'V'\n        {{ apply_label() }}\n      {% endcall %}\n      {% set references = load_result('find_references')['data'] %}\n      {% for reference in references -%}\n        -- dropping referenced view {{ reference[0] }}.{{ reference[1] }}\n        {% do adapter.drop_relation\n          (api.Relation.create(\n            identifier = reference[1], schema = reference[0], database = relation.database, type='view'\n          ))%}\n      {% endfor %}\n    {% elif relation.type == 'table'%}\n      {% set object_id_type = 'U' %}\n    {%- else -%}\n        {{ exceptions.raise_not_implemented('Invalid relation being dropped: ' ~ relation) }}\n    {% endif %}\n    {{ get_use_database_sql(relation.database) }}\n    EXEC('DROP {{ relation.type }} IF EXISTS {{ relation.include(database=False) }};');\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.366688, "supported_languages": null}, "macro.dbt_fabric.fabric__rename_relation": {"name": "fabric__rename_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_fabric.fabric__rename_relation", "macro_sql": "{% macro fabric__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n     {{ get_use_database_sql(from_relation.database) }}\n      EXEC sp_rename '{{ from_relation.schema }}.{{ from_relation.identifier }}', '{{ to_relation.identifier }}'\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3672779, "supported_languages": null}, "macro.dbt_fabric.fabric__truncate_relation": {"name": "fabric__truncate_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_fabric.fabric__truncate_relation", "macro_sql": "{% macro fabric__truncate_relation(relation) -%}\n\n  {% set tempTableName %}\n    {{ relation.include(database=False).identifier.replace(\"#\", \"\") }}_{{ range(21000, 109000) | random }}\n  {% endset %}\n  {{ log(\"Truncate Statement is not supported, Using random table as a temp table. - \" ~ tempTableName) }}\n  {% call statement('truncate_relation') -%}\n    CREATE TABLE {{ tempTableName }} AS SELECT * FROM {{ relation }} WHERE 1=2\n    EXEC('DROP TABLE IF EXISTS {{ relation.include(database=False) }};');\n    EXEC('CREATE TABLE {{ relation.include(database=False) }} AS SELECT * FROM {{ tempTableName }};');\n    EXEC('DROP TABLE IF EXISTS {{ tempTableName }};');\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.368505, "supported_languages": null}, "macro.dbt_fabric.apply_label": {"name": "apply_label", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_fabric.apply_label", "macro_sql": "{% macro apply_label() %}\n    {{ log (config.get('query_tag','dbt-fabric'))}}\n    {%- set query_label = config.get('query_tag','dbt-fabric-dw') -%}\n    OPTION (LABEL = '{{query_label}}');\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3739924, "supported_languages": null}, "macro.dbt_fabric.information_schema_hints": {"name": "information_schema_hints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_fabric.information_schema_hints", "macro_sql": "{% macro information_schema_hints() %}\n    {{ return(adapter.dispatch('information_schema_hints')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3743165, "supported_languages": null}, "macro.dbt_fabric.default__information_schema_hints": {"name": "default__information_schema_hints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_fabric.default__information_schema_hints", "macro_sql": "{% macro default__information_schema_hints() %}{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3745031, "supported_languages": null}, "macro.dbt_fabric.fabric__information_schema_hints": {"name": "fabric__information_schema_hints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_fabric.fabric__information_schema_hints", "macro_sql": "{% macro fabric__information_schema_hints() %}{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3746579, "supported_languages": null}, "macro.dbt_fabric.fabric__information_schema_name": {"name": "fabric__information_schema_name", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_fabric.fabric__information_schema_name", "macro_sql": "{% macro fabric__information_schema_name(database) -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3748353, "supported_languages": null}, "macro.dbt_fabric.get_use_database_sql": {"name": "get_use_database_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_fabric.get_use_database_sql", "macro_sql": "{% macro get_use_database_sql(database) %}\n    {{ return(adapter.dispatch('get_use_database_sql', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_use_database_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3752084, "supported_languages": null}, "macro.dbt_fabric.fabric__get_use_database_sql": {"name": "fabric__get_use_database_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_fabric.fabric__get_use_database_sql", "macro_sql": "\n\n{%- macro fabric__get_use_database_sql(database) -%}\n  USE [{{database}}];\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3754466, "supported_languages": null}, "macro.dbt_fabric.fabric__list_schemas": {"name": "fabric__list_schemas", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_fabric.fabric__list_schemas", "macro_sql": "{% macro fabric__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n    select  name as [schema]\n    from sys.schemas {{ information_schema_hints() }} {{ apply_label() }}\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.information_schema_hints", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3760955, "supported_languages": null}, "macro.dbt_fabric.fabric__check_schema_exists": {"name": "fabric__check_schema_exists", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_fabric.fabric__check_schema_exists", "macro_sql": "{% macro fabric__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    SELECT count(*) as schema_exist FROM sys.schemas WHERE name = '{{ schema }}' {{ apply_label() }}\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3768632, "supported_languages": null}, "macro.dbt_fabric.fabric__list_relations_without_caching": {"name": "fabric__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_fabric.fabric__list_relations_without_caching", "macro_sql": "{% macro fabric__list_relations_without_caching(schema_relation) -%}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    {{ get_use_database_sql(schema_relation.database) }}\n    with base as (\n      select\n        DB_NAME() as [database],\n        t.name as [name],\n        SCHEMA_NAME(t.schema_id) as [schema],\n        'table' as table_type\n      from sys.tables as t {{ information_schema_hints() }}\n      union all\n      select\n        DB_NAME() as [database],\n        v.name as [name],\n        SCHEMA_NAME(v.schema_id) as [schema],\n        'view' as table_type\n      from sys.views as v {{ information_schema_hints() }}\n    )\n    select * from base\n    where [schema] like '{{ schema_relation.schema }}'\n    {{ apply_label() }}\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.information_schema_hints", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3777306, "supported_languages": null}, "macro.dbt_fabric.fabric__get_relation_without_caching": {"name": "fabric__get_relation_without_caching", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_fabric.fabric__get_relation_without_caching", "macro_sql": "{% macro fabric__get_relation_without_caching(schema_relation) -%}\n  {% call statement('get_relation_without_caching', fetch_result=True) -%}\n    {{ get_use_database_sql(schema_relation.database) }}\n    with base as (\n      select\n        DB_NAME() as [database],\n        t.name as [name],\n        SCHEMA_NAME(t.schema_id) as [schema],\n        'table' as table_type\n      from sys.tables as t {{ information_schema_hints() }}\n      union all\n      select\n        DB_NAME() as [database],\n        v.name as [name],\n        SCHEMA_NAME(v.schema_id) as [schema],\n        'view' as table_type\n      from sys.views as v {{ information_schema_hints() }}\n    )\n    select * from base\n    where [schema] like '{{ schema_relation.schema }}'\n    and [name] like '{{ schema_relation.identifier }}'\n    {{ apply_label() }}\n  {% endcall %}\n  {{ return(load_result('get_relation_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.information_schema_hints", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3786583, "supported_languages": null}, "macro.dbt_fabric.fabric__get_relation_last_modified": {"name": "fabric__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_fabric.fabric__get_relation_last_modified", "macro_sql": "{% macro fabric__get_relation_last_modified(information_schema, relations) -%}\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select\n            o.name as [identifier]\n            , s.name as [schema]\n            , o.modify_date as last_modified\n            , current_timestamp as snapshotted_at\n        from sys.objects o\n        inner join sys.schemas s on o.schema_id = s.schema_id and [type] = 'U'\n        where (\n            {%- for relation in relations -%}\n            (upper(s.name) = upper('{{ relation.schema }}') and\n                upper(o.name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n        )\n        {{ apply_label() }}\n  {%- endcall -%}\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3796158, "supported_languages": null}, "macro.dbt_fabric.fabric__get_limit_subquery_sql": {"name": "fabric__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt_fabric.fabric__get_limit_subquery_sql", "macro_sql": "{% macro fabric__get_limit_subquery_sql(sql, limit) %}\n\n    {% if sql.strip().lower().startswith('with') %}\n        {{ sql }} order by (select null)\n    offset 0 rows fetch first {{ limit }} rows only\n    {% else -%}\n        select *\n        from (\n            {{ sql }}\n        ) as model_limit_subq order by (select null)\n    offset 0 rows fetch first {{ limit }} rows only\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3804712, "supported_languages": null}, "macro.dbt_fabric.fabric__create_schema": {"name": "fabric__create_schema", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt_fabric.fabric__create_schema", "macro_sql": "{% macro fabric__create_schema(relation) -%}\n  {% call statement('create_schema') -%}\n    USE [{{ relation.database }}];\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.schema }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3823287, "supported_languages": null}, "macro.dbt_fabric.fabric__create_schema_with_authorization": {"name": "fabric__create_schema_with_authorization", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt_fabric.fabric__create_schema_with_authorization", "macro_sql": "{% macro fabric__create_schema_with_authorization(relation, schema_authorization) -%}\n  {% call statement('create_schema') -%}\n    {{ get_use_database_sql(relation.database) }}\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.schema }}] AUTHORIZATION [{{ schema_authorization }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3829305, "supported_languages": null}, "macro.dbt_fabric.fabric__drop_schema": {"name": "fabric__drop_schema", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt_fabric.fabric__drop_schema", "macro_sql": "{% macro fabric__drop_schema(relation) -%}\n  {%- set relations_in_schema = list_relations_without_caching(relation) %}\n\n  {% for row in relations_in_schema %}\n    {%- set schema_relation = api.Relation.create(database=relation.database,\n                                               schema=relation.schema,\n                                               identifier=row[1],\n                                               type=row[3]\n                                               ) -%}\n    {% do adapter.drop_relation(schema_relation) %}\n  {%- endfor %}\n\n  {% call statement('drop_schema') -%}\n      EXEC('DROP SCHEMA IF EXISTS {{ relation.schema }}')\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.list_relations_without_caching", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3840394, "supported_languages": null}, "macro.dbt_fabric.fabric__create_clustered_columnstore_index": {"name": "fabric__create_clustered_columnstore_index", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt_fabric.fabric__create_clustered_columnstore_index", "macro_sql": "{% macro fabric__create_clustered_columnstore_index(relation) -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.385438, "supported_languages": null}, "macro.dbt_fabric.drop_xml_indexes": {"name": "drop_xml_indexes", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt_fabric.drop_xml_indexes", "macro_sql": "{% macro drop_xml_indexes() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3856196, "supported_languages": null}, "macro.dbt_fabric.drop_spatial_indexes": {"name": "drop_spatial_indexes", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt_fabric.drop_spatial_indexes", "macro_sql": "{% macro drop_spatial_indexes() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3857937, "supported_languages": null}, "macro.dbt_fabric.drop_fk_constraints": {"name": "drop_fk_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt_fabric.drop_fk_constraints", "macro_sql": "{% macro drop_fk_constraints() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3859668, "supported_languages": null}, "macro.dbt_fabric.drop_pk_constraints": {"name": "drop_pk_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt_fabric.drop_pk_constraints", "macro_sql": "{% macro drop_pk_constraints() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3861372, "supported_languages": null}, "macro.dbt_fabric.drop_fk_indexes_on_table": {"name": "drop_fk_indexes_on_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt_fabric.drop_fk_indexes_on_table", "macro_sql": "{% macro drop_fk_indexes_on_table(relation) -%}\n  {% call statement('find_references', fetch_result=true) %}\n      USE [{{ relation.database }}];\n      SELECT  obj.name AS FK_NAME,\n      sch.name AS [schema_name],\n      tab1.name AS [table],\n      col1.name AS [column],\n      tab2.name AS [referenced_table],\n      col2.name AS [referenced_column]\n      FROM sys.foreign_key_columns fkc\n      INNER JOIN sys.objects obj\n          ON obj.object_id = fkc.constraint_object_id\n      INNER JOIN sys.tables tab1\n          ON tab1.object_id = fkc.parent_object_id\n      INNER JOIN sys.schemas sch\n          ON tab1.schema_id = sch.schema_id\n      INNER JOIN sys.columns col1\n          ON col1.column_id = parent_column_id AND col1.object_id = tab1.object_id\n      INNER JOIN sys.tables tab2\n          ON tab2.object_id = fkc.referenced_object_id\n      INNER JOIN sys.columns col2\n          ON col2.column_id = referenced_column_id AND col2.object_id = tab2.object_id\n      WHERE sch.name = '{{ relation.schema }}' and tab2.name = '{{ relation.identifier }}'\n  {% endcall %}\n      {% set references = load_result('find_references')['data'] %}\n      {% for reference in references -%}\n        {% call statement('main') -%}\n           alter table [{{reference[1]}}].[{{reference[2]}}] drop constraint [{{reference[0]}}]\n        {%- endcall %}\n      {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3873703, "supported_languages": null}, "macro.dbt_fabric.create_clustered_index": {"name": "create_clustered_index", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt_fabric.create_clustered_index", "macro_sql": "{% macro create_clustered_index(columns, unique=False) -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3876336, "supported_languages": null}, "macro.dbt_fabric.create_nonclustered_index": {"name": "create_nonclustered_index", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt_fabric.create_nonclustered_index", "macro_sql": "{% macro create_nonclustered_index(columns, includes=False) %}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3878708, "supported_languages": null}, "macro.dbt_fabric.fabric__list_nonclustered_rowstore_indexes": {"name": "fabric__list_nonclustered_rowstore_indexes", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt_fabric.fabric__list_nonclustered_rowstore_indexes", "macro_sql": "{% macro fabric__list_nonclustered_rowstore_indexes(relation) -%}\n  {% call statement('list_nonclustered_rowstore_indexes', fetch_result=True) -%}\n\n    SELECT i.name AS index_name\n    , i.name + '__dbt_backup' as index_new_name\n    , COL_NAME(ic.object_id,ic.column_id) AS column_name\n    FROM sys.indexes AS i\n    INNER JOIN sys.index_columns AS ic\n        ON i.object_id = ic.object_id AND i.index_id = ic.index_id and i.type <> 5\n    WHERE i.object_id = OBJECT_ID('{{ relation.schema }}.{{ relation.identifier }}')\n\n    UNION ALL\n\n    SELECT  obj.name AS index_name\n    , obj.name + '__dbt_backup' as index_new_name\n    , col1.name AS column_name\n    FROM sys.foreign_key_columns fkc\n    INNER JOIN sys.objects obj\n        ON obj.object_id = fkc.constraint_object_id\n    INNER JOIN sys.tables tab1\n        ON tab1.object_id = fkc.parent_object_id\n    INNER JOIN sys.schemas sch\n        ON tab1.schema_id = sch.schema_id\n    INNER JOIN sys.columns col1\n        ON col1.column_id = parent_column_id AND col1.object_id = tab1.object_id\n    INNER JOIN sys.tables tab2\n        ON tab2.object_id = fkc.referenced_object_id\n    INNER JOIN sys.columns col2\n        ON col2.column_id = referenced_column_id AND col2.object_id = tab2.object_id\n    WHERE sch.name = '{{ relation.schema }}' and tab1.name = '{{ relation.identifier }}'\n\n  {% endcall %}\n  {{ return(load_result('list_nonclustered_rowstore_indexes').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3886895, "supported_languages": null}, "macro.dbt_fabric.fabric__get_show_grant_sql": {"name": "fabric__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__get_show_grant_sql", "macro_sql": "{% macro fabric__get_show_grant_sql(relation) %}\n    select\n        GRANTEE as grantee,\n        PRIVILEGE_TYPE as privilege_type\n    from INFORMATION_SCHEMA.TABLE_PRIVILEGES {{ information_schema_hints() }}\n    where TABLE_CATALOG = '{{ relation.database }}'\n      and TABLE_SCHEMA = '{{ relation.schema }}'\n      and TABLE_NAME = '{{ relation.identifier }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3909547, "supported_languages": null}, "macro.dbt_fabric.fabric__get_grant_sql": {"name": "fabric__get_grant_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__get_grant_sql", "macro_sql": "\n\n\n{%- macro fabric__get_grant_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3917923, "supported_languages": null}, "macro.dbt_fabric.fabric__get_revoke_sql": {"name": "fabric__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__get_revoke_sql", "macro_sql": "{%- macro fabric__get_revoke_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.392729, "supported_languages": null}, "macro.dbt_fabric.get_provision_sql": {"name": "get_provision_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_fabric.get_provision_sql", "macro_sql": "{% macro get_provision_sql(relation, privilege, grantees) %}\n    {% for grantee in grantees %}\n        if not exists(select name from sys.database_principals where name = '{{ grantee }}')\n        create user [{{ grantee }}] from external provider;\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3931713, "supported_languages": null}, "macro.dbt_fabric.fabric__apply_grants": {"name": "fabric__apply_grants", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__apply_grants", "macro_sql": "{% macro fabric__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n\n            {% if config.get('auto_provision_aad_principals', False) %}\n                {% set provision_statement_list = get_dcl_statement_list(relation, needs_granting, get_provision_sql) %}\n            {% else %}\n                {% set provision_statement_list = [] %}\n            {% endif %}\n\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + provision_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.3960261, "supported_languages": null}, "macro.dbt_fabric.fabric__get_catalog": {"name": "fabric__get_catalog", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_fabric.fabric__get_catalog", "macro_sql": "{% macro fabric__get_catalog(information_schemas, schemas) -%}\n    {% set query_label = apply_label() %}\n    {%- call statement('catalog', fetch_result=True) -%}\n\n        with\n        principals as (\n            select\n                name as principal_name,\n                principal_id as principal_id\n            from\n                sys.database_principals {{ information_schema_hints() }}\n        ),\n\n        schemas as (\n            select\n                name as schema_name,\n                schema_id as schema_id,\n                principal_id as principal_id\n            from\n                sys.schemas {{ information_schema_hints() }}\n        ),\n\n        tables as (\n            select\n                object_id,\n                name as table_name,\n                schema_id as schema_id,\n                principal_id as principal_id,\n                'BASE TABLE' as table_type\n            from\n                sys.tables {{ information_schema_hints() }}\n        ),\n\n        tables_with_metadata as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n                table_type\n            from\n                tables\n            join schemas on tables.schema_id = schemas.schema_id\n        ),\n\n        views as (\n            select\n                object_id,\n                name as table_name,\n                schema_id as schema_id,\n                principal_id as principal_id,\n                'VIEW' as table_type\n            from\n                sys.views {{ information_schema_hints() }}\n        ),\n\n        views_with_metadata as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n                table_type\n            from\n                views\n            join schemas on views.schema_id = schemas.schema_id\n        ),\n\n        tables_and_views as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                principal_name,\n                table_type\n            from\n                tables_with_metadata\n            join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n            union all\n            select\n                object_id,\n                table_name,\n                schema_name,\n                principal_name,\n                table_type\n            from\n                views_with_metadata\n            join principals on views_with_metadata.owner_principal_id = principals.principal_id\n        ),\n\n        cols as (\n\n            select\n                c.object_id,\n                c.name as column_name,\n                c.column_id as column_index,\n                t.name as column_type\n            from sys.columns as c {{ information_schema_hints() }}\n            left join sys.types as t on c.system_type_id = t.system_type_id {{ information_schema_hints() }}\n        )\n\n        select\n            DB_NAME() as table_database,\n            tv.schema_name as table_schema,\n            tv.table_name,\n            tv.table_type,\n            null as table_comment,\n            tv.principal_name as table_owner,\n            cols.column_name,\n            cols.column_index,\n            cols.column_type,\n            null as column_comment\n        from tables_and_views tv\n        join cols on tv.object_id = cols.object_id\n        where ({%- for schema in schemas -%}\n            upper(tv.schema_name) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%})\n\n        order by column_index\n        {{ query_label }}\n\n        {%- endcall -%}\n\n    {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.statement", "macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4045644, "supported_languages": null}, "macro.dbt_fabric.fabric__get_catalog_relations": {"name": "fabric__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_fabric.fabric__get_catalog_relations", "macro_sql": "{% macro fabric__get_catalog_relations(information_schema, relations) -%}\n    {% set query_label = apply_label() %}\n    {%- call statement('catalog', fetch_result=True) -%}\n\n    with\n    principals as (\n        select\n            name as principal_name,\n            principal_id as principal_id\n        from\n            sys.database_principals {{ information_schema_hints() }}\n    ),\n\n    schemas as (\n        select\n            name as schema_name,\n            schema_id as schema_id,\n            principal_id as principal_id\n        from\n            sys.schemas {{ information_schema_hints() }}\n    ),\n\n    tables as (\n        select\n            object_id,\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'BASE TABLE' as table_type\n        from\n            sys.tables {{ information_schema_hints() }}\n    ),\n\n    tables_with_metadata as (\n        select\n            object_id,\n            table_name,\n            schema_name,\n            coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            tables\n        join schemas on tables.schema_id = schemas.schema_id\n    ),\n\n    views as (\n        select\n            object_id,\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'VIEW' as table_type\n        from\n            sys.views {{ information_schema_hints() }}\n    ),\n\n    views_with_metadata as (\n        select\n            object_id,\n            table_name,\n            schema_name,\n            coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            views\n        join schemas on views.schema_id = schemas.schema_id\n    ),\n\n    tables_and_views as (\n        select\n            object_id,\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            tables_with_metadata\n        join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n        union all\n        select\n            object_id,\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            views_with_metadata\n        join principals on views_with_metadata.owner_principal_id = principals.principal_id\n    ),\n\n    cols as (\n\n        select\n            c.object_id,\n            c.name as column_name,\n            c.column_id as column_index,\n            t.name as column_type\n        from sys.columns as c {{ information_schema_hints() }}\n        left join sys.types as t on c.system_type_id = t.system_type_id {{ information_schema_hints() }}\n    )\n\n    select\n        DB_NAME() as table_database,\n        tv.schema_name as table_schema,\n        tv.table_name,\n        tv.table_type,\n        null as table_comment,\n        tv.principal_name as table_owner,\n        cols.column_name,\n        cols.column_index,\n        cols.column_type,\n        null as column_comment\n    from tables_and_views tv\n    join cols on tv.object_id = cols.object_id\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    upper(tv.schema_name) = upper('{{ relation.schema }}')\n                    and upper(tv.table_name) = upper('{{ relation.identifier }}')\n                )\n            {% elif relation.schema %}\n                (\n                    upper(tv.schema_name) = upper('{{ relation.schema }}')\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n    order by column_index\n    {{ query_label }}\n    {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.statement", "macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4066656, "supported_languages": null}, "macro.dbt_fabric.fabric__get_empty_subquery_sql": {"name": "fabric__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_fabric.fabric__get_empty_subquery_sql", "macro_sql": "{% macro fabric__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {% if sql.strip().lower().startswith('with') %}\n        {{ select_sql }}\n    {% else -%}\n        select * from (\n        {{ select_sql }}\n    ) dbt_sbq_tmp\n    where 1 = 0\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4141977, "supported_languages": null}, "macro.dbt_fabric.fabric__get_columns_in_relation": {"name": "fabric__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_fabric.fabric__get_columns_in_relation", "macro_sql": "{% macro fabric__get_columns_in_relation(relation) -%}\n    {% set query_label = apply_label() %}\n    {% call statement('get_columns_in_relation', fetch_result=True) %}\n\n        with mapping as (\n            select\n                row_number() over (partition by object_name(c.object_id) order by c.column_id) as ordinal_position,\n                c.name collate database_default as column_name,\n                t.name as data_type,\n                c.max_length as character_maximum_length,\n                c.precision as numeric_precision,\n                c.scale as numeric_scale\n            from [{{ 'tempdb' if '#' in relation.identifier else relation.database }}].sys.columns c {{ information_schema_hints() }}\n            inner join sys.types t {{ information_schema_hints() }}\n            on c.user_type_id = t.user_type_id\n            where c.object_id = object_id('{{ 'tempdb..' ~ relation.include(database=false, schema=false) if '#' in relation.identifier else relation }}')\n        )\n\n        select\n            column_name,\n            data_type,\n            character_maximum_length,\n            numeric_precision,\n            numeric_scale\n        from mapping\n        order by ordinal_position\n        {{ query_label }}\n\n    {% endcall %}\n    {% set table = load_result('get_columns_in_relation').table %}\n    {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.statement", "macro.dbt_fabric.information_schema_hints", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4156408, "supported_languages": null}, "macro.dbt_fabric.fabric__get_columns_in_query": {"name": "fabric__get_columns_in_query", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_fabric.fabric__get_columns_in_query", "macro_sql": "{% macro fabric__get_columns_in_query(select_sql) %}\n    {% set query_label = apply_label() %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select TOP 0 * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where 0 = 1\n        {{ query_label }}\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4165015, "supported_languages": null}, "macro.dbt_fabric.fabric__alter_column_type": {"name": "fabric__alter_column_type", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_fabric.fabric__alter_column_type", "macro_sql": "{% macro fabric__alter_column_type(relation, column_name, new_column_type) %}\n\n    {%- set table_name= relation.identifier -%}\n    {%- set schema_name = relation.schema -%}\n\n    {% set generate_tmp_relation_script %}\n        SELECT TRIM(REPLACE(STRING_AGG(ColumnName + ' ', ',-'), '-', CHAR(10)))  AS ColumnDef\n        FROM\n        (\n            SELECT\n            CAST(c.COLUMN_NAME AS VARCHAR) AS ColumnName\n            FROM INFORMATION_SCHEMA.TABLES t\n            JOIN INFORMATION_SCHEMA.COLUMNS c\n                ON t.TABLE_SCHEMA = c.TABLE_SCHEMA\n                AND t.TABLE_NAME = c.TABLE_NAME\n                WHERE t.TABLE_NAME = REPLACE('{{table_name}}','\"','')\n                AND t.TABLE_SCHEMA = REPLACE('{{schema_name}}','\"','')\n                AND c.COLUMN_NAME <> REPLACE('{{column_name}}','\"','')\n        ) T\n    {% endset %}\n\n    {%- set query_result = run_query(generate_tmp_relation_script) -%}\n    {%- set query_result_text = query_result.rows[0][0] -%}\n\n    {% set tempTableName %}\n        {{ relation.schema }}.{{ relation.identifier }}_{{ range(1300, 19000) | random }}\n    {% endset %}\n    {{ log(\"Cannot Alter table type, as it is not supported. Using random table as a temp table. - \" ~ tempTableName) }}\n\n    {% set tempTable %}\n        CREATE TABLE {{tempTableName}}\n        AS SELECT {{query_result_text}}, CAST({{ column_name }} AS {{new_column_type}}) AS {{column_name}} FROM {{ relation.schema }}.{{ relation.identifier }}\n        {{ apply_label() }}\n    {% endset %}\n\n    {% call statement('create_temp_table') -%}\n        {{ tempTable }}\n    {%- endcall %}\n\n    {% set dropTable %}\n        DROP TABLE {{ relation.schema }}.{{ relation.identifier }}\n    {% endset %}\n\n    {% call statement('drop_table') -%}\n        {{ dropTable }}\n    {%- endcall %}\n\n    {% set createTable %}\n        CREATE TABLE {{ relation.schema }}.{{ relation.identifier }}\n        AS SELECT * FROM {{tempTableName}} {{ apply_label() }}\n    {% endset %}\n\n    {% call statement('create_Table') -%}\n        {{ createTable }}\n    {%- endcall %}\n\n    {% set dropTempTable %}\n        DROP TABLE {{tempTableName}}\n    {% endset %}\n\n    {% call statement('drop_temp_table') -%}\n        {{ dropTempTable }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_fabric.apply_label", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4196262, "supported_languages": null}, "macro.dbt_fabric.fabric__alter_relation_add_remove_columns": {"name": "fabric__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_fabric.fabric__alter_relation_add_remove_columns", "macro_sql": "{% macro fabric__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  {% call statement('add_drop_columns') -%}\n    {% if add_columns %}\n        alter {{ relation.type }} {{ relation }}\n        add {% for column in add_columns %}\"{{ column.name }}\" {{ column.data_type }}{{ ', ' if not loop.last }}{% endfor %};\n    {% endif %}\n\n    {% if remove_columns %}\n        alter {{ relation.type }} {{ relation }}\n        drop column {% for column in remove_columns %}\"{{ column.name }}\"{{ ',' if not loop.last }}{% endfor %};\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4210875, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4272373, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4283834, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4306688, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4310968, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4313004, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4339147, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.434236, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4358869, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4367151, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4378767, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4388359, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4389985, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4394622, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4396331, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.440171, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.440482, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.netsuite_project.sqlserver__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4409702, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4412324, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4419255, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4422152, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4428647, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4432101, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4437077, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4439301, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4448652, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4452107, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4456947, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4462397, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4465358, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.447046, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4473422, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4487455, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4496155, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4500093, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.451098, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4516711, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.45195, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.452583, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4531999, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4537184, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4540515, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.454621, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.454917, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4555678, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4560947, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4563978, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.456903, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4572074, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4579504, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4584606, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4595592, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4603891, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4609594, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.461243, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.461732, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4620614, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.462558, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4627817, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.463368, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4636118, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4652517, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4655924, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4659293, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4662402, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4665887, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4668999, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4672399, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4676135, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.467942, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4682555, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4686022, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4689035, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4692287, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.469551, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.469994, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4701586, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.471486, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4728403, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.473313, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4740832, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4747608, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.475107, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4757576, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4763584, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4769244, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4771984, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4778674, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4784322, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.479626, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4805002, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4808915, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4813075, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.481722, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4824436, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4829755, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4835181, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.483975, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4845996, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4851525, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4865224, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4889874, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4896517, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4900818, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4912927, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4921958, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4926388, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4932573, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4941235, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4950469, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4955492, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4958105, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4963284, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4966536, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.497767, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4981632, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4988585, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4991643, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.4997754, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5000575, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5005972, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5009053, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5014453, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.501748, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5022194, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5024946, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.503902, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5042171, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5065427, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.506959, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.507457, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5079849, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.508293, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5090737, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5094013, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5097866, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5108085, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5125122, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5127687, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5138788, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5142431, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.514543, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5171783, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.517989, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5187128, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5192027, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.519479, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.519997, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.520298, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5208309, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5211322, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5225844, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5229757, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5239818, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5254261, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5263815, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.526791, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.527164, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.527851, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5284913, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5291207, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5311499, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5315814, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.531897, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5321968, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5325115, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5379267, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5383797, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.538874, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5406787, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5411296, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5415072, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5444307, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5471745, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.netsuite_project.sqlserver__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5562341, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5568824, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5572298, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5574403, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5577493, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.557994, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5584288, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.558889, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where {{ columns.dbt_valid_to }} is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as {{ columns.dbt_valid_to }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.561691, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5620966, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as {{ columns.dbt_valid_to }}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5630426, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5639436, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.565165, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5660625, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.valid_snapshot_target(target_relation, columns) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5761883, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.577244, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5783052, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5851576, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.587015, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5875099, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5885386, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5889301, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5892122, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.589524, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5897713, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5900972, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5903401, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5913095, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5916986, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.5942695, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6002069, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6076753, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6084964, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6090076, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.611682, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6121445, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6136632, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6190157, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6242795, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6249099, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6252663, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.625745, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6259918, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6324658, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.634229, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.634733, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.635119, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6357355, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6361232, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6367373, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6371164, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6376681, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.638051, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6383696, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.638761, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6391175, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6397157, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6496465, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6509085, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6589353, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6614735, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.664022, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6657987, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6683404, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6694822, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6708279, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6713042, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6727931, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6820004, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6853838, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6859417, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6880414, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.688603, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6899157, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6932933, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6940215, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6948137, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.6997955, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.701546, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7021708, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7026105, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7039018, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7044725, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7049387, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.706053, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7064009, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7068315, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7071793, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7077444, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7088425, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7118547, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7122037, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7126722, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7132714, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7137873, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7144425, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7148137, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.715185, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.715697, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.71682, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7172878, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7175946, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7226932, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7232497, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7236874, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7242267, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7246225, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7250657, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7254496, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7259552, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7263684, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7269995, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.727375, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.727811, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7281947, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7285464, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7288861, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7291992, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7296302, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.729992, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7307653, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7311409, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ compiled_code }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7315464, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.732224, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7326367, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7329867, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.733371, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7341547, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7351167, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_fabric.fabric__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.736237, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7365649, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7368686, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7370925, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7379558, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.738311, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7384946, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7388327, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.73917, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7405694, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7408555, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7411826, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7420413, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7424347, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7427242, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7430441, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7433112, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7461216, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7464855, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.746832, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7470694, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7477953, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7481773, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7484715, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7489355, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7493644, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7498443, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7502704, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7507648, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7522051, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.752618, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7531288, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.753608, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7561057, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.759639, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7599745, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7606232, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7610657, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7615027, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7618766, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.764281, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7650092, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7653837, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7661016, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7665792, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7679415, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7684739, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7702198, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7709837, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7715325, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7724886, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.773038, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7736442, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7744005, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7751923, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7762957, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7769053, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7775638, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7780426, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7808342, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7833774, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7849255, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7854018, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7883017, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7895095, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7901177, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.791168, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7917666, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7923992, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7930243, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7941139, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.795097, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.795871, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.796636, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7977319, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.7994266, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8005445, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.802277, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.803197, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8038306, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.80554, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8076496, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8086677, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8094864, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8107696, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8126423, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8139384, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8156736, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8207579, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8240743, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.825166, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8265195, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8273554, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8283207, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8294902, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8301873, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8317244, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8335795, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.834538, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.835228, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.836676, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8388863, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8394492, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8398454, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.840335, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8406994, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8419147, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8435996, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.844114, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8444657, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.845327, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8461492, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8475022, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8481529, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8491101, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8497298, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8503773, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8515623, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8533127, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8552065, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8558636, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8570533, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8591018, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8599458, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8612618, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8631256, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.864872, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.865605, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.86681, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8680973, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8685598, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8689663, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.869366, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.869733, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8700883, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8708556, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8714378, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.872126, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.873234, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.8738399, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9220595, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9231234, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.924704, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9259322, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9276948, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9286191, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9289174, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9292078, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9295151, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9308977, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9317653, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9321575, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9332497, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.netsuite_project.sqlserver__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9354284, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.938881, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9394767, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.94, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.941872, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9450028, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9470456, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9499905, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9507272, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.951869, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9524605, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.952762, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9536333, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9551394, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9600315, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9672222, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9685113, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9697394, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9702132, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9709787, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9737089, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.974491, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9759855, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.97703, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9777832, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9782724, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9789326, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9796534, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.98092, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9818857, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728687171.9822938, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {"exposure.netsuite_project.sales_pipeline": {"name": "sales_pipeline", "resource_type": "exposure", "package_name": "netsuite_project", "path": "exposures.yml", "original_file_path": "models/exposures.yml", "unique_id": "exposure.netsuite_project.sales_pipeline", "fqn": ["netsuite_project", "sales_pipeline"], "type": "dashboard", "owner": {"email": "palandez@jaffleshop.com", "name": "Perdo Alandez"}, "description": "The objective is to provide some visibility on the current pipeline activity to the sales people and the management.", "label": "Sales Pipeline Dashboard", "maturity": "high", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://bi.tool/dashboards/1", "depends_on": {"macros": [], "nodes": ["model.netsuite_project.dataset_sales_pipeline_rls"]}, "refs": [{"name": "dataset_sales_pipeline_rls", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1728687173.7163985}, "exposure.netsuite_project.budget_monitoring": {"name": "budget_monitoring", "resource_type": "exposure", "package_name": "netsuite_project", "path": "exposures.yml", "original_file_path": "models/exposures.yml", "unique_id": "exposure.netsuite_project.budget_monitoring", "fqn": ["netsuite_project", "budget_monitoring"], "type": "dashboard", "owner": {"email": "palandez@jaffleshop.com", "name": "Perdo Alandez"}, "description": "The objectie is to track the budget progress for the current year.", "label": "Budget Monitoring Dashboard", "maturity": "high", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://bi.tool/dashboards/3", "depends_on": {"macros": [], "nodes": ["model.netsuite_project.dataset_sales_pipeline_monitoring_rls"]}, "refs": [{"name": "dataset_sales_pipeline_monitoring_rls", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1728687173.7190542}, "exposure.netsuite_project.data_quality": {"name": "data_quality", "resource_type": "exposure", "package_name": "netsuite_project", "path": "exposures.yml", "original_file_path": "models/exposures.yml", "unique_id": "exposure.netsuite_project.data_quality", "fqn": ["netsuite_project", "data_quality"], "type": "dashboard", "owner": {"email": "palandez@jaffleshop.com", "name": "Perdo Alandez"}, "description": "The objective is to highlight the main data inconsistencies in the datawarehouse", "label": "Data Quality Dashboard", "maturity": "high", "meta": {}, "tags": [], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://bi.tool/dashboards/2", "depends_on": {"macros": [], "nodes": ["model.netsuite_project.dim_bu", "model.netsuite_project.dim_customer", "model.netsuite_project.dim_item"]}, "refs": [{"name": "dim_bu", "package": null, "version": null}, {"name": "dim_customer", "package": null, "version": null}, {"name": "dim_item", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1728687173.7220352}}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.netsuite_project.prep_fx_avg_rate_unpivot": ["seed.netsuite_project.fx_avg_rate"], "model.netsuite_project.prep_transaction_with_lines": ["seed.netsuite_project.transaction", "seed.netsuite_project.transactionline"], "model.netsuite_project.prep_transaction_with_lines_for_union": ["model.netsuite_project.transaction_with_line"], "model.netsuite_project.prep_budget_for_union": ["model.netsuite_project.dim_bu", "model.netsuite_project.fact_fx_avg_rate_dated", "model.netsuite_project.fact_fx_avg_rate_latest", "model.netsuite_project.prep_dim_bu_alternate_key_bu_code", "seed.netsuite_project.sales_budget"], "model.netsuite_project.prep_dim_bu_alternate_key_bu_code": ["model.netsuite_project.dim_bu"], "model.netsuite_project.prep_delta_records": ["seed.netsuite_project.transaction", "seed.netsuite_project.transactionline"], "model.netsuite_project.prep_rls_normalize": ["snapshot.netsuite_project.historized_user_rls"], "model.netsuite_project.transaction_with_line": ["model.netsuite_project.prep_delta_records", "model.netsuite_project.prep_transaction_with_lines", "seed.netsuite_project.deleted_records"], "model.netsuite_project.historized_transaction_with_line": ["model.netsuite_project.transaction_with_line"], "model.netsuite_project.dataset_sales_pipeline_monitoring_rls": ["model.netsuite_project.dataset_sales_pipeline_monitoring", "model.netsuite_project.prep_rls_normalize"], "model.netsuite_project.dataset_sales_pipeline_monitoring": ["model.netsuite_project.dataset_sales_pipeline", "model.netsuite_project.prep_budget_for_union"], "model.netsuite_project.dataset_sales_pipeline": ["model.netsuite_project.dim_customer", "model.netsuite_project.dim_date", "model.netsuite_project.dim_item", "model.netsuite_project.fact_all_transactions_with_line"], "model.netsuite_project.dataset_sales_pipeline_rls": ["model.netsuite_project.dataset_sales_pipeline", "model.netsuite_project.prep_rls_normalize"], "model.netsuite_project.dim_bu": ["snapshot.netsuite_project.historized_bu"], "model.netsuite_project.fact_all_transactions_with_line": ["model.netsuite_project.dim_bu", "model.netsuite_project.fact_fx_avg_rate_dated", "model.netsuite_project.fact_fx_avg_rate_latest", "model.netsuite_project.historized_transaction_with_line", "model.netsuite_project.prep_transaction_with_lines_for_union"], "model.netsuite_project.dim_item": ["snapshot.netsuite_project.historized_item"], "model.netsuite_project.dim_date": [], "model.netsuite_project.fact_fx_avg_rate_dated": ["model.netsuite_project.prep_fx_avg_rate_unpivot"], "model.netsuite_project.dim_customer": ["snapshot.netsuite_project.historized_customer"], "model.netsuite_project.fact_fx_avg_rate_latest": ["model.netsuite_project.prep_fx_avg_rate_unpivot"], "snapshot.netsuite_project.historized_user_rls": ["seed.netsuite_project.user_rls"], "snapshot.netsuite_project.historized_bu": ["seed.netsuite_project.subsidiary"], "snapshot.netsuite_project.historized_customer": ["seed.netsuite_project.customer"], "snapshot.netsuite_project.historized_item": ["seed.netsuite_project.item", "seed.netsuite_project.item_category", "seed.netsuite_project.item_pattern"], "test.netsuite_project.test_incremental_load": ["model.netsuite_project.prep_transaction_with_lines", "model.netsuite_project.transaction_with_line"], "seed.netsuite_project.item": [], "seed.netsuite_project.customer": [], "seed.netsuite_project.item_category": [], "seed.netsuite_project.subsidiary": [], "seed.netsuite_project.transactionline": [], "seed.netsuite_project.sales_budget": [], "seed.netsuite_project.deleted_records": [], "seed.netsuite_project.transaction": [], "seed.netsuite_project.user_rls": [], "seed.netsuite_project.item_pattern": [], "seed.netsuite_project.fx_avg_rate": [], "test.netsuite_project.not_null_prep_budget_for_union_live_bu_code.d946ceafd7": ["model.netsuite_project.prep_budget_for_union"], "test.netsuite_project.unexpected_opportunity_status.a0dda7bad4": ["model.netsuite_project.transaction_with_line"], "test.netsuite_project.unexpected_sales_order_status.5f4b39d9f8": ["model.netsuite_project.transaction_with_line"], "test.netsuite_project.not_null_historized_transaction_with_line_transaction_nsid.4b11b8bce6": ["model.netsuite_project.historized_transaction_with_line"], "test.netsuite_project.not_null_historized_transaction_with_line_transaction_line_nsid.c46e56a2e1": ["model.netsuite_project.historized_transaction_with_line"], "test.netsuite_project.dbt_utils_unique_combination_of_columns_historized_transaction_with_line_var_dbt_snapshot_col_name___transaction_nsid__transaction_line_nsid.8021ab7f24": ["model.netsuite_project.historized_transaction_with_line"], "test.netsuite_project.not_null_fact_all_transactions_with_line_fx_rate_original_to_usd.0896bf129b": ["model.netsuite_project.fact_all_transactions_with_line"], "test.netsuite_project.not_null_fact_all_transactions_with_line_fx_rate_original_to_dynamic.80ae594c95": ["model.netsuite_project.fact_all_transactions_with_line"], "exposure.netsuite_project.sales_pipeline": ["model.netsuite_project.dataset_sales_pipeline_rls"], "exposure.netsuite_project.budget_monitoring": ["model.netsuite_project.dataset_sales_pipeline_monitoring_rls"], "exposure.netsuite_project.data_quality": ["model.netsuite_project.dim_bu", "model.netsuite_project.dim_customer", "model.netsuite_project.dim_item"]}, "child_map": {"model.netsuite_project.prep_fx_avg_rate_unpivot": ["model.netsuite_project.fact_fx_avg_rate_dated", "model.netsuite_project.fact_fx_avg_rate_latest"], "model.netsuite_project.prep_transaction_with_lines": ["model.netsuite_project.transaction_with_line", "test.netsuite_project.test_incremental_load"], "model.netsuite_project.prep_transaction_with_lines_for_union": ["model.netsuite_project.fact_all_transactions_with_line"], "model.netsuite_project.prep_budget_for_union": ["model.netsuite_project.dataset_sales_pipeline_monitoring", "test.netsuite_project.not_null_prep_budget_for_union_live_bu_code.d946ceafd7"], "model.netsuite_project.prep_dim_bu_alternate_key_bu_code": ["model.netsuite_project.prep_budget_for_union"], "model.netsuite_project.prep_delta_records": ["model.netsuite_project.transaction_with_line"], "model.netsuite_project.prep_rls_normalize": ["model.netsuite_project.dataset_sales_pipeline_monitoring_rls", "model.netsuite_project.dataset_sales_pipeline_rls"], "model.netsuite_project.transaction_with_line": ["model.netsuite_project.historized_transaction_with_line", "model.netsuite_project.prep_transaction_with_lines_for_union", "test.netsuite_project.test_incremental_load", "test.netsuite_project.unexpected_opportunity_status.a0dda7bad4", "test.netsuite_project.unexpected_sales_order_status.5f4b39d9f8"], "model.netsuite_project.historized_transaction_with_line": ["model.netsuite_project.fact_all_transactions_with_line", "test.netsuite_project.dbt_utils_unique_combination_of_columns_historized_transaction_with_line_var_dbt_snapshot_col_name___transaction_nsid__transaction_line_nsid.8021ab7f24", "test.netsuite_project.not_null_historized_transaction_with_line_transaction_line_nsid.c46e56a2e1", "test.netsuite_project.not_null_historized_transaction_with_line_transaction_nsid.4b11b8bce6"], "model.netsuite_project.dataset_sales_pipeline_monitoring_rls": ["exposure.netsuite_project.budget_monitoring"], "model.netsuite_project.dataset_sales_pipeline_monitoring": ["model.netsuite_project.dataset_sales_pipeline_monitoring_rls"], "model.netsuite_project.dataset_sales_pipeline": ["model.netsuite_project.dataset_sales_pipeline_monitoring", "model.netsuite_project.dataset_sales_pipeline_rls"], "model.netsuite_project.dataset_sales_pipeline_rls": ["exposure.netsuite_project.sales_pipeline"], "model.netsuite_project.dim_bu": ["exposure.netsuite_project.data_quality", "model.netsuite_project.fact_all_transactions_with_line", "model.netsuite_project.prep_budget_for_union", "model.netsuite_project.prep_dim_bu_alternate_key_bu_code"], "model.netsuite_project.fact_all_transactions_with_line": ["model.netsuite_project.dataset_sales_pipeline", "test.netsuite_project.not_null_fact_all_transactions_with_line_fx_rate_original_to_dynamic.80ae594c95", "test.netsuite_project.not_null_fact_all_transactions_with_line_fx_rate_original_to_usd.0896bf129b"], "model.netsuite_project.dim_item": ["exposure.netsuite_project.data_quality", "model.netsuite_project.dataset_sales_pipeline"], "model.netsuite_project.dim_date": ["model.netsuite_project.dataset_sales_pipeline"], "model.netsuite_project.fact_fx_avg_rate_dated": ["model.netsuite_project.fact_all_transactions_with_line", "model.netsuite_project.prep_budget_for_union"], "model.netsuite_project.dim_customer": ["exposure.netsuite_project.data_quality", "model.netsuite_project.dataset_sales_pipeline"], "model.netsuite_project.fact_fx_avg_rate_latest": ["model.netsuite_project.fact_all_transactions_with_line", "model.netsuite_project.prep_budget_for_union"], "snapshot.netsuite_project.historized_user_rls": ["model.netsuite_project.prep_rls_normalize"], "snapshot.netsuite_project.historized_bu": ["model.netsuite_project.dim_bu"], "snapshot.netsuite_project.historized_customer": ["model.netsuite_project.dim_customer"], "snapshot.netsuite_project.historized_item": ["model.netsuite_project.dim_item"], "test.netsuite_project.test_incremental_load": [], "seed.netsuite_project.item": ["snapshot.netsuite_project.historized_item"], "seed.netsuite_project.customer": ["snapshot.netsuite_project.historized_customer"], "seed.netsuite_project.item_category": ["snapshot.netsuite_project.historized_item"], "seed.netsuite_project.subsidiary": ["snapshot.netsuite_project.historized_bu"], "seed.netsuite_project.transactionline": ["model.netsuite_project.prep_delta_records", "model.netsuite_project.prep_transaction_with_lines"], "seed.netsuite_project.sales_budget": ["model.netsuite_project.prep_budget_for_union"], "seed.netsuite_project.deleted_records": ["model.netsuite_project.transaction_with_line"], "seed.netsuite_project.transaction": ["model.netsuite_project.prep_delta_records", "model.netsuite_project.prep_transaction_with_lines"], "seed.netsuite_project.user_rls": ["snapshot.netsuite_project.historized_user_rls"], "seed.netsuite_project.item_pattern": ["snapshot.netsuite_project.historized_item"], "seed.netsuite_project.fx_avg_rate": ["model.netsuite_project.prep_fx_avg_rate_unpivot"], "test.netsuite_project.not_null_prep_budget_for_union_live_bu_code.d946ceafd7": [], "test.netsuite_project.unexpected_opportunity_status.a0dda7bad4": [], "test.netsuite_project.unexpected_sales_order_status.5f4b39d9f8": [], "test.netsuite_project.not_null_historized_transaction_with_line_transaction_nsid.4b11b8bce6": [], "test.netsuite_project.not_null_historized_transaction_with_line_transaction_line_nsid.c46e56a2e1": [], "test.netsuite_project.dbt_utils_unique_combination_of_columns_historized_transaction_with_line_var_dbt_snapshot_col_name___transaction_nsid__transaction_line_nsid.8021ab7f24": [], "test.netsuite_project.not_null_fact_all_transactions_with_line_fx_rate_original_to_usd.0896bf129b": [], "test.netsuite_project.not_null_fact_all_transactions_with_line_fx_rate_original_to_dynamic.80ae594c95": [], "exposure.netsuite_project.sales_pipeline": [], "exposure.netsuite_project.budget_monitoring": [], "exposure.netsuite_project.data_quality": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}